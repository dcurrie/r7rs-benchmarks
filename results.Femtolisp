
****************************
Benchmarking Femtolisp on Thu Aug 10 17:06:10 EDT 2017 under Darwin e-MacBookPro.local 16.7.0 Darwin Kernel Version 16.7.0: Thu Jun 15 17:36:27 PDT 2017; root:xnu-3789.70.16~2/RELEASE_X86_64 x86_64

Testing browse under Femtolisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/Femtolisp-prelude.scm
Compiling...
femtolisp_comp /tmp/larcenous/Femtolisp/browse.scm /tmp/larcenous/Femtolisp/browse.scm
Running...
Running browse:2000
Elapsed time: 5.5016629695892334 seconds (5.5019999999999998) for browse:2000
+!CSVLINE!+femtolisp-unknown,browse:2000,5.5016629695892334

real	0m5.522s
user	0m5.510s
sys	0m0.007s

Testing deriv under Femtolisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/Femtolisp-prelude.scm
Compiling...
femtolisp_comp /tmp/larcenous/Femtolisp/deriv.scm /tmp/larcenous/Femtolisp/deriv.scm
Running...
Running deriv:10000000
Elapsed time: 10.8032379150390625 seconds (10.8030000000000008) for deriv:10000000
+!CSVLINE!+femtolisp-unknown,deriv:10000000,10.8032379150390625

real	0m10.820s
user	0m10.800s
sys	0m0.013s

Testing destruc under Femtolisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/Femtolisp-prelude.scm
Compiling...
femtolisp_comp /tmp/larcenous/Femtolisp/destruc.scm /tmp/larcenous/Femtolisp/destruc.scm
Running...
Running destruc:600:50:4000
Elapsed time: 28.7285618782043457 seconds (28.7289999999999992) for destruc:600:50:4000
+!CSVLINE!+femtolisp-unknown,destruc:600:50:4000,28.7285618782043457

real	0m28.746s
user	0m28.704s
sys	0m0.028s

Testing diviter under Femtolisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/Femtolisp-prelude.scm
Compiling...
femtolisp_comp /tmp/larcenous/Femtolisp/diviter.scm /tmp/larcenous/Femtolisp/diviter.scm
Running...
Running diviter:1000:1000000
Elapsed time: 23.1812078952789307 seconds (23.1810000000000009) for diviter:1000:1000000
+!CSVLINE!+femtolisp-unknown,diviter:1000:1000000,23.1812078952789307

real	0m23.198s
user	0m23.117s
sys	0m0.049s

Testing divrec under Femtolisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/Femtolisp-prelude.scm
Compiling...
femtolisp_comp /tmp/larcenous/Femtolisp/divrec.scm /tmp/larcenous/Femtolisp/divrec.scm
Running...
Running divrec:1000:1000000
Elapsed time: 23.4370219707489014 seconds (23.4370000000000012) for divrec:1000:1000000
+!CSVLINE!+femtolisp-unknown,divrec:1000:1000000,23.4370219707489014

real	0m23.454s
user	0m23.361s
sys	0m0.054s

Testing puzzle under Femtolisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/Femtolisp-prelude.scm
Compiling...
femtolisp_comp /tmp/larcenous/Femtolisp/puzzle.scm /tmp/larcenous/Femtolisp/puzzle.scm
Running...
Running puzzle:1000
Elapsed time: 71.9561679363250732 seconds (71.9560000000000031) for puzzle:1000
+!CSVLINE!+femtolisp-unknown,puzzle:1000,71.9561679363250732

real	1m11.975s
user	1m10.845s
sys	0m1.056s

Testing triangl under Femtolisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/Femtolisp-prelude.scm
Compiling...
femtolisp_comp /tmp/larcenous/Femtolisp/triangl.scm /tmp/larcenous/Femtolisp/triangl.scm
Running...
Running triangl:22:1:50
Elapsed time: 33.7575840950012207 seconds (33.7580000000000027) for triangl:22:1:50
+!CSVLINE!+femtolisp-unknown,triangl:22:1:50,33.7575840950012207

real	0m33.774s
user	0m33.697s
sys	0m0.049s

Testing tak under Femtolisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/Femtolisp-prelude.scm
Compiling...
femtolisp_comp /tmp/larcenous/Femtolisp/tak.scm /tmp/larcenous/Femtolisp/tak.scm
Running...
Running tak:40:20:11:1
Elapsed time: 24.9258708953857422 seconds (24.9259999999999984) for tak:40:20:11:1
+!CSVLINE!+femtolisp-unknown,tak:40:20:11:1,24.9258708953857422

real	0m24.943s
user	0m24.835s
sys	0m0.058s

Testing takl under Femtolisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/Femtolisp-prelude.scm
Compiling...
femtolisp_comp /tmp/larcenous/Femtolisp/takl.scm /tmp/larcenous/Femtolisp/takl.scm
Running...
Running takl:40:20:12:1
Elapsed time: 78.2261159420013428 seconds (78.2259999999999991) for takl:40:20:12:1
+!CSVLINE!+femtolisp-unknown,takl:40:20:12:1,78.2261159420013428

real	1m18.243s
user	1m18.035s
sys	0m0.127s

Testing ntakl under Femtolisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/Femtolisp-prelude.scm
Compiling...
femtolisp_comp /tmp/larcenous/Femtolisp/ntakl.scm /tmp/larcenous/Femtolisp/ntakl.scm
Running...
Running ntakl:40:20:12:1
Elapsed time: 57.2681949138641357 seconds (57.2680000000000007) for ntakl:40:20:12:1
+!CSVLINE!+femtolisp-unknown,ntakl:40:20:12:1,57.2681949138641357

real	0m57.285s
user	0m57.180s
sys	0m0.071s

Testing cpstak under Femtolisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/Femtolisp-prelude.scm
Compiling...
femtolisp_comp /tmp/larcenous/Femtolisp/cpstak.scm /tmp/larcenous/Femtolisp/cpstak.scm
Running...
Running cpstak:40:20:11:1
Elapsed time: 47.4180068969726562 seconds (47.4179999999999993) for cpstak:40:20:11:1
+!CSVLINE!+femtolisp-unknown,cpstak:40:20:11:1,47.4180068969726562

real	0m47.434s
user	0m47.283s
sys	0m0.096s

Testing ctak under Femtolisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/Femtolisp-prelude.scm
Compiling...
femtolisp_comp /tmp/larcenous/Femtolisp/ctak.scm /tmp/larcenous/Femtolisp/ctak.scm
Running...
Running ctak:32:16:8:1
Elapsed time: 66.6025640964508057 seconds (66.6029999999999944) for ctak:32:16:8:1
+!CSVLINE!+femtolisp-unknown,ctak:32:16:8:1,66.6025640964508057

real	1m6.620s
user	0m27.181s
sys	0m39.362s

Testing fib under Femtolisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/Femtolisp-prelude.scm
Compiling...
femtolisp_comp /tmp/larcenous/Femtolisp/fib.scm /tmp/larcenous/Femtolisp/fib.scm
Running...
Running fib:40:5
Elapsed time: 51.107806921005249 seconds (51.107999999999997) for fib:40:5
+!CSVLINE!+femtolisp-unknown,fib:40:5,51.107806921005249

real	0m51.124s
user	0m50.987s
sys	0m0.088s

Testing fibc under Femtolisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/Femtolisp-prelude.scm
Compiling...
femtolisp_comp /tmp/larcenous/Femtolisp/fibc.scm /tmp/larcenous/Femtolisp/fibc.scm
Running...
Running fibc:30:10
Elapsed time: 47.4359991550445557 seconds (47.4359999999999999) for fibc:30:10
+!CSVLINE!+femtolisp-unknown,fibc:30:10,47.4359991550445557

real	0m47.451s
user	0m23.589s
sys	0m23.818s

Testing fibfp under Femtolisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/Femtolisp-prelude.scm
Compiling...
femtolisp_comp /tmp/larcenous/Femtolisp/fibfp.scm /tmp/larcenous/Femtolisp/fibfp.scm
Running...
Running fibfp:35:10
Elapsed time: 20.8872501850128174 seconds (20.8870000000000005) for fibfp:35:10
+!CSVLINE!+femtolisp-unknown,fibfp:35:10,20.8872501850128174

real	0m20.903s
user	0m20.839s
sys	0m0.039s

Testing sum under Femtolisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/Femtolisp-prelude.scm
Compiling...
femtolisp_comp /tmp/larcenous/Femtolisp/sum.scm /tmp/larcenous/Femtolisp/sum.scm
Running...
Running sum:10000:200000
Elapsed time: 65.5484509468078613 seconds (65.5480000000000018) for sum:10000:200000
+!CSVLINE!+femtolisp-unknown,sum:10000:200000,65.5484509468078613

real	1m5.564s
user	1m5.388s
sys	0m0.112s

Testing sumfp under Femtolisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/Femtolisp-prelude.scm
Compiling...
femtolisp_comp /tmp/larcenous/Femtolisp/sumfp.scm /tmp/larcenous/Femtolisp/sumfp.scm
Running...
Running sumfp:1000000:500
Elapsed time: 35.8473968505859375 seconds (35.8470000000000013) for sumfp:1000000:500
+!CSVLINE!+femtolisp-unknown,sumfp:1000000:500,35.8473968505859375

real	0m35.864s
user	0m35.800s
sys	0m0.045s

Testing fft under Femtolisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/Femtolisp-prelude.scm
Compiling...
femtolisp_comp /tmp/larcenous/Femtolisp/fft.scm /tmp/larcenous/Femtolisp/fft.scm
Running...
Running fft:65536:100
Elapsed time: 38.7084901332855225 seconds (38.7079999999999984) for fft:65536:100
+!CSVLINE!+femtolisp-unknown,fft:65536:100,38.7084901332855225

real	0m38.728s
user	0m38.584s
sys	0m0.095s

Testing mbrot under Femtolisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/Femtolisp-prelude.scm
Compiling...
femtolisp_comp /tmp/larcenous/Femtolisp/mbrot.scm /tmp/larcenous/Femtolisp/mbrot.scm
Running...
arg-error: apply: too few arguments
in file /tmp/larcenous/Femtolisp/mbrot.scm
#0 (count #fn("6000r1|A@;" []) ((loop2) (y) (loop1)
				     (matrix r i step n) ()))
#1 (compile-sym/lambda (3 . 0))
#2 (for-each/lambda #0=#fn(":000r2}MF6I0|c0c1}32Q22~|c0c2}3242;];" [#fn(map) #.car
								 #.cdr] [#0#
  [#fn(":000r1e0~\x7f^|44;" [compile-in] [[(0 3 loadc 2 loadg 1 loadg #:g118
					    brf 2 call load0 loada0 0 loadg 1
					    argc)
					   #table(vector-set! 1  >= 0  vector-ref 2)
					   3 +inf.0]
					  ((x) (loop2) (y) (loop1)
					       (matrix r i step n) ()) #1=(matrix
  x) ()]) #1# () ()]] for-each-n))
#3 (compile-arglist [(0 3 loadc 2 loadg 1 loadg #:g118 brf 2 call load0 loada0 0
		   loadg 1 argc) #table(vector-set! 1  >= 0  vector-ref 2) 3 +inf.0]
		 ((x) (loop2) (y) (loop1)
		      (matrix r i step n) ())
		 (matrix x))
#4 (compile-app/lambda/lambda/lambda
 #f)
#5 (for-each/lambda #0=#fn(":000r2}MF6I0|c0c1}32Q22~|c0c2}3242;];" [#fn(map) #.car
								 #.cdr] [#0#
  [#fn(":000r1e0~\x7f^|44;" [compile-in] [[(0 3 loadc 2 loadg 1 loadg #:g118
					    brf 2 call load0 loada0 0 loadg 1
					    argc)
					   #table(vector-set! 1  >= 0  vector-ref 2)
					   3 +inf.0]
					  ((x) (loop2) (y) (loop1)
					       (matrix r i step n) ())
					  #1=((vector-ref matrix x)
					      y (count r i step x y)) ()])
   #1# () ()]] for-each-n))
#6 (compile-arglist [(0 3 loadc 2 loadg 1 loadg #:g118 brf 2 call load0 loada0 0
		   loadg 1 argc) #table(vector-set! 1  >= 0  vector-ref 2) 3 +inf.0]
		 ((x) (loop2) (y) (loop1)
		      (matrix r i step n) ())
		 ((vector-ref matrix x)
		  y (count r i step x y)))
#7 (compile-app/lambda/lambda/lambda
 #f)
#8 (compile-begin [(0 3 loadc 2 loadg 1 loadg #:g118 brf 2 call load0 loada0 0
		 loadg 1 argc) #table(vector-set! 1  >= 0  vector-ref 2) 3 +inf.0]
	       ((x) (loop2) (y) (loop1)
		    (matrix r i step n) ())
	       #t ((vector-set! (vector-ref matrix x) y
				(count r i step x y))
		   (loop2 (- x 1))))
#9 (compile-if/lambda #:g118 #:g119
		   (>= x 0) (begin (vector-set! (vector-ref matrix x) y
						(count r i step x y))
				   (loop2 (- x 1)))
		   (loop1 (- y 1)))
#10 (lambda/lambda/lambda/lambda/lambda/lambda
 ())
#11 (lambda #fn("8000r0e0i11i1342;" [compile-f-] #0=[lambda [[(1 argc)
							  #table() 0 +inf.0]
							 ((loop2) (y) (loop1)
								  (matrix r i
  step n)
								  ()) #f (lambda (x)
  (if (>= x 0) (begin (vector-set! (vector-ref matrix x) y
				   (count r i step x y))
		      (loop2 (- x 1)))
      (loop1 (- y 1)))) ()]])
  #fn("9000r2e0i10c1|332e2i10}322}e3i1131X6<0e0i10c442;];" [emit loadv
							    bcode:cdepth nnn
							    closure] #0#))
#12 (compile-in/lambda set!)
#13 (compile-begin [(1 argc) #table() 0 +inf.0]
	       ((loop2) (y) (loop1)
			(matrix r i step n) ())
	       #t ((set! loop2 (lambda (x)
				 (if (>= x 0)
				     (begin (vector-set! (vector-ref matrix x)
							 y (count r i step x y))
					    (loop2 (- x 1)))
				     (loop1 (- y 1)))))
		   loop2))
#14 (lambda/lambda/lambda/lambda/lambda/lambda
 ())
#15 (lambda #fn("8000r0e0i11i1342;" [compile-f-] #0=[lambda [[(#:g116 brf 2 call
							   load0 loada0 0 loadg
							   1 argc)
							  #table(>= 0) 1 +inf.0]
							 ((y) (loop1)
							      (matrix r i step
  n)
							      ()) #f (lambda (loop2)
  (set! loop2 (lambda (x)
		(if (>= x 0) (begin (vector-set! (vector-ref matrix x) y
						 (count r i step x y))
				    (loop2 (- x 1)))
		    (loop1 (- y 1)))))
  loop2) ()]])
  #fn("9000r2e0i10c1|332e2i10}322}e3i1131X6<0e0i10c442;];" [emit loadv
							    bcode:cdepth nnn
							    closure] #0#))
#16 (compile-app/lambda/lambda/lambda
 #f)
#17 (compile-app/lambda/lambda/lambda
 #f)
#18 (compile-if/lambda #:g116 #:g117
		   (>= y 0) (begin (((lambda (loop2)
				       (set! loop2 (lambda (x)
						     (if (>= x 0)
							 (begin (vector-set! (vector-ref
  matrix x)
  y (count r i step x y))
								(loop2 (- x 1)))
							 (loop1 (- y 1)))))
				       loop2)
				     #t)
				    (- n 1)))
		   #f)
#19 (lambda/lambda/lambda/lambda/lambda/lambda
 ())
#20 (lambda #fn("8000r0e0i11i1342;" [compile-f-] #0=[lambda [[(1 argc)
							  #table() 0 +inf.0]
							 ((loop1) (matrix r i
  step n)
								  ()) #f (lambda (y)
  (if (>= y 0) (begin (((lambda (loop2)
			  (set! loop2 (lambda (x)
					(if (>= x 0)
					    (begin (vector-set! (vector-ref
								 matrix x)
								y (count r i
  step x y))
						   (loop2 (- x 1)))
					    (loop1 (- y 1)))))
			  loop2)
			#t)
		       (- n 1)))
      #f)) ()]])
  #fn("9000r2e0i10c1|332e2i10}322}e3i1131X6<0e0i10c442;];" [emit loadv
							    bcode:cdepth nnn
							    closure] #0#))
#21 (compile-in/lambda set!)
#22 (compile-begin [(1 argc) #table() 0 +inf.0]
	       ((loop1) (matrix r i step n) ()) #t ((set! loop1 (lambda (y)
								  (if (>= y 0)
  (begin (((lambda (loop2)
	     (set! loop2 (lambda (x)
			   (if (>= x 0) (begin (vector-set! (vector-ref matrix
  x)
							    y (count r i step
  x y))
					       (loop2 (- x 1)))
			       (loop1 (- y 1)))))
	     loop2)
	   #t)
	  (- n 1)))
  #f)))
						    loop1))
#23 (lambda/lambda/lambda/lambda/lambda/lambda
 ())
#24 (lambda #fn("8000r0e0i11i1342;" [compile-f-] #0=[lambda [[(5 argc)
							  #table() 0 +inf.0]
							 ((matrix r i step n)
							  ()) #f (lambda (loop1)
								   (set! loop1
  (lambda (y)
    (if (>= y 0) (begin (((lambda (loop2)
			    (set! loop2 (lambda (x)
					  (if (>= x 0)
					      (begin (vector-set! (vector-ref
								   matrix x)
								  y (count r i
  step x y))
						     (loop2 (- x 1)))
					      (loop1 (- y 1)))))
			    loop2)
			  #t)
			 (- n 1)))
	#f)))
								   loop1) ()]])
  #fn("9000r2e0i10c1|332e2i10}322}e3i1131X6<0e0i10c442;];" [emit loadv
							    bcode:cdepth nnn
							    closure] #0#))
#25 (compile-app/lambda/lambda/lambda
 #f)
#26 (compile-app/lambda/lambda/lambda
 #f)
#27 (lambda/lambda/lambda/lambda/lambda/lambda
 ())
#28 (lambda #fn("8000r0e0i11i1342;" [compile-f-] #0=[lambda [[(0 argc)
							  #table() 0 +inf.0] (())
							 #f (lambda (matrix r
  i step n)
							      (((lambda (loop1)
								  (set! loop1
  (lambda (y)
    (if (>= y 0) (begin (((lambda (loop2)
			    (set! loop2 (lambda (x)
					  (if (>= x 0)
					      (begin (vector-set! (vector-ref
								   matrix x)
								  y (count r i
  step x y))
						     (loop2 (- x 1)))
					      (loop1 (- y 1)))))
			    loop2)
			  #t)
			 (- n 1)))
	#f)))
								  loop1)
								#t)
							       (- n 1)) . mbrot)
							 ()]])
  #fn("9000r2e0i10c1|332e2i10}322}e3i1131X6<0e0i10c442;];" [emit loadv
							    bcode:cdepth nnn
							    closure] #0#))
#29 (compile-in/lambda set!)
#30 (lambda/lambda/lambda/lambda/lambda/lambda
 ())
#31 (lambda #fn("8000r0e0~\x7f42;" [compile-f-] [() (lambda ()
						  (define (mbrot matrix r i
								 step n)
						    (((lambda (loop1)
							(set! loop1 (lambda (y)
  (if (>= y 0) (begin (((lambda (loop2)
			  (set! loop2 (lambda (x)
					(if (>= x 0)
					    (begin (vector-set! (vector-ref
								 matrix x)
								y (count r i
  step x y))
						   (loop2 (- x 1)))
					    (loop1 (- y 1)))))
			  loop2)
			#t)
		       (- n 1)))
      #f)))
							loop1)
						      #t)
						     (- n 1))) . #:g0) ()])
  #fn("6000r2|;" []))
#32 (eval (define (mbrot matrix r i step n)
	(let loop1 ((y (- n 1)))
	     (when (>= y 0) (let loop2 ((x (- n 1)))
				 (if (>= x 0)
				     (begin (vector-set! (vector-ref matrix x)
							 y (count r i step x y))
					    (loop2 (- x 1)))
				     (loop1 (- y 1))))))))

real	0m0.025s
user	0m0.019s
sys	0m0.004s
+!CSVLINE!+femtolisp,mbrot,CRASHED

Testing mbrotZ under Femtolisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/Femtolisp-prelude.scm
Compiling...
femtolisp_comp /tmp/larcenous/Femtolisp/mbrotZ.scm /tmp/larcenous/Femtolisp/mbrotZ.scm
Running...
arg-error: apply: too few arguments
in file /tmp/larcenous/Femtolisp/mbrotZ.scm
#0 (count #fn("6000r1|A@;" []) ((loop2) (y) (loop1)
				     (matrix z0 step n) ()))
#1 (compile-sym/lambda (3 . 0))
#2 (for-each/lambda #0=#fn(":000r2}MF6I0|c0c1}32Q22~|c0c2}3242;];" [#fn(map) #.car
								 #.cdr] [#0#
  [#fn(":000r1e0~\x7f^|44;" [compile-in] [[(0 3 loadc 2 loadg 1 loadg #:g118
					    brf 2 call load0 loada0 0 loadg 1
					    argc)
					   #table(vector-set! 1  >= 0  vector-ref 2)
					   3 +inf.0]
					  ((x) (loop2) (y) (loop1)
					       (matrix z0 step n) ()) #1=(matrix
  x) ()]) #1# () ()]] for-each-n))
#3 (compile-arglist [(0 3 loadc 2 loadg 1 loadg #:g118 brf 2 call load0 loada0 0
		   loadg 1 argc) #table(vector-set! 1  >= 0  vector-ref 2) 3 +inf.0]
		 ((x) (loop2) (y) (loop1)
		      (matrix z0 step n) ())
		 (matrix x))
#4 (compile-app/lambda/lambda/lambda
 #f)
#5 (for-each/lambda #0=#fn(":000r2}MF6I0|c0c1}32Q22~|c0c2}3242;];" [#fn(map) #.car
								 #.cdr] [#0#
  [#fn(":000r1e0~\x7f^|44;" [compile-in] [[(0 3 loadc 2 loadg 1 loadg #:g118
					    brf 2 call load0 loada0 0 loadg 1
					    argc)
					   #table(vector-set! 1  >= 0  vector-ref 2)
					   3 +inf.0]
					  ((x) (loop2) (y) (loop1)
					       (matrix z0 step n) ())
					  #1=((vector-ref matrix x)
					      y (count z0 step
						       (make-rectangular (inexact
  x)
  (inexact y)))) ()]) #1# () ()]] for-each-n))
#6 (compile-arglist [(0 3 loadc 2 loadg 1 loadg #:g118 brf 2 call load0 loada0 0
		   loadg 1 argc) #table(vector-set! 1  >= 0  vector-ref 2) 3 +inf.0]
		 ((x) (loop2) (y) (loop1)
		      (matrix z0 step n) ())
		 ((vector-ref matrix x)
		  y (count z0 step
			   (make-rectangular (inexact x) (inexact y)))))
#7 (compile-app/lambda/lambda/lambda
 #f)
#8 (compile-begin [(0 3 loadc 2 loadg 1 loadg #:g118 brf 2 call load0 loada0 0
		 loadg 1 argc) #table(vector-set! 1  >= 0  vector-ref 2) 3 +inf.0]
	       ((x) (loop2) (y) (loop1)
		    (matrix z0 step n) ())
	       #t ((vector-set! (vector-ref matrix x) y
				(count z0 step
				       (make-rectangular (inexact x) (inexact
  y))))
		   (loop2 (- x 1))))
#9 (compile-if/lambda #:g118 #:g119
		   (>= x 0) (begin (vector-set! (vector-ref matrix x) y
						(count z0 step
						       (make-rectangular (inexact
  x)
  (inexact y))))
				   (loop2 (- x 1)))
		   (loop1 (- y 1)))
#10 (lambda/lambda/lambda/lambda/lambda/lambda
 ())
#11 (lambda #fn("8000r0e0i11i1342;" [compile-f-] #0=[lambda [[(1 argc)
							  #table() 0 +inf.0]
							 ((loop2) (y) (loop1)
								  (matrix z0
  step n)
								  ()) #f (lambda (x)
  (if (>= x 0) (begin (vector-set! (vector-ref matrix x) y
				   (count z0 step
					  (make-rectangular (inexact x) (inexact
  y))))
		      (loop2 (- x 1)))
      (loop1 (- y 1)))) ()]])
  #fn("9000r2e0i10c1|332e2i10}322}e3i1131X6<0e0i10c442;];" [emit loadv
							    bcode:cdepth nnn
							    closure] #0#))
#12 (compile-in/lambda set!)
#13 (compile-begin [(1 argc) #table() 0 +inf.0]
	       ((loop2) (y) (loop1)
			(matrix z0 step n) ())
	       #t ((set! loop2 (lambda (x)
				 (if (>= x 0)
				     (begin (vector-set! (vector-ref matrix x)
							 y (count z0 step
								  (make-rectangular
								   (inexact x)
								   (inexact y))))
					    (loop2 (- x 1)))
				     (loop1 (- y 1)))))
		   loop2))
#14 (lambda/lambda/lambda/lambda/lambda/lambda
 ())
#15 (lambda #fn("8000r0e0i11i1342;" [compile-f-] #0=[lambda [[(#:g116 brf 2 call
							   load0 loada0 0 loadg
							   1 argc)
							  #table(>= 0) 1 +inf.0]
							 ((y) (loop1)
							      (matrix z0 step
  n)
							      ()) #f (lambda (loop2)
  (set! loop2 (lambda (x)
		(if (>= x 0) (begin (vector-set! (vector-ref matrix x) y
						 (count z0 step
							(make-rectangular (inexact
  x)
  (inexact y))))
				    (loop2 (- x 1)))
		    (loop1 (- y 1)))))
  loop2) ()]])
  #fn("9000r2e0i10c1|332e2i10}322}e3i1131X6<0e0i10c442;];" [emit loadv
							    bcode:cdepth nnn
							    closure] #0#))
#16 (compile-app/lambda/lambda/lambda
 #f)
#17 (compile-app/lambda/lambda/lambda
 #f)
#18 (compile-if/lambda #:g116 #:g117
		   (>= y 0) (begin (((lambda (loop2)
				       (set! loop2 (lambda (x)
						     (if (>= x 0)
							 (begin (vector-set! (vector-ref
  matrix x)
  y (count z0 step
	   (make-rectangular (inexact x) (inexact y))))
								(loop2 (- x 1)))
							 (loop1 (- y 1)))))
				       loop2)
				     #t)
				    (- n 1)))
		   #f)
#19 (lambda/lambda/lambda/lambda/lambda/lambda
 ())
#20 (lambda #fn("8000r0e0i11i1342;" [compile-f-] #0=[lambda [[(1 argc)
							  #table() 0 +inf.0]
							 ((loop1) (matrix z0
  step n)
								  ()) #f (lambda (y)
  (if (>= y 0) (begin (((lambda (loop2)
			  (set! loop2 (lambda (x)
					(if (>= x 0)
					    (begin (vector-set! (vector-ref
								 matrix x)
								y (count z0
  step (make-rectangular (inexact x) (inexact y))))
						   (loop2 (- x 1)))
					    (loop1 (- y 1)))))
			  loop2)
			#t)
		       (- n 1)))
      #f)) ()]])
  #fn("9000r2e0i10c1|332e2i10}322}e3i1131X6<0e0i10c442;];" [emit loadv
							    bcode:cdepth nnn
							    closure] #0#))
#21 (compile-in/lambda set!)
#22 (compile-begin [(1 argc) #table() 0 +inf.0]
	       ((loop1) (matrix z0 step n) ()) #t ((set! loop1 (lambda (y)
								 (if (>= y 0)
  (begin (((lambda (loop2)
	     (set! loop2 (lambda (x)
			   (if (>= x 0) (begin (vector-set! (vector-ref matrix
  x)
							    y (count z0 step
  (make-rectangular (inexact x) (inexact y))))
					       (loop2 (- x 1)))
			       (loop1 (- y 1)))))
	     loop2)
	   #t)
	  (- n 1)))
  #f)))
						   loop1))
#23 (lambda/lambda/lambda/lambda/lambda/lambda
 ())
#24 (lambda #fn("8000r0e0i11i1342;" [compile-f-] #0=[lambda [[(4 argc)
							  #table() 0 +inf.0]
							 ((matrix z0 step n)
							  ()) #f (lambda (loop1)
								   (set! loop1
  (lambda (y)
    (if (>= y 0) (begin (((lambda (loop2)
			    (set! loop2 (lambda (x)
					  (if (>= x 0)
					      (begin (vector-set! (vector-ref
								   matrix x)
								  y (count z0
  step (make-rectangular (inexact x) (inexact y))))
						     (loop2 (- x 1)))
					      (loop1 (- y 1)))))
			    loop2)
			  #t)
			 (- n 1)))
	#f)))
								   loop1) ()]])
  #fn("9000r2e0i10c1|332e2i10}322}e3i1131X6<0e0i10c442;];" [emit loadv
							    bcode:cdepth nnn
							    closure] #0#))
#25 (compile-app/lambda/lambda/lambda
 #f)
#26 (compile-app/lambda/lambda/lambda
 #f)
#27 (lambda/lambda/lambda/lambda/lambda/lambda
 ())
#28 (lambda #fn("8000r0e0i11i1342;" [compile-f-] #0=[lambda [[(0 argc)
							  #table() 0 +inf.0] (())
							 #f (lambda (matrix z0
  step n)
							      (((lambda (loop1)
								  (set! loop1
  (lambda (y)
    (if (>= y 0) (begin (((lambda (loop2)
			    (set! loop2 (lambda (x)
					  (if (>= x 0)
					      (begin (vector-set! (vector-ref
								   matrix x)
								  y (count z0
  step (make-rectangular (inexact x) (inexact y))))
						     (loop2 (- x 1)))
					      (loop1 (- y 1)))))
			    loop2)
			  #t)
			 (- n 1)))
	#f)))
								  loop1)
								#t)
							       (- n 1)) . mbrot)
							 ()]])
  #fn("9000r2e0i10c1|332e2i10}322}e3i1131X6<0e0i10c442;];" [emit loadv
							    bcode:cdepth nnn
							    closure] #0#))
#29 (compile-in/lambda set!)
#30 (lambda/lambda/lambda/lambda/lambda/lambda
 ())
#31 (lambda #fn("8000r0e0~\x7f42;" [compile-f-] [() (lambda ()
						  (define (mbrot matrix z0 step
								 n)
						    (((lambda (loop1)
							(set! loop1 (lambda (y)
  (if (>= y 0) (begin (((lambda (loop2)
			  (set! loop2 (lambda (x)
					(if (>= x 0)
					    (begin (vector-set! (vector-ref
								 matrix x)
								y (count z0
  step (make-rectangular (inexact x) (inexact y))))
						   (loop2 (- x 1)))
					    (loop1 (- y 1)))))
			  loop2)
			#t)
		       (- n 1)))
      #f)))
							loop1)
						      #t)
						     (- n 1))) . #:g0) ()])
  #fn("6000r2|;" []))
#32 (eval (define (mbrot matrix z0 step n)
	(let loop1 ((y (- n 1)))
	     (when (>= y 0) (let loop2 ((x (- n 1)))
				 (if (>= x 0)
				     (begin (vector-set! (vector-ref matrix x)
							 y (count z0 step
								  (make-rectangular
								   (inexact x)
								   (inexact y))))
					    (loop2 (- x 1)))
				     (loop1 (- y 1))))))))

real	0m0.025s
user	0m0.019s
sys	0m0.004s
+!CSVLINE!+femtolisp,mbrotZ,CRASHED

Testing nucleic under Femtolisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/Femtolisp-prelude.scm
Compiling...
femtolisp_comp /tmp/larcenous/Femtolisp/nucleic.scm /tmp/larcenous/Femtolisp/nucleic.scm
Running...
Running nucleic:50
eval: variable atan has no value
in file /tmp/larcenous/Femtolisp/nucleic.scm
#0 (math-atan2 -1.2229999999999999 0.226)
#1 (pt-phi/lambda/lambda/lambda
 0.226)
#2 (tfo-align/lambda/lambda/lambda/lambda/lambda/lambda/lambda/lambda/lambda/lambda
 [-1.2229999999999999 -0.8209999999999997 0.226])
#3 (dgf-base/lambda [[-0.0018 -0.8207 0.5714 0.2679 -0.5508999999999999 -0.7904 0.9634
		   0.1517 0.2209 0.0073 8.4030000000000005 0.6232]
		  [-0.8143 -0.5091 -0.2788 -0.0433 -0.4257 0.9038 -0.5788 0.748
		   0.3246 1.5226999999999999 6.9114000000000004 -7.0765000000000002]
		  [0.3822 -0.7477 0.543 0.4552 0.6637 0.5935 -0.8042 0.0203 0.5941
		   -6.9471999999999996 -4.1185999999999998 -5.9108000000000001]
		  [0.5639999999999999 0.8007 -0.2022 -0.8247 0.5587 -0.0878 0.0426
		   0.2162 0.9754 6.2694000000000001 -7.0540000000000003 3.3315999999999999]
		  [2.8929999999999998 8.5380000000000003 -3.3279999999999998]
		  [1.698 7.6959999999999997 -3.5569999999999999]
		  [3.226 9.5009999999999994 -4.4020000000000001]
		  [4.1589999999999998 7.6040000000000001 -3.0339999999999998]
		  [5.4550000000000001 8.2119999999999997 -2.8809999999999998]
		  [5.4546000000000001 8.8507999999999996 -1.9978]
		  [5.7587999999999999 8.6624999999999996 -3.8258999999999999]
		  [6.4969999999999999 7.1479999999999997 -2.5979999999999999]
		  [7.4896000000000003 7.5918999999999999 -2.5213999999999999]
		  [6.1630000000000003 6.4859999999999998 -1.3440000000000001]
		  [6.54 5.1200000000000001 -1.419]
		  [7.2763 4.9680999999999997 -0.6297]
		  [7.194 4.883 -2.7770000000000001]
		  [6.8666999999999998 3.9182999999999999 -3.1646999999999998]
		  [8.5860000000000003 5.0910000000000002 -2.6139999999999999]
		  [8.9510000000000005 4.7625999999999999 -1.7889999999999999]
		  [6.5720000000000001 6.0039999999999996 -3.609]
		  [5.5636000000000001 5.7065999999999999 -3.8965999999999998]
		  [7.3800999999999997 6.3562000000000003 -4.7350000000000003]
		  [4.7149999999999999 0.491 -0.136]
		  [6.3490000000000002 2.173 -0.602]
		  [5.9530000000000003 0.965 -0.267]
		  [5.29 2.9790000000000001 -0.826]
		  [3.972 2.6389999999999998 -0.733]
		  [3.677 1.3160000000000001 -0.366] rA [2.4279999999999999 0.845
							-0.236]
		  [3.1659999999999999 3.7290000000000001 -1.036]
		  [5.3170000000000002 4.2990000000000004 -1.1930000000000001]
		  [4.0099999999999998 4.6779999999999999 -1.2989999999999999]
		  [6.6890000000000001 0.1903 -0.0518]
		  [1.647 1.446 -0.404] [2.278 -0.108 -0.028]
		  [3.4420999999999999 5.5743999999999998 -1.5482]])
#4 (wc-Dumas/lambda/lambda
 [23 [#1=1.0 #0=0.0 #0# #0# #1# #0# #0# #0# #1# #0# #0# #0#]
  [[-0.0018 -0.8207 0.5714 0.2679 -0.5508999999999999 -0.7904 0.9634 0.1517 0.2209
    0.0073 8.4030000000000005 0.6232] [-0.8143 -0.5091 -0.2788 -0.0433 -0.4257
				       0.9038 -0.5788 0.748 0.3246 1.5226999999999999
				       6.9114000000000004 -7.0765000000000002]
   [0.3822 -0.7477 0.543 0.4552 0.6637 0.5935 -0.8042 0.0203 0.5941 -6.9471999999999996
    -4.1185999999999998 -5.9108000000000001]
   [0.5639999999999999 0.8007 -0.2022 -0.8247 0.5587 -0.0878 0.0426 0.2162 0.9754
    6.2694000000000001 -7.0540000000000003 3.3315999999999999]
   [2.8929999999999998 8.5380000000000003 -3.3279999999999998]
   [1.698 7.6959999999999997 -3.5569999999999999]
   [3.226 9.5009999999999994 -4.4020000000000001]
   [4.1589999999999998 7.6040000000000001 -3.0339999999999998]
   [5.4550000000000001 8.2119999999999997 -2.8809999999999998]
   [5.4546000000000001 8.8507999999999996 -1.9978]
   [5.7587999999999999 8.6624999999999996 -3.8258999999999999]
   [6.4969999999999999 7.1479999999999997 -2.5979999999999999]
   [7.4896000000000003 7.5918999999999999 -2.5213999999999999]
   [6.1630000000000003 6.4859999999999998 -1.3440000000000001]
   [6.54 5.1200000000000001 -1.419] [7.2763 4.9680999999999997 -0.6297]
   [7.194 4.883 -2.7770000000000001] [6.8666999999999998 3.9182999999999999 -3.1646999999999998]
   [8.5860000000000003 5.0910000000000002 -2.6139999999999999]
   [8.9510000000000005 4.7625999999999999 -1.7889999999999999]
   [6.5720000000000001 6.0039999999999996 -3.609]
   [5.5636000000000001 5.7065999999999999 -3.8965999999999998]
   [7.3800999999999997 6.3562000000000003 -4.7350000000000003]
   [4.7149999999999999 0.491 -0.136] [6.3490000000000002 2.173 -0.602]
   [5.9530000000000003 0.965 -0.267] [5.29 2.9790000000000001 -0.826]
   [3.972 2.6389999999999998 -0.733] [3.677 1.3160000000000001 -0.366] rA [2.4279999999999999
  0.845 -0.236] [3.1659999999999999 3.7290000000000001 -1.036]
   [5.3170000000000002 4.2990000000000004 -1.1930000000000001]
   [4.0099999999999998 4.6779999999999999 -1.2989999999999999]
   [6.6890000000000001 0.1903 -0.0518] [1.647 1.446 -0.404]
   [2.278 -0.108 -0.028] [3.4420999999999999 5.5743999999999998 -1.5482]]])
#5 (search/lambda/lambda
 #0=#fn("7000r1|\x8540_;c0q|M41;" [#fn(":000r1i32|i30326G0c0qe1|i30Ki20i323341;i10~N41;" [#fn("8000r1c0qi20i10N3141;" [#fn("8000r1c0~|42;" [#fn(append)])])
  search])] [#0# [#16=(#fn(#1="9000r1c0qe1i02|3241;" #2=[#fn(":000r1c0qe1e2|i103341;" [#fn("9000r1e0i21|i2033L1;" [make-var])
  dgf-base helix3*-tfo]) get-var] [#3=[[-0.0018 -0.8207 0.5714 0.2679 -0.5508999999999999
					-0.7904 0.9634 0.1517 0.2209 0.0073 8.4030000000000005
					0.6232]
				       [-0.8143 -0.5091 -0.2788 -0.0433 -0.4257
					0.9038 -0.5788 0.748 0.3246 1.5226999999999999
					6.9114000000000004 -7.0765000000000002]
				       [0.3822 -0.7477 0.543 0.4552 0.6637 0.5935
					-0.8042 0.0203 0.5941 -6.9471999999999996
					-4.1185999999999998 -5.9108000000000001]
				       [0.5639999999999999 0.8007 -0.2022 -0.8247
					0.5587 -0.0878 0.0426 0.2162 0.9754 6.2694000000000001
					-7.0540000000000003 3.3315999999999999]
				       [2.8929999999999998 8.5380000000000003
					-3.3279999999999998]
				       [1.698 7.6959999999999997 -3.5569999999999999]
				       [3.226 9.5009999999999994 -4.4020000000000001]
				       [4.1589999999999998 7.6040000000000001
					-3.0339999999999998]
				       [5.4550000000000001 8.2119999999999997
					-2.8809999999999998]
				       [5.4546000000000001 8.8507999999999996
					-1.9978]
				       [5.7587999999999999 8.6624999999999996
					-3.8258999999999999]
				       [6.4969999999999999 7.1479999999999997
					-2.5979999999999999]
				       [7.4896000000000003 7.5918999999999999
					-2.5213999999999999]
				       [6.1630000000000003 6.4859999999999998
					-1.3440000000000001]
				       [6.54 5.1200000000000001 -1.419]
				       [7.2763 4.9680999999999997 -0.6297]
				       [7.194 4.883 -2.7770000000000001]
				       [6.8666999999999998 3.9182999999999999
					-3.1646999999999998]
				       [8.5860000000000003 5.0910000000000002
					-2.6139999999999999]
				       [8.9510000000000005 4.7625999999999999
					-1.7889999999999999]
				       [6.5720000000000001 6.0039999999999996
					-3.609]
				       [5.5636000000000001 5.7065999999999999
					-3.8965999999999998]
				       [7.3800999999999997 6.3562000000000003
					-4.7350000000000003]
				       [4.7149999999999999 0.491 -0.136]
				       [6.3490000000000002 2.173 -0.602]
				       [5.9530000000000003 0.965 -0.267]
				       [5.29 2.9790000000000001 -0.826]
				       [3.972 2.6389999999999998 -0.733]
				       [3.677 1.3160000000000001 -0.366] rG [6.8426
  0.0056 -0.0019] [3.1659999999999999 3.7290000000000001 -1.036]
				       [5.3170000000000002 4.2990000000000004
					-1.1930000000000001]
				       [4.0099999999999998 4.6779999999999999
					-1.2989999999999999]
				       [2.4279999999999999 0.845 -0.236]
				       [4.6151 -0.4677 0.1305]
				       [6.6463000000000001 -0.9463 0.2729]
				       [7.8170000000000002 0.2642 -0.064]
				       [3.4420999999999999 5.5743999999999998
					-1.5482]] 22 23 ()])
		       #fn(#4="9000r1c0qe1i02|3241;" #5=[#fn(":000r1c0qe1e2|i103341;" [#fn("9000r1e0i21|i2033L1;" [make-var])
  dgf-base wc-Dumas-tfo]) get-var] [#6=[[-0.0359 -0.8071 0.5894 -0.2669 0.5760999999999999
					 0.7726 -0.9631 -0.1296 -0.2361 0.1584
					 8.3434000000000008 0.5434]
					[-0.8313 -0.4738 -0.2906 0.0649 0.4366
					 -0.8973 0.5521 -0.7648 -0.3322 1.6833
					 6.806 -7.0011000000000001]
					[0.3445 -0.763 0.547 -0.4628 -0.645 -0.6082
					 0.8168 -0.0436 -0.5753 -6.8178999999999998
					 -3.9777999999999998 -5.9886999999999997]
					[0.5855 0.7931 -0.1682 0.8103 -0.579 0.0906
					 -0.0255 -0.1894 -0.9816 6.1203000000000003
					 -7.1051000000000002 3.1983999999999999]
					[2.6760000000000002 -8.4960000000000004
					 3.2879999999999998]
					[1.4950000000000001 -7.6230000000000002
					 3.4769999999999999]
					[2.9489999999999998 -9.4640000000000004
					 4.3739999999999997]
					[3.9729999999999999 -7.5949999999999998
					 3.0339999999999998]
					[5.2430000000000003 -8.2420000000000009
					 2.8260000000000001]
					[5.1974 -8.8497000000000003 1.9222999999999999]
					[5.5548000000000002 -8.7347999999999999
					 3.7469000000000001]
					[6.3140000000000001 -7.2060000000000004
					 2.5510000000000002]
					[7.2953999999999999 -7.6761999999999997
					 2.4897999999999998]
					[6.0140000000000002 -6.5419999999999998
					 1.2889999999999999]
					[6.4189999999999996 -5.1840000000000002
					 1.3620000000000001]
					[7.1608000000000001 -5.0495000000000001
					 0.5747]
					[7.0759999999999996 -4.9560000000000004
					 2.7269999999999999]
					[6.7770000000000001 -3.9803000000000002
					 3.1099000000000001]
					[8.4499999999999993 -5.1929999999999996
					 2.581]
					[8.8308999999999997 -4.8754999999999997
					 1.7589999999999999]
					[6.4059999999999997 -6.0590000000000002
					 3.5579999999999998]
					[5.4020999999999999 -5.7313000000000001
					 3.8281000000000001]
					[7.157 -6.4240000000000004 4.7069999999999999]
					[5.2169999999999996 -4.3259999999999996
					 1.169]
					[4.2960000000000003 -2.2559999999999998
					 0.629]
					[5.4329999999999998 -3.02 0.799]
					[2.9929999999999999 -2.6779999999999999
					 0.794]
					[2.867 -4.0629999999999997 1.1830000000000001]
					[3.9569999999999999 -4.8300000000000001
					 1.355] rC [2.0186999999999999 -1.8047
						    0.5874]
					[6.5469999999999997 -2.556 0.629]
					[1.0684 -2.1236000000000002 0.7109]
					[2.2343999999999999 -0.856 0.3162]
					[1.8796999999999999 -4.4972000000000003
					 1.3404]
					[3.8479000000000001 -5.8742000000000001
					 1.6479999999999999]] 9 22 ()])
		       #fn(#1# #2# [#3# 21 22 ()])
		       #fn(#4# #5# [#6# 10 21 ()])
		       #fn(#1# #2# [#6# 20 21 ()])
		       #fn(#4# #5# [#3# 11 20 ()])
		       #fn(#1# #2# [[[-0.0109 0.5907 0.8068 0.2217 -0.7853 0.578
				      0.9751 0.1852 -0.1224 -1.4225000000000001
				      -11.0955999999999992 -2.5217000000000001]
				     [-0.8313 -0.4738 -0.2906 0.0649 0.4366 -0.8973
				      0.5521 -0.7648 -0.3322 1.6833 6.806 -7.0011000000000001]
				     [0.3445 -0.763 0.547 -0.4628 -0.645 -0.6082
				      0.8168 -0.0436 -0.5753 -6.8178999999999998
				      -3.9777999999999998 -5.9886999999999997]
				     [0.5855 0.7931 -0.1682 0.8103 -0.579 0.0906
				      -0.0255 -0.1894 -0.9816 6.1203000000000003
				      -7.1051000000000002 3.1983999999999999]
				     [2.6760000000000002 -8.4960000000000004 3.2879999999999998]
				     [1.4950000000000001 -7.6230000000000002 3.4769999999999999]
				     [2.9489999999999998 -9.4640000000000004 4.3739999999999997]
				     [3.9729999999999999 -7.5949999999999998 3.0339999999999998]
				     [5.2430000000000003 -8.2420000000000009 2.8260000000000001]
				     [5.1974 -8.8497000000000003 1.9222999999999999]
				     [5.5548000000000002 -8.7347999999999999 3.7469000000000001]
				     [6.3140000000000001 -7.2060000000000004 2.5510000000000002]
				     [5.8743999999999996 -6.2115999999999998 2.4731000000000001]
				     [7.2797999999999998 -7.226 3.6419999999999999]
				     [8.5732999999999997 -6.9409999999999998 3.1328999999999998]
				     [8.9047000000000001 -6.0373999999999999 3.6446000000000001]
				     [8.4428999999999998 -6.6596000000000002 1.6327]
				     [9.2880000000000003 -7.1071 1.1095999999999999]
				     [8.2501999999999995 -5.2798999999999996 1.4754]
				     [8.7675999999999998 -4.7283999999999997 2.0667]
				     [7.1642000000000001 -7.4416000000000002 1.3021]
				     [7.4124999999999996 -8.5001999999999995 1.226]
				     [6.516 -6.9771999999999998 0.1267]
				     [9.4530999999999992 -8.1106999999999996 3.4087000000000001]
				     [11.5930999999999997 -9.0015000000000001
				      3.6356999999999999]
				     [10.8101000000000003 -7.8949999999999996
				      3.3748]
				     [11.1439000000000004 -10.2744 3.9205999999999999]
				     [9.7056000000000004 -10.4025999999999996
				      3.9331999999999998]
				     [8.9192 -9.3419000000000008 3.6833] rU [11.3012999999999995
  -6.8063000000000002 3.1326000000000001]
				     [11.9430999999999994 -11.1875999999999998
				      4.1375000000000002]
				     [12.5839999999999996 -8.8673000000000002
				      3.6158000000000001]
				     [9.2890999999999995 -11.2897999999999996
				      4.1313000000000004]
				     [7.9263000000000003 -9.4536999999999995 3.6977000000000002]]
				    19 20 ()])
		       #fn(#4# #5# [#15=[[-0.0018 -0.8207 0.5714 0.2679 -0.5508999999999999
					  -0.7904 0.9634 0.1517 0.2209 0.0073
					  8.4030000000000005 0.6232]
					 [-0.8143 -0.5091 -0.2788 -0.0433 -0.4257
					  0.9038 -0.5788 0.748 0.3246 1.5226999999999999
					  6.9114000000000004 -7.0765000000000002]
					 [0.3822 -0.7477 0.543 0.4552 0.6637 0.5935
					  -0.8042 0.0203 0.5941 -6.9471999999999996
					  -4.1185999999999998 -5.9108000000000001]
					 [0.5639999999999999 0.8007 -0.2022 -0.8247
					  0.5587 -0.0878 0.0426 0.2162 0.9754
					  6.2694000000000001 -7.0540000000000003
					  3.3315999999999999]
					 [2.8929999999999998 8.5380000000000003
					  -3.3279999999999998]
					 [1.698 7.6959999999999997 -3.5569999999999999]
					 [3.226 9.5009999999999994 -4.4020000000000001]
					 [4.1589999999999998 7.6040000000000001
					  -3.0339999999999998]
					 [5.4550000000000001 8.2119999999999997
					  -2.8809999999999998]
					 [5.4546000000000001 8.8507999999999996
					  -1.9978]
					 [5.7587999999999999 8.6624999999999996
					  -3.8258999999999999]
					 [6.4969999999999999 7.1479999999999997
					  -2.5979999999999999]
					 [7.4896000000000003 7.5918999999999999
					  -2.5213999999999999]
					 [6.1630000000000003 6.4859999999999998
					  -1.3440000000000001]
					 [6.54 5.1200000000000001 -1.419]
					 [7.2763 4.9680999999999997 -0.6297]
					 [7.194 4.883 -2.7770000000000001]
					 [6.8666999999999998 3.9182999999999999
					  -3.1646999999999998]
					 [8.5860000000000003 5.0910000000000002
					  -2.6139999999999999]
					 [8.9510000000000005 4.7625999999999999
					  -1.7889999999999999]
					 [6.5720000000000001 6.0039999999999996
					  -3.609]
					 [5.5636000000000001 5.7065999999999999
					  -3.8965999999999998]
					 [7.3800999999999997 6.3562000000000003
					  -4.7350000000000003]
					 [4.7149999999999999 0.491 -0.136]
					 [6.3490000000000002 2.173 -0.602]
					 [5.9530000000000003 0.965 -0.267]
					 [5.29 2.9790000000000001 -0.826]
					 [3.972 2.6389999999999998 -0.733]
					 [3.677 1.3160000000000001 -0.366] rA
					 [2.4279999999999999 0.845 -0.236]
					 [3.1659999999999999 3.7290000000000001
					  -1.036]
					 [5.3170000000000002 4.2990000000000004
					  -1.1930000000000001]
					 [4.0099999999999998 4.6779999999999999
					  -1.2989999999999999]
					 [6.6890000000000001 0.1903 -0.0518]
					 [1.647 1.446 -0.404]
					 [2.278 -0.108 -0.028]
					 [3.4420999999999999 5.5743999999999998
					  -1.5482]] 12 19 ()])
		       #fn(#1# #2# [#6# 3 19 ()])
		       #fn(#4# #5# [#3# 13 3 ()])
		       #fn(#1# #2# [#6# 2 3 ()])
		       #fn(#4# #5# [#3# 14 2 ()])
		       #fn(#1# #2# [#6# 1 2 ()])
		       #fn(#4# #5# [[[-0.2067 -0.0264 0.978 0.977 -0.0586 0.2049
				      0.0519 0.9979 0.0379 1.0330999999999999
				      -46.8078000000000003 -36.4742000000000033]
				     [-0.8643999999999999 -0.4956 -0.0851 -0.0427
				      0.2409 -0.9696 0.501 -0.8345 -0.2294 4.0167000000000002
				      54.537700000000001 12.4779]
				     [0.3706 -0.6167 0.6945 -0.2867 -0.7872 -0.546
				      0.8834 0.0032 -0.4686 -52.902000000000001
				      18.6312999999999995 -0.6709000000000001]
				     [0.4155 0.9025 -0.1137 0.904 -0.4236 -0.0582
				      -0.1007 -0.0786 -0.9918 -7.6623999999999999
				      -25.2079999999999984 49.5180999999999969]
				     [31.3810000000000002 0.14 47.5810000000000031]
				     [29.9860000000000007 0.663 47.6289999999999978]
				     [31.7210000000000001 -0.646 48.8089999999999975]
				     [32.4939999999999998 1.254 47.2740000000000009]
				     [32.1610000000000014 2.2370000000000001 46.2560000000000002]
				     [31.2986000000000004 2.819 46.5812000000000026]
				     [32.097999999999999 1.7467999999999999 45.2845000000000013]
				     [33.3475999999999999 3.1959 46.1946999999999974]
				     [33.2668000000000035 3.8957999999999999 45.3629999999999995]
				     [33.3798999999999992 3.9182999999999999 47.421599999999998]
				     [34.6514999999999986 3.7222 48.0397999999999996]
				     [35.2946999999999989 4.5411999999999999 47.7180000000000035]
				     [35.1756000000000029 2.4228000000000001 47.4827000000000012]
				     [34.6777999999999977 1.5936999999999999 47.985599999999998]
				     [36.5630999999999986 2.2671999999999999 47.4797999999999973]
				     [37.0163000000000011 2.6579000000000002 48.2304999999999993]
				     [34.6953000000000031 2.5043000000000002 46.0448000000000022]
				     [34.5444000000000031 1.4917 45.6706000000000003]
				     [35.667900000000003 3.3008999999999999 45.3487000000000009]
				     [37.480400000000003 4.0914000000000001 52.2558999999999969]
				     [36.9669999999999987 4.1311999999999998 49.9281000000000006]
				     [37.8044999999999973 4.2519 50.9549999999999983]
				     [35.7171000000000021 3.8264 50.3222000000000023]
				     [35.2668000000000035 3.6419999999999999 51.6114999999999995]
				     [36.2036999999999978 3.7829000000000002 52.6706000000000003]
				     rG [39.0869 4.5552000000000001 50.7092000000000027]
				     [33.9074999999999989 3.3338000000000001 51.610199999999999]
				     [34.6126000000000005 3.6358000000000001 49.5108000000000033]
				     [33.5805000000000007 3.3441999999999998 50.3425000000000011]
				     [35.9958000000000027 3.6511999999999998 53.872399999999999]
				     [38.2105999999999995 4.2053000000000003 52.9294999999999973]
				     [39.8218000000000032 4.6863000000000001 51.3896000000000015]
				     [39.3419999999999987 4.6856999999999998 49.7406999999999968]
				     [32.5193999999999974 3.1070000000000002 50.2663999999999973]]
				    15 1 ()])
		       #fn(#7="9000r1c0qe1i02|3241;" #8=[#fn("=000r1c0qe1e2e3e4|32e3e5|32e3e6|32333141;" [#fn("8000r1c0q]31i20_42;" [#fn("6000r1c0qm02|;" [#fn("7000r2|\x8540};c0q|M41;" [#fn(";000r1c0qe1e2|31i2032e1e3|31i2032e1e4|31i203243;" [#fn("=000r3i20i10Ne0i61|~33e0i61}~33e0i61g2~33i11KKK42;" [make-var])
  tfo-combine nuc-P-O3*-60-tfo nuc-P-O3*-180-tfo nuc-P-O3*-275-tfo])])])])
  tfo-inv-ortho tfo-align atom-pos nuc-O3* nuc-C3* nuc-C4*]) get-var] [([[-0.0137
  -0.8012 0.5983000000000001 -0.2523 0.5817 0.7733 -0.9675 -0.1404 -0.2101 0.2031
  8.3873999999999995 0.4228] [-0.8313 -0.4738 -0.2906 0.0649 0.4366 -0.8973 0.5521
			      -0.7648 -0.3322 1.6833 6.806 -7.0011000000000001]
  [0.3445 -0.763 0.547 -0.4628 -0.645 -0.6082 0.8168 -0.0436 -0.5753 -6.8178999999999998
   -3.9777999999999998 -5.9886999999999997]
  [0.5855 0.7931 -0.1682 0.8103 -0.579 0.0906 -0.0255 -0.1894 -0.9816 6.1203000000000003
   -7.1051000000000002 3.1983999999999999]
  [2.6760000000000002 -8.4960000000000004 3.2879999999999998]
  [1.4950000000000001 -7.6230000000000002 3.4769999999999999]
  [2.9489999999999998 -9.4640000000000004 4.3739999999999997]
  [3.9729999999999999 -7.5949999999999998 3.0339999999999998]
  [5.2416 -8.2422000000000004 2.8180999999999998]
  [5.2050000000000001 -8.8127999999999993 1.8900999999999999]
  [5.5368000000000004 -8.7737999999999996 3.7227000000000001]
  [6.3231999999999999 -7.2037000000000004 2.6002000000000001]
  [7.3048000000000002 -7.6757 2.5577000000000001]
  [6.0635000000000003 -6.5091999999999999 1.3455999999999999]
  [6.4696999999999996 -5.1547000000000001 1.4629000000000001]
  [7.2354000000000003 -5.0042999999999997 0.7018]
  [7.0856000000000003 -4.9610000000000003 2.8521000000000001]
  [6.7777000000000003 -3.9935 3.2486999999999999]
  [8.4626999999999999 -5.1992000000000003 2.7423000000000002]
  [8.8693000000000008 -4.8638000000000003 1.9399]
  [6.3876999999999997 -6.0808999999999997 3.6362000000000001]
  [5.3769999999999998 -5.7561999999999998 3.8834]
  [7.1024000000000003 -6.4753999999999996 4.7984999999999998]
  [5.2763999999999998 -4.2882999999999996 1.2538]
  [4.3776999999999999 -2.2061999999999999 0.7229]
  [5.5068999999999999 -2.9779 0.9088000000000001]
  [3.0693000000000001 -2.6246 0.85] [2.9279000000000002 -4.0145999999999997 1.2149000000000001]
  [4.0101000000000004 -4.7892000000000001 1.4016999999999999] rU [6.6266999999999996
								  -2.5165999999999999
								  0.7728]
  [2.1383000000000001 -1.8395999999999999 0.6581]
  [4.5223000000000004 -1.2488999999999999 0.4716]
  [2.0150999999999999 -4.4065000000000003 1.329]
  [3.8885999999999998 -5.7485999999999997 1.6535]]
  [[0.5141 0.0246 0.8574000000000001 -0.5547 -0.7529 0.3542 0.6542 -0.6577 -0.3734
    -9.1111000000000004 -3.4598 -3.2938999999999998]
   [-0.8313 -0.4738 -0.2906 0.0649 0.4366 -0.8973 0.5521 -0.7648 -0.3322 1.6833
    6.806 -7.0011000000000001] [0.3445 -0.763 0.547 -0.4628 -0.645 -0.6082 0.8168
				-0.0436 -0.5753 -6.8178999999999998 -3.9777999999999998
				-5.9886999999999997]
   [0.5855 0.7931 -0.1682 0.8103 -0.579 0.0906 -0.0255 -0.1894 -0.9816 6.1203000000000003
    -7.1051000000000002 3.1983999999999999]
   [2.6760000000000002 -8.4960000000000004 3.2879999999999998]
   [1.4950000000000001 -7.6230000000000002 3.4769999999999999]
   [2.9489999999999998 -9.4640000000000004 4.3739999999999997]
   [3.9729999999999999 -7.5949999999999998 3.0339999999999998]
   [4.3825000000000003 -6.6585000000000001 4.0488999999999997]
   [4.6840999999999999 -7.2019000000000002 4.9443000000000001]
   [3.6189 -5.8888999999999996 4.1624999999999996]
   [5.6254999999999997 -5.9175000000000004 3.5998000000000001]
   [5.8731999999999998 -5.1227999999999998 4.3033999999999999]
   [6.7336999999999998 -6.8605 3.5222000000000002]
   [7.5932000000000004 -6.4923000000000002 2.4548000000000001]
   [8.5661000000000005 -6.2983000000000002 2.9064000000000001]
   [7.0526999999999997 -5.2012 1.8322000000000001]
   [7.1627000000000001 -5.2525000000000004 0.749]
   [7.6665999999999999 -4.1249000000000002 2.488]
   [8.5944000000000003 -4.2542999999999997 2.6981000000000002]
   [5.5660999999999996 -5.3029000000000002 2.2008999999999999]
   [5.0841000000000003 -6.0018000000000002 1.5172000000000001]
   [4.9062000000000001 -4.0452000000000004 2.2042000000000002]
   [7.6298000000000004 -7.6135999999999999 1.4752000000000001]
   [8.6944999999999997 -8.7045999999999992 -0.2857]
   [8.6943000000000001 -7.6513999999999998 0.6066]
   [7.7426000000000004 -9.6987000000000005 -0.3801]
   [6.6642000000000001 -9.5741999999999994 0.5722]
   [6.6391 -8.5592000000000006 1.4525999999999999] rU [9.5839999999999996 -6.8186
						       0.6136]
   [7.8505000000000003 -10.5924999999999994 -1.2222999999999999]
   [9.4601000000000006 -8.7514000000000003 -0.9277]
   [5.9280999999999997 -10.2508999999999997 0.5782]
   [5.8830999999999998 -8.4931000000000001 2.1027999999999998]]
  [[-0.4993 0.0476 0.8651 0.8078 -0.3353 0.4847 0.3132 0.9409 0.129 6.2988999999999997
    -5.2302999999999997 -3.8576999999999999]
   [-0.8313 -0.4738 -0.2906 0.0649 0.4366 -0.8973 0.5521 -0.7648 -0.3322 1.6833
    6.806 -7.0011000000000001] [0.3445 -0.763 0.547 -0.4628 -0.645 -0.6082 0.8168
				-0.0436 -0.5753 -6.8178999999999998 -3.9777999999999998
				-5.9886999999999997]
   [0.5855 0.7931 -0.1682 0.8103 -0.579 0.0906 -0.0255 -0.1894 -0.9816 6.1203000000000003
    -7.1051000000000002 3.1983999999999999]
   [2.6760000000000002 -8.4960000000000004 3.2879999999999998]
   [1.4950000000000001 -7.6230000000000002 3.4769999999999999]
   [2.9489999999999998 -9.4640000000000004 4.3739999999999997]
   [3.9729999999999999 -7.5949999999999998 3.0339999999999998]
   [3.9937999999999998 -6.7042000000000002 1.9023000000000001]
   [3.2332000000000001 -5.9343000000000004 2.0318999999999998]
   [3.9666000000000001 -7.2862999999999998 0.9812]
   [5.3098000000000001 -5.9546000000000001 1.8564000000000001]
   [5.3863000000000003 -5.3701999999999996 0.9395]
   [5.3851000000000004 -5.0641999999999996 3.0076000000000001]
   [6.7314999999999996 -4.9724000000000004 3.4462000000000002]
   [7.0033000000000003 -3.9201999999999999 3.3618999999999999]
   [7.5997000000000003 -5.8018000000000001 2.4948000000000001]
   [8.3627000000000002 -6.3254000000000001 3.0707]
   [8.0410000000000004 -4.9500999999999999 1.4723999999999999]
   [8.2781000000000002 -4.0644 1.7569999999999999]
   [6.5701000000000001 -6.8129 1.9714] [6.4185999999999996 -7.5808999999999997
					2.7299000000000002]
   [6.9356999999999998 -7.3841000000000001 0.7235]
   [6.8023999999999996 -5.4718 4.8475000000000001]
   [7.9218000000000002 -5.5700000000000003 6.8876999999999997]
   [7.8907999999999996 -5.0885999999999996 5.5944000000000003]
   [6.9789000000000003 -6.3826999999999998 7.4823000000000004]
   [5.8742000000000001 -6.7319000000000004 6.6201999999999996]
   [5.8182 -6.2769000000000004 5.3570000000000002] rU [8.7746999999999993 -4.3727999999999998
						       5.1567999999999996]
   [7.1154000000000002 -6.7508999999999997 8.6509]
   [8.7055000000000007 -5.3037000000000001 7.4490999999999996]
   [5.1416000000000004 -7.3178000000000001 6.9664999999999999]
   [5.0441000000000003 -6.5309999999999997 4.7784000000000004]]
  [[-0.5669 -0.8012 0.1918 -0.8129 0.5817 0.0273 -0.1334 -0.1404 -0.9811 -0.3279
    8.3873999999999995 0.3355] [-0.8313 -0.4738 -0.2906 0.0649 0.4366 -0.8973
				0.5521 -0.7648 -0.3322 1.6833 6.806 -7.0011000000000001]
   [0.3445 -0.763 0.547 -0.4628 -0.645 -0.6082 0.8168 -0.0436 -0.5753 -6.8178999999999998
    -3.9777999999999998 -5.9886999999999997]
   [0.5855 0.7931 -0.1682 0.8103 -0.579 0.0906 -0.0255 -0.1894 -0.9816 6.1203000000000003
    -7.1051000000000002 3.1983999999999999]
   [2.6760000000000002 -8.4960000000000004 3.2879999999999998]
   [1.4950000000000001 -7.6230000000000002 3.4769999999999999]
   [2.9489999999999998 -9.4640000000000004 4.3739999999999997]
   [3.9729999999999999 -7.5949999999999998 3.0339999999999998]
   [5.2416 -8.2422000000000004 2.8180999999999998]
   [5.2050000000000001 -8.8127999999999993 1.8900999999999999]
   [5.5368000000000004 -8.7737999999999996 3.7227000000000001]
   [6.3231999999999999 -7.2037000000000004 2.6002000000000001]
   [7.3048000000000002 -7.6757 2.5577000000000001]
   [6.0635000000000003 -6.5091999999999999 1.3455999999999999]
   [6.4696999999999996 -5.1547000000000001 1.4629000000000001]
   [7.2354000000000003 -5.0042999999999997 0.7018]
   [7.0856000000000003 -4.9610000000000003 2.8521000000000001]
   [6.7777000000000003 -3.9935 3.2486999999999999]
   [8.4626999999999999 -5.1992000000000003 2.7423000000000002]
   [8.8693000000000008 -4.8638000000000003 1.9399]
   [6.3876999999999997 -6.0808999999999997 3.6362000000000001]
   [5.3769999999999998 -5.7561999999999998 3.8834]
   [7.1024000000000003 -6.4753999999999996 4.7984999999999998]
   [5.2763999999999998 -4.2882999999999996 1.2538]
   [3.8961000000000001 -3.0895999999999999 -0.1893]
   [5.0095000000000001 -3.8906999999999998 -0.0346]
   [3.048 -2.6631999999999998 0.8116] [3.4093 -3.1309999999999998 2.1292]
   [4.4878 -3.9123999999999999 2.3088000000000002] rU [5.7004999999999999 -4.2164000000000001
						       -0.9842]
   [2.0800000000000001 -1.9458 0.5503] [3.6833999999999998 -2.7881999999999998
					-1.119]
   [2.8508 -2.8721000000000001 2.9171999999999998]
   [4.7187999999999999 -4.2247000000000003 3.2294999999999998]]
  [[-0.6298 0.0246 0.7763 -0.5226 -0.7529 -0.4001 0.5746 -0.6577 0.487 -0.0208
    -3.4598 -9.6882000000000001] [-0.8313 -0.4738 -0.2906 0.0649 0.4366 -0.8973
				  0.5521 -0.7648 -0.3322 1.6833 6.806 -7.0011000000000001]
   [0.3445 -0.763 0.547 -0.4628 -0.645 -0.6082 0.8168 -0.0436 -0.5753 -6.8178999999999998
    -3.9777999999999998 -5.9886999999999997]
   [0.5855 0.7931 -0.1682 0.8103 -0.579 0.0906 -0.0255 -0.1894 -0.9816 6.1203000000000003
    -7.1051000000000002 3.1983999999999999]
   [2.6760000000000002 -8.4960000000000004 3.2879999999999998]
   [1.4950000000000001 -7.6230000000000002 3.4769999999999999]
   [2.9489999999999998 -9.4640000000000004 4.3739999999999997]
   [3.9729999999999999 -7.5949999999999998 3.0339999999999998]
   [4.3825000000000003 -6.6585000000000001 4.0488999999999997]
   [4.6840999999999999 -7.2019000000000002 4.9443000000000001]
   [3.6189 -5.8888999999999996 4.1624999999999996]
   [5.6254999999999997 -5.9175000000000004 3.5998000000000001]
   [5.8731999999999998 -5.1227999999999998 4.3033999999999999]
   [6.7336999999999998 -6.8605 3.5222000000000002]
   [7.5932000000000004 -6.4923000000000002 2.4548000000000001]
   [8.5661000000000005 -6.2983000000000002 2.9064000000000001]
   [7.0526999999999997 -5.2012 1.8322000000000001]
   [7.1627000000000001 -5.2525000000000004 0.749]
   [7.6665999999999999 -4.1249000000000002 2.488]
   [8.5944000000000003 -4.2542999999999997 2.6981000000000002]
   [5.5660999999999996 -5.3029000000000002 2.2008999999999999]
   [5.0841000000000003 -6.0018000000000002 1.5172000000000001]
   [4.9062000000000001 -4.0452000000000004 2.2042000000000002]
   [7.6298000000000004 -7.6135999999999999 1.4752000000000001]
   [8.5976999999999997 -9.5976999999999997 0.7329]
   [8.5951000000000004 -8.5745000000000005 1.6594]
   [7.7371999999999996 -9.7370999999999999 -0.3364]
   [6.7595999999999998 -8.6800999999999995 -0.4476]
   [6.7337999999999996 -7.6721000000000004 0.4408] rU [9.3993000000000002 -8.5376999999999992
						       2.5743]
   [7.8373999999999997 -10.6989999999999998 -1.1008]
   [9.2924000000000007 -10.3080999999999996 0.8477]
   [6.0932000000000004 -8.6981999999999999 -1.1929000000000001]
   [6.0480999999999998 -6.9515000000000002 0.3446]]
  [[-0.9837 0.0476 -0.1733 -0.1792 -0.3353 0.9249000000000001 -0.0141 0.9409 0.3384
    5.7793000000000001 -5.2302999999999997 4.5997000000000003]
   [-0.8313 -0.4738 -0.2906 0.0649 0.4366 -0.8973 0.5521 -0.7648 -0.3322 1.6833
    6.806 -7.0011000000000001] [0.3445 -0.763 0.547 -0.4628 -0.645 -0.6082 0.8168
				-0.0436 -0.5753 -6.8178999999999998 -3.9777999999999998
				-5.9886999999999997]
   [0.5855 0.7931 -0.1682 0.8103 -0.579 0.0906 -0.0255 -0.1894 -0.9816 6.1203000000000003
    -7.1051000000000002 3.1983999999999999]
   [2.6760000000000002 -8.4960000000000004 3.2879999999999998]
   [1.4950000000000001 -7.6230000000000002 3.4769999999999999]
   [2.9489999999999998 -9.4640000000000004 4.3739999999999997]
   [3.9729999999999999 -7.5949999999999998 3.0339999999999998]
   [3.9937999999999998 -6.7042000000000002 1.9023000000000001]
   [3.2332000000000001 -5.9343000000000004 2.0318999999999998]
   [3.9666000000000001 -7.2862999999999998 0.9812]
   [5.3098000000000001 -5.9546000000000001 1.8564000000000001]
   [5.3863000000000003 -5.3701999999999996 0.9395]
   [5.3851000000000004 -5.0641999999999996 3.0076000000000001]
   [6.7314999999999996 -4.9724000000000004 3.4462000000000002]
   [7.0033000000000003 -3.9201999999999999 3.3618999999999999]
   [7.5997000000000003 -5.8018000000000001 2.4948000000000001]
   [8.3627000000000002 -6.3254000000000001 3.0707]
   [8.0410000000000004 -4.9500999999999999 1.4723999999999999]
   [8.2781000000000002 -4.0644 1.7569999999999999]
   [6.5701000000000001 -6.8129 1.9714] [6.4185999999999996 -7.5808999999999997
					2.7299000000000002]
   [6.9356999999999998 -7.3841000000000001 0.7235]
   [6.8023999999999996 -5.4718 4.8475000000000001]
   [6.6920000000000002 -5.0495000000000001 7.1353999999999997]
   [6.6200999999999999 -4.5499999999999998 5.8506]
   [6.9253999999999998 -6.3613999999999997 7.4926000000000004]
   [7.1045999999999996 -7.2542999999999997 6.3718000000000004]
   [7.0391000000000004 -6.7950999999999997 5.1105999999999998] rU [6.4082999999999997
								   -3.3696000000000002
								   5.6340000000000003]
   [6.9679000000000002 -6.6901000000000002 8.6799999999999997]
   [6.5625999999999998 -4.3956999999999997 7.8811999999999998]
   [7.2781000000000002 -8.2254000000000005 6.5350000000000001]
   [7.1657000000000002 -7.4311999999999996 4.3502999999999998]]
  [[-0.9434 0.3172 0.0971 0.2294 0.4125 0.8816000000000001 0.2396 0.8539 -0.4619
    8.3625000000000007 -52.7147000000000006 1.3745000000000001]
   [0.2765 -0.1121 -0.9545 -0.8297 0.4733 -0.2959 0.485 0.8737 0.0379 -14.7774000000000001
    -45.2464000000000013 21.9087999999999994]
   [0.1063 -0.6334 -0.7665 -0.5931999999999999 -0.6591 0.4624 -0.798 0.4055 -0.4458
    43.7633999999999972 4.3296000000000001 28.4890000000000008]
   [0.7136 -0.5032 -0.4873 0.6803 0.3317 0.6536 -0.1673 -0.7979000000000001 0.5790999999999999
    -17.1858000000000004 41.4390000000000001 -27.0750999999999991]
   [21.3880000000000017 15.0779999999999994 45.5769999999999982]
   [21.9980000000000011 14.5500000000000007 46.820999999999998]
   [21.1449999999999996 14.0269999999999992 44.5420000000000016]
   [22.125 16.3599999999999994 44.945999999999998]
   [21.5036999999999985 16.8594000000000008 43.7323000000000022]
   [20.8146999999999984 17.6662999999999997 43.9823000000000022]
   [21.1085999999999991 16.0229999999999997 43.1557000000000031]
   [22.5654000000000003 17.4874000000000009 42.8616000000000028]
   [22.1584000000000003 17.7242999999999995 41.8785000000000025]
   [23.0557000000000016 18.6826000000000008 43.4750999999999976]
   [24.4787999999999997 18.6151000000000018 43.6454999999999984]
   [24.9355000000000011 19.0839999999999996 42.7738999999999976]
   [24.7957999999999998 17.1427000000000014 43.6473999999999975]
   [24.5652000000000008 16.7399999999999984 44.6336000000000013]
   [26.104099999999999 16.8773000000000017 43.2454999999999998]
   [26.7515999999999998 17.5328000000000017 43.5148999999999972]
   [23.8109000000000002 16.5978999999999992 42.6377000000000024]
   [23.5756000000000014 15.5686 42.9084000000000003]
   [24.2890000000000015 16.7447000000000017 41.2728999999999999]
   [24.9420000000000002 19.2174000000000014 44.8922999999999988]
   [25.2654999999999994 20.563600000000001 44.888300000000001]
   [25.1662999999999997 21.2219000000000015 43.8560999999999979]
   [25.6910999999999987 21.1219000000000001 46.0493999999999986]
   [25.8050999999999995 20.4068000000000005 47.2047999999999988]
   [26.2092999999999989 20.9962000000000018 48.2533999999999992] rU [25.4692000000000007
  19.0220999999999982 47.2053000000000011]
   [25.0502000000000002 18.4827000000000012 46.036999999999999]
   [25.9599000000000011 22.1771999999999991 46.0966000000000022]
   [25.5545000000000009 18.4408999999999992 48.1233999999999966]
   [24.7853999999999992 17.4265000000000008 45.9883000000000024]]
  [[-0.008 -0.7927999999999999 0.6094000000000001 -0.7512 0.4071 0.5197000000000001
    -0.6601 -0.4536 -0.5988 44.1482000000000028 30.7036000000000016 2.1088]
   [0.2765 -0.1121 -0.9545 -0.8297 0.4733 -0.2959 0.485 0.8737 0.0379 -14.7774000000000001
    -45.2464000000000013 21.9087999999999994]
   [0.1063 -0.6334 -0.7665 -0.5931999999999999 -0.6591 0.4624 -0.798 0.4055 -0.4458
    43.7633999999999972 4.3296000000000001 28.4890000000000008]
   [0.7136 -0.5032 -0.4873 0.6803 0.3317 0.6536 -0.1673 -0.7979000000000001 0.5790999999999999
    -17.1858000000000004 41.4390000000000001 -27.0750999999999991]
   [21.3880000000000017 15.0779999999999994 45.5769999999999982]
   [21.9980000000000011 14.5500000000000007 46.820999999999998]
   [21.1449999999999996 14.0269999999999992 44.5420000000000016]
   [22.125 16.3599999999999994 44.945999999999998]
   [23.5095999999999989 16.1226999999999983 44.5782999999999987]
   [23.5649000000000015 15.8588000000000005 43.522199999999998]
   [23.9620999999999995 15.4341000000000008 45.2918999999999983]
   [24.2805 17.4137999999999984 44.7150999999999996]
   [25.3491999999999997 17.2308999999999983 44.6030000000000015]
   [23.8496999999999986 18.3471000000000011 43.720799999999997]
   [23.4089999999999989 19.5681000000000012 44.332099999999997]
   [24.2594999999999992 20.2496000000000009 44.3524000000000029]
   [23.0417999999999985 19.1813000000000002 45.7406999999999968]
   [22.0532000000000004 18.7224000000000004 45.7272999999999996]
   [23.1307000000000009 20.2520999999999987 46.6291000000000011]
   [22.8887999999999998 21.1051000000000002 46.261099999999999]
   [24.0798999999999985 18.1326000000000001 46.0700000000000003]
   [23.6490000000000009 17.4370000000000012 46.7899999999999991]
   [25.3328999999999986 18.7226999999999997 46.5108999999999995]
   [22.2515000000000001 20.1624000000000017 43.6698000000000022]
   [22.4759999999999991 21.0609000000000002 42.6405999999999992]
   [23.6229000000000013 21.3461999999999996 42.3061000000000007]
   [21.3985999999999983 21.6081000000000003 42.0236000000000018]
   [20.1189 21.3012000000000015 42.3804000000000016]
   [19.1599000000000004 21.8516000000000012 41.7578000000000031] rU [19.8918999999999997
  20.3745000000000012 43.4386999999999972]
   [20.9789999999999992 19.8423000000000016 44.0439999999999969]
   [21.5234999999999985 22.3221999999999987 41.209699999999998]
   [18.8732000000000006 20.120000000000001 43.7312000000000012]
   [20.8545000000000016 19.1312999999999995 44.8607999999999976]]
  [[-0.0317 0.1374 0.99 -0.3422 -0.9321 0.1184 0.9391 -0.3351 0.0765 -32.1929000000000016
    25.8198000000000008 -28.5088000000000008]
   [0.2765 -0.1121 -0.9545 -0.8297 0.4733 -0.2959 0.485 0.8737 0.0379 -14.7774000000000001
    -45.2464000000000013 21.9087999999999994]
   [0.1063 -0.6334 -0.7665 -0.5931999999999999 -0.6591 0.4624 -0.798 0.4055 -0.4458
    43.7633999999999972 4.3296000000000001 28.4890000000000008]
   [0.7136 -0.5032 -0.4873 0.6803 0.3317 0.6536 -0.1673 -0.7979000000000001 0.5790999999999999
    -17.1858000000000004 41.4390000000000001 -27.0750999999999991]
   [21.3880000000000017 15.0779999999999994 45.5769999999999982]
   [21.9980000000000011 14.5500000000000007 46.820999999999998]
   [21.1449999999999996 14.0269999999999992 44.5420000000000016]
   [22.125 16.3599999999999994 44.945999999999998]
   [21.5036999999999985 16.8594000000000008 43.7323000000000022]
   [20.8146999999999984 17.6662999999999997 43.9823000000000022]
   [21.1085999999999991 16.0229999999999997 43.1557000000000031]
   [22.5654000000000003 17.4874000000000009 42.8616000000000028]
   [23.0564999999999998 18.3035999999999994 43.3915000000000006]
   [23.5375000000000014 16.5054000000000016 42.4924999999999997]
   [23.6573999999999991 16.4256999999999991 41.0649000000000015]
   [24.4700999999999986 17.0882000000000005 40.7670999999999992]
   [22.3524999999999991 16.9643000000000015 40.5396000000000001]
   [21.5992999999999995 16.1798999999999999 40.6133000000000024]
   [22.4693000000000005 17.4848999999999997 39.2515000000000001]
   [23.0899000000000001 17.0234999999999985 38.682699999999997]
   [22.0340999999999987 18.0633000000000017 41.5279000000000025]
   [20.9509000000000007 18.1708999999999996 41.5846000000000018]
   [22.7249000000000017 19.3019999999999996 41.2100000000000009]
   [23.8580000000000005 15.0648 40.5756999999999977]
   [25.1555999999999997 14.5982000000000003 40.452300000000001]
   [26.1047000000000011 15.3209999999999997 40.7447999999999979]
   [25.3390999999999984 13.3315000000000001 40.0020000000000024]
   [24.2973999999999997 12.5147999999999993 39.6749000000000009]
   [24.5450000000000017 11.3409999999999993 39.2610000000000028] rU [22.9633000000000003
  12.9978999999999996 39.8053000000000026]
   [22.8008999999999986 14.2647999999999993 40.2524000000000015]
   [26.3414000000000001 12.9193999999999996 39.8855000000000004]
   [22.1226999999999983 12.3533000000000008 39.5486000000000004]
   [21.7988999999999997 14.6788000000000007 40.365000000000002]]
  [[-0.9674 0.1021 -0.2318 -0.2514 -0.2766 0.9275 0.0306 0.9555 0.2933 27.8570999999999991
    -42.1304999999999978 -24.4562999999999988]
   [0.2765 -0.1121 -0.9545 -0.8297 0.4733 -0.2959 0.485 0.8737 0.0379 -14.7774000000000001
    -45.2464000000000013 21.9087999999999994]
   [0.1063 -0.6334 -0.7665 -0.5931999999999999 -0.6591 0.4624 -0.798 0.4055 -0.4458
    43.7633999999999972 4.3296000000000001 28.4890000000000008]
   [0.7136 -0.5032 -0.4873 0.6803 0.3317 0.6536 -0.1673 -0.7979000000000001 0.5790999999999999
    -17.1858000000000004 41.4390000000000001 -27.0750999999999991]
   [21.3880000000000017 15.0779999999999994 45.5769999999999982]
   [21.9980000000000011 14.5500000000000007 46.820999999999998]
   [21.1449999999999996 14.0269999999999992 44.5420000000000016]
   [22.125 16.3599999999999994 44.945999999999998]
   [23.5095999999999989 16.1226999999999983 44.5782999999999987]
   [23.5649000000000015 15.8588000000000005 43.522199999999998]
   [23.9620999999999995 15.4341000000000008 45.2918999999999983]
   [24.2805 17.4137999999999984 44.7150999999999996]
   [23.8508999999999993 18.1818999999999988 44.0720000000000027]
   [24.2505999999999986 17.8582999999999998 46.0741000000000014]
   [25.5829999999999984 18.032 46.5775000000000006]
   [25.8568999999999996 19.0761000000000003 46.4256000000000029]
   [26.4409999999999989 17.1555 45.7032999999999987]
   [26.3459000000000003 16.1252999999999993 46.0461999999999989]
   [27.7649000000000008 17.5887999999999991 45.6477999999999966]
   [28.1004000000000005 17.9719000000000015 46.4615999999999971]
   [25.7795999999999985 17.2997000000000014 44.3513000000000019]
   [25.9478000000000009 16.3824000000000005 43.7871000000000024]
   [26.2153999999999989 18.4984000000000002 43.6540999999999997]
   [25.7320999999999991 17.6280999999999999 47.9725999999999999]
   [25.5136000000000003 18.5778999999999996 48.9560000000000031]
   [25.2078999999999986 19.7275999999999989 48.6503000000000014]
   [25.6481999999999992 18.1986999999999988 50.2518000000000029]
   [25.9847000000000001 16.9266000000000005 50.6092000000000013]
   [26.0917999999999992 16.6438999999999986 51.8415999999999997] rU [26.2067000000000014
  15.9514999999999993 49.5942999999999969]
   [26.0713000000000008 16.3496999999999986 48.3079999999999998]
   [25.4890000000000008 18.910499999999999 51.0617999999999981]
   [26.4741999999999997 14.9309999999999992 49.8682000000000016]
   [26.2346000000000004 15.6394000000000002 47.4975000000000023]]) 16 15 ()])
		       #fn(#7# #8# [#9=([[-0.0137 -0.8012 0.5983000000000001 -0.2523
					  0.5817 0.7733 -0.9675 -0.1404 -0.2101
					  0.2031 8.3873999999999995 0.4228]
					 [-0.8313 -0.4738 -0.2906 0.0649 0.4366
					  -0.8973 0.5521 -0.7648 -0.3322 1.6833
					  6.806 -7.0011000000000001]
					 [0.3445 -0.763 0.547 -0.4628 -0.645 -0.6082
					  0.8168 -0.0436 -0.5753 -6.8178999999999998
					  -3.9777999999999998 -5.9886999999999997]
					 [0.5855 0.7931 -0.1682 0.8103 -0.579
					  0.0906 -0.0255 -0.1894 -0.9816 6.1203000000000003
					  -7.1051000000000002 3.1983999999999999]
					 [2.6760000000000002 -8.4960000000000004
					  3.2879999999999998]
					 [1.4950000000000001 -7.6230000000000002
					  3.4769999999999999]
					 [2.9489999999999998 -9.4640000000000004
					  4.3739999999999997]
					 [3.9729999999999999 -7.5949999999999998
					  3.0339999999999998]
					 [5.2416 -8.2422000000000004 2.8180999999999998]
					 [5.2050000000000001 -8.8127999999999993
					  1.8900999999999999]
					 [5.5368000000000004 -8.7737999999999996
					  3.7227000000000001]
					 [6.3231999999999999 -7.2037000000000004
					  2.6002000000000001]
					 [7.3048000000000002 -7.6757 2.5577000000000001]
					 [6.0635000000000003 -6.5091999999999999
					  1.3455999999999999]
					 [6.4696999999999996 -5.1547000000000001
					  1.4629000000000001]
					 [7.2354000000000003 -5.0042999999999997
					  0.7018]
					 [7.0856000000000003 -4.9610000000000003
					  2.8521000000000001]
					 [6.7777000000000003 -3.9935 3.2486999999999999]
					 [8.4626999999999999 -5.1992000000000003
					  2.7423000000000002]
					 [8.8693000000000008 -4.8638000000000003
					  1.9399]
					 [6.3876999999999997 -6.0808999999999997
					  3.6362000000000001]
					 [5.3769999999999998 -5.7561999999999998
					  3.8834]
					 [7.1024000000000003 -6.4753999999999996
					  4.7984999999999998]
					 [5.2763999999999998 -4.2882999999999996
					  1.2538]
					 [4.3776999999999999 -2.2061999999999999
					  0.7229]
					 [5.5068999999999999 -2.9779 0.9088000000000001]
					 [3.0693000000000001 -2.6246 0.85]
					 [2.9279000000000002 -4.0145999999999997
					  1.2149000000000001]
					 [4.0101000000000004 -4.7892000000000001
					  1.4016999999999999] rC [2.1040000000000001
								  -1.7437 0.6331]
					 [6.6266999999999996 -2.5165999999999999
					  0.7728]
					 [1.1496 -2.0600000000000001 0.7287]
					 [2.3302999999999998 -0.7921 0.3815]
					 [1.9353 -4.4465000000000003 1.3419000000000001]
					 [3.8895 -5.8371000000000004 1.6761999999999999]]
					[[0.5141 0.0246 0.8574000000000001 -0.5547
					  -0.7529 0.3542 0.6542 -0.6577 -0.3734
					  -9.1111000000000004 -3.4598 -3.2938999999999998]
					 [-0.8313 -0.4738 -0.2906 0.0649 0.4366
					  -0.8973 0.5521 -0.7648 -0.3322 1.6833
					  6.806 -7.0011000000000001]
					 [0.3445 -0.763 0.547 -0.4628 -0.645 -0.6082
					  0.8168 -0.0436 -0.5753 -6.8178999999999998
					  -3.9777999999999998 -5.9886999999999997]
					 [0.5855 0.7931 -0.1682 0.8103 -0.579
					  0.0906 -0.0255 -0.1894 -0.9816 6.1203000000000003
					  -7.1051000000000002 3.1983999999999999]
					 [2.6760000000000002 -8.4960000000000004
					  3.2879999999999998]
					 [1.4950000000000001 -7.6230000000000002
					  3.4769999999999999]
					 [2.9489999999999998 -9.4640000000000004
					  4.3739999999999997]
					 [3.9729999999999999 -7.5949999999999998
					  3.0339999999999998]
					 [4.3825000000000003 -6.6585000000000001
					  4.0488999999999997]
					 [4.6840999999999999 -7.2019000000000002
					  4.9443000000000001]
					 [3.6189 -5.8888999999999996 4.1624999999999996]
					 [5.6254999999999997 -5.9175000000000004
					  3.5998000000000001]
					 [5.8731999999999998 -5.1227999999999998
					  4.3033999999999999]
					 [6.7336999999999998 -6.8605 3.5222000000000002]
					 [7.5932000000000004 -6.4923000000000002
					  2.4548000000000001]
					 [8.5661000000000005 -6.2983000000000002
					  2.9064000000000001]
					 [7.0526999999999997 -5.2012 1.8322000000000001]
					 [7.1627000000000001 -5.2525000000000004
					  0.749]
					 [7.6665999999999999 -4.1249000000000002
					  2.488]
					 [8.5944000000000003 -4.2542999999999997
					  2.6981000000000002]
					 [5.5660999999999996 -5.3029000000000002
					  2.2008999999999999]
					 [5.0841000000000003 -6.0018000000000002
					  1.5172000000000001]
					 [4.9062000000000001 -4.0452000000000004
					  2.2042000000000002]
					 [7.6298000000000004 -7.6135999999999999
					  1.4752000000000001]
					 [8.6944999999999997 -8.7045999999999992
					  -0.2857]
					 [8.6943000000000001 -7.6513999999999998
					  0.6066]
					 [7.7426000000000004 -9.6987000000000005
					  -0.3801]
					 [6.6642000000000001 -9.5741999999999994
					  0.5722]
					 [6.6391 -8.5592000000000006 1.4525999999999999]
					 rC [7.9032999999999998 -10.6371000000000002
					     -1.3009999999999999]
					 [9.5839999999999996 -6.8186 0.6136]
					 [7.2008999999999999 -11.3604000000000003
					  -1.3619000000000001]
					 [8.7058 -10.6167999999999996 -1.9139999999999999]
					 [5.8585000000000003 -10.3082999999999991
					  0.5822000000000001]
					 [5.8197000000000001 -8.4772999999999996
					  2.1667000000000001]]
					[[-0.4993 0.0476 0.8651 0.8078 -0.3353
					  0.4847 0.3132 0.9409 0.129 6.2988999999999997
					  -5.2302999999999997 -3.8576999999999999]
					 [-0.8313 -0.4738 -0.2906 0.0649 0.4366
					  -0.8973 0.5521 -0.7648 -0.3322 1.6833
					  6.806 -7.0011000000000001]
					 [0.3445 -0.763 0.547 -0.4628 -0.645 -0.6082
					  0.8168 -0.0436 -0.5753 -6.8178999999999998
					  -3.9777999999999998 -5.9886999999999997]
					 [0.5855 0.7931 -0.1682 0.8103 -0.579
					  0.0906 -0.0255 -0.1894 -0.9816 6.1203000000000003
					  -7.1051000000000002 3.1983999999999999]
					 [2.6760000000000002 -8.4960000000000004
					  3.2879999999999998]
					 [1.4950000000000001 -7.6230000000000002
					  3.4769999999999999]
					 [2.9489999999999998 -9.4640000000000004
					  4.3739999999999997]
					 [3.9729999999999999 -7.5949999999999998
					  3.0339999999999998]
					 [3.9937999999999998 -6.7042000000000002
					  1.9023000000000001]
					 [3.2332000000000001 -5.9343000000000004
					  2.0318999999999998]
					 [3.9666000000000001 -7.2862999999999998
					  0.9812]
					 [5.3098000000000001 -5.9546000000000001
					  1.8564000000000001]
					 [5.3863000000000003 -5.3701999999999996
					  0.9395]
					 [5.3851000000000004 -5.0641999999999996
					  3.0076000000000001]
					 [6.7314999999999996 -4.9724000000000004
					  3.4462000000000002]
					 [7.0033000000000003 -3.9201999999999999
					  3.3618999999999999]
					 [7.5997000000000003 -5.8018000000000001
					  2.4948000000000001]
					 [8.3627000000000002 -6.3254000000000001
					  3.0707]
					 [8.0410000000000004 -4.9500999999999999
					  1.4723999999999999]
					 [8.2781000000000002 -4.0644 1.7569999999999999]
					 [6.5701000000000001 -6.8129 1.9714]
					 [6.4185999999999996 -7.5808999999999997
					  2.7299000000000002]
					 [6.9356999999999998 -7.3841000000000001
					  0.7235]
					 [6.8023999999999996 -5.4718 4.8475000000000001]
					 [7.9218000000000002 -5.5700000000000003
					  6.8876999999999997]
					 [7.8907999999999996 -5.0885999999999996
					  5.5944000000000003]
					 [6.9789000000000003 -6.3826999999999998
					  7.4823000000000004]
					 [5.8742000000000001 -6.7319000000000004
					  6.6201999999999996]
					 [5.8182 -6.2769000000000004 5.3570000000000002]
					 rC [7.1702000000000004 -6.7511000000000001
					     8.7401999999999997]
					 [8.7746999999999993 -4.3727999999999998
					  5.1567999999999996]
					 [6.4741 -7.3460999999999999 9.1661999999999999]
					 [7.9889000000000001 -6.4396000000000004
					  9.2429000000000006]
					 [5.0735999999999999 -7.3712999999999997
					  6.9922000000000004]
					 [4.9783999999999997 -6.5472999999999999
					  4.7169999999999996]]
					[[-0.5669 -0.8012 0.1918 -0.8129 0.5817
					  0.0273 -0.1334 -0.1404 -0.9811 -0.3279
					  8.3873999999999995 0.3355]
					 [-0.8313 -0.4738 -0.2906 0.0649 0.4366
					  -0.8973 0.5521 -0.7648 -0.3322 1.6833
					  6.806 -7.0011000000000001]
					 [0.3445 -0.763 0.547 -0.4628 -0.645 -0.6082
					  0.8168 -0.0436 -0.5753 -6.8178999999999998
					  -3.9777999999999998 -5.9886999999999997]
					 [0.5855 0.7931 -0.1682 0.8103 -0.579
					  0.0906 -0.0255 -0.1894 -0.9816 6.1203000000000003
					  -7.1051000000000002 3.1983999999999999]
					 [2.6760000000000002 -8.4960000000000004
					  3.2879999999999998]
					 [1.4950000000000001 -7.6230000000000002
					  3.4769999999999999]
					 [2.9489999999999998 -9.4640000000000004
					  4.3739999999999997]
					 [3.9729999999999999 -7.5949999999999998
					  3.0339999999999998]
					 [5.2416 -8.2422000000000004 2.8180999999999998]
					 [5.2050000000000001 -8.8127999999999993
					  1.8900999999999999]
					 [5.5368000000000004 -8.7737999999999996
					  3.7227000000000001]
					 [6.3231999999999999 -7.2037000000000004
					  2.6002000000000001]
					 [7.3048000000000002 -7.6757 2.5577000000000001]
					 [6.0635000000000003 -6.5091999999999999
					  1.3455999999999999]
					 [6.4696999999999996 -5.1547000000000001
					  1.4629000000000001]
					 [7.2354000000000003 -5.0042999999999997
					  0.7018]
					 [7.0856000000000003 -4.9610000000000003
					  2.8521000000000001]
					 [6.7777000000000003 -3.9935 3.2486999999999999]
					 [8.4626999999999999 -5.1992000000000003
					  2.7423000000000002]
					 [8.8693000000000008 -4.8638000000000003
					  1.9399]
					 [6.3876999999999997 -6.0808999999999997
					  3.6362000000000001]
					 [5.3769999999999998 -5.7561999999999998
					  3.8834]
					 [7.1024000000000003 -6.4753999999999996
					  4.7984999999999998]
					 [5.2763999999999998 -4.2882999999999996
					  1.2538]
					 [3.8961000000000001 -3.0895999999999999
					  -0.1893]
					 [5.0095000000000001 -3.8906999999999998
					  -0.0346]
					 [3.048 -2.6631999999999998 0.8116]
					 [3.4093 -3.1309999999999998 2.1292]
					 [4.4878 -3.9123999999999999 2.3088000000000002]
					 rC [2.0215999999999998 -1.8940999999999999
					     0.4804]
					 [5.7004999999999999 -4.2164000000000001
					  -0.9842]
					 [1.4067000000000001 -1.5872999999999999
					  1.2204999999999999]
					 [1.8721000000000001 -1.6318999999999999
					  -0.4835]
					 [2.8048000000000002 -2.8506999999999998
					  2.9918]
					 [4.7491000000000003 -4.2592999999999996
					  3.3085]]
					[[-0.6298 0.0246 0.7763 -0.5226 -0.7529
					  -0.4001 0.5746 -0.6577 0.487 -0.0208
					  -3.4598 -9.6882000000000001]
					 [-0.8313 -0.4738 -0.2906 0.0649 0.4366
					  -0.8973 0.5521 -0.7648 -0.3322 1.6833
					  6.806 -7.0011000000000001]
					 [0.3445 -0.763 0.547 -0.4628 -0.645 -0.6082
					  0.8168 -0.0436 -0.5753 -6.8178999999999998
					  -3.9777999999999998 -5.9886999999999997]
					 [0.5855 0.7931 -0.1682 0.8103 -0.579
					  0.0906 -0.0255 -0.1894 -0.9816 6.1203000000000003
					  -7.1051000000000002 3.1983999999999999]
					 [2.6760000000000002 -8.4960000000000004
					  3.2879999999999998]
					 [1.4950000000000001 -7.6230000000000002
					  3.4769999999999999]
					 [2.9489999999999998 -9.4640000000000004
					  4.3739999999999997]
					 [3.9729999999999999 -7.5949999999999998
					  3.0339999999999998]
					 [4.3825000000000003 -6.6585000000000001
					  4.0488999999999997]
					 [4.6840999999999999 -7.2019000000000002
					  4.9443000000000001]
					 [3.6189 -5.8888999999999996 4.1624999999999996]
					 [5.6254999999999997 -5.9175000000000004
					  3.5998000000000001]
					 [5.8731999999999998 -5.1227999999999998
					  4.3033999999999999]
					 [6.7336999999999998 -6.8605 3.5222000000000002]
					 [7.5932000000000004 -6.4923000000000002
					  2.4548000000000001]
					 [8.5661000000000005 -6.2983000000000002
					  2.9064000000000001]
					 [7.0526999999999997 -5.2012 1.8322000000000001]
					 [7.1627000000000001 -5.2525000000000004
					  0.749]
					 [7.6665999999999999 -4.1249000000000002
					  2.488]
					 [8.5944000000000003 -4.2542999999999997
					  2.6981000000000002]
					 [5.5660999999999996 -5.3029000000000002
					  2.2008999999999999]
					 [5.0841000000000003 -6.0018000000000002
					  1.5172000000000001]
					 [4.9062000000000001 -4.0452000000000004
					  2.2042000000000002]
					 [7.6298000000000004 -7.6135999999999999
					  1.4752000000000001]
					 [8.5976999999999997 -9.5976999999999997
					  0.7329]
					 [8.5951000000000004 -8.5745000000000005
					  1.6594]
					 [7.7371999999999996 -9.7370999999999999
					  -0.3364]
					 [6.7595999999999998 -8.6800999999999995
					  -0.4476]
					 [6.7337999999999996 -7.6721000000000004
					  0.4408] rC [7.8849 -10.7881 -1.1289]
					 [9.3993000000000002 -8.5376999999999992
					  2.5743]
					 [7.2499000000000002 -10.8809000000000005
					  -1.9088000000000001]
					 [8.6121999999999996 -11.4649000000000001
					  -0.9468]
					 [6.0316999999999998 -8.6941000000000006
					  -1.2587999999999999]
					 [5.9901 -6.8808999999999996 0.3459]]
					[[-0.9837 0.0476 -0.1733 -0.1792 -0.3353
					  0.9249000000000001 -0.0141 0.9409 0.3384
					  5.7793000000000001 -5.2302999999999997
					  4.5997000000000003]
					 [-0.8313 -0.4738 -0.2906 0.0649 0.4366
					  -0.8973 0.5521 -0.7648 -0.3322 1.6833
					  6.806 -7.0011000000000001]
					 [0.3445 -0.763 0.547 -0.4628 -0.645 -0.6082
					  0.8168 -0.0436 -0.5753 -6.8178999999999998
					  -3.9777999999999998 -5.9886999999999997]
					 [0.5855 0.7931 -0.1682 0.8103 -0.579
					  0.0906 -0.0255 -0.1894 -0.9816 6.1203000000000003
					  -7.1051000000000002 3.1983999999999999]
					 [2.6760000000000002 -8.4960000000000004
					  3.2879999999999998]
					 [1.4950000000000001 -7.6230000000000002
					  3.4769999999999999]
					 [2.9489999999999998 -9.4640000000000004
					  4.3739999999999997]
					 [3.9729999999999999 -7.5949999999999998
					  3.0339999999999998]
					 [3.9937999999999998 -6.7042000000000002
					  1.9023000000000001]
					 [3.2332000000000001 -5.9343000000000004
					  2.0318999999999998]
					 [3.9666000000000001 -7.2862999999999998
					  0.9812]
					 [5.3098000000000001 -5.9546000000000001
					  1.8564000000000001]
					 [5.3863000000000003 -5.3701999999999996
					  0.9395]
					 [5.3851000000000004 -5.0641999999999996
					  3.0076000000000001]
					 [6.7314999999999996 -4.9724000000000004
					  3.4462000000000002]
					 [7.0033000000000003 -3.9201999999999999
					  3.3618999999999999]
					 [7.5997000000000003 -5.8018000000000001
					  2.4948000000000001]
					 [8.3627000000000002 -6.3254000000000001
					  3.0707]
					 [8.0410000000000004 -4.9500999999999999
					  1.4723999999999999]
					 [8.2781000000000002 -4.0644 1.7569999999999999]
					 [6.5701000000000001 -6.8129 1.9714]
					 [6.4185999999999996 -7.5808999999999997
					  2.7299000000000002]
					 [6.9356999999999998 -7.3841000000000001
					  0.7235]
					 [6.8023999999999996 -5.4718 4.8475000000000001]
					 [6.6920000000000002 -5.0495000000000001
					  7.1353999999999997]
					 [6.6200999999999999 -4.5499999999999998
					  5.8506]
					 [6.9253999999999998 -6.3613999999999997
					  7.4926000000000004]
					 [7.1045999999999996 -7.2542999999999997
					  6.3718000000000004]
					 [7.0391000000000004 -6.7950999999999997
					  5.1105999999999998] rC [6.9614000000000003
								  -6.6647999999999996
								  8.7814999999999994]
					 [6.4082999999999997 -3.3696000000000002
					  5.6340000000000003]
					 [7.1329000000000002 -7.6280000000000001
					  9.0324000000000009]
					 [6.8204000000000002 -5.9469000000000003
					  9.4777000000000005]
					 [7.2953999999999999 -8.3134999999999994
					  6.5439999999999996]
					 [7.1753 -7.4798 4.2735000000000003]]
					[[0.0033 0.272 -0.9623 0.3013 -0.9179
					  -0.2584 -0.9535 -0.2891 -0.085 43.040300000000002
					  13.7233000000000001 34.570999999999998]
					 [0.9187 0.2887 0.2694 0.0302 -0.7316
					  0.6811 0.3938 -0.6176 -0.6808 -48.4329999999999998
					  26.3253999999999984 13.6382999999999992]
					 [-0.1504 0.7744 -0.6145 0.7581 0.4893
					  0.4311 0.6345 -0.401 -0.6607 -31.9784000000000006
					  -13.4284999999999997 44.9650000000000034]
					 [-0.6236 -0.781 -0.0337 -0.6889999999999999
					  0.5694 -0.4484 0.3694 -0.2564 -0.8932
					  12.1105 30.8774000000000015 46.0945999999999998]
					 [33.3400000000000034 11.0980000000000008
					  46.1749999999999972]
					 [34.5129999999999981 10.2319999999999993
					  46.4660000000000011]
					 [33.4129999999999967 12.3960000000000008
					  46.9339999999999975]
					 [31.9810000000000016 10.3390000000000004
					  46.4819999999999993]
					 [30.8152000000000008 11.1618999999999993
					  46.2002999999999986]
					 [30.4518999999999984 10.9453999999999994
					  45.1957000000000022]
					 [31.0379000000000005 12.2015999999999991
					  46.4399999999999977]
					 [29.7081000000000017 10.7447999999999997
					  47.1428000000000011]
					 [28.8709999999999987 11.4415999999999993
					  47.0981999999999985]
					 [29.254999999999999 9.4393999999999991
					  46.816200000000002]
					 [29.3906999999999989 8.5625 47.945999999999998]
					 [28.4416000000000011 8.5669000000000004
					  48.4819000000000031]
					 [30.4467999999999996 9.2030999999999992
					  48.7952000000000012]
					 [31.4222000000000001 8.9650999999999996
					  48.3708999999999989]
					 [30.3701000000000008 8.9156999999999993
					  50.1623999999999981]
					 [30.0652000000000008 8.0304000000000002
					  50.3740000000000023]
					 [30.1621999999999986 10.6879000000000008
					  48.6120000000000019]
					 [31.0951999999999984 11.2399000000000004
					  48.7254000000000005]
					 [29.1076000000000015 11.1534999999999993
					  49.4701999999999984]
					 [29.7882999999999996 7.2209000000000003
					  47.5234999999999985]
					 [29.182500000000001 5.0438000000000001
					  46.8275000000000006]
					 [28.8007999999999988 6.2911999999999999
					  47.2263000000000019]
					 [30.4888000000000012 4.6890000000000001
					  46.7186000000000021]
					 [31.5033999999999992 5.6405000000000003
					  47.0249000000000024]
					 [31.1091000000000015 6.8691000000000004
					  47.4155999999999977] rC [30.8109000000000002
								   3.4584000000000001
								   46.333599999999997]
					 [27.6171000000000006 6.5989000000000004
					  47.3188999999999993]
					 [31.7923000000000009 3.2301000000000002
					  46.2638000000000034]
					 [30.088000000000001 2.7856999999999998
					  46.1214999999999975]
					 [32.5542000000000016 5.3634000000000004
					  46.9395000000000024]
					 [31.8522999999999996 7.6279000000000003
					  47.6602999999999994]]
					[[0.0797 -0.6026 -0.7941 0.7939000000000001
					  0.5201 -0.315 0.6028 -0.6054 0.5198
					  -36.8340999999999994 41.5292999999999992
					  1.6628000000000001]
					 [0.9187 0.2887 0.2694 0.0302 -0.7316
					  0.6811 0.3938 -0.6176 -0.6808 -48.4329999999999998
					  26.3253999999999984 13.6382999999999992]
					 [-0.1504 0.7744 -0.6145 0.7581 0.4893
					  0.4311 0.6345 -0.401 -0.6607 -31.9784000000000006
					  -13.4284999999999997 44.9650000000000034]
					 [-0.6236 -0.781 -0.0337 -0.6889999999999999
					  0.5694 -0.4484 0.3694 -0.2564 -0.8932
					  12.1105 30.8774000000000015 46.0945999999999998]
					 [33.3400000000000034 11.0980000000000008
					  46.1749999999999972]
					 [34.5129999999999981 10.2319999999999993
					  46.4660000000000011]
					 [33.4129999999999967 12.3960000000000008
					  46.9339999999999975]
					 [31.9810000000000016 10.3390000000000004
					  46.4819999999999993]
					 [31.8779000000000003 9.9368999999999996
					  47.8759999999999977]
					 [31.3238999999999983 10.6930999999999994
					  48.4322000000000017]
					 [32.8646999999999991 9.6623999999999999
					  48.248899999999999]
					 [31.0428999999999995 8.6773000000000007
					  47.940100000000001]
					 [31.0778999999999996 8.2331000000000003
					  48.934899999999999]
					 [29.6955999999999989 8.9669000000000008
					  47.5983000000000018]
					 [29.2784000000000013 8.1699999999999999
					  46.4782000000000011]
					 [28.8005999999999993 7.2731000000000003
					  46.8721999999999994]
					 [30.5544000000000011 7.7939999999999996
					  45.7875000000000014]
					 [30.883700000000001 8.641 45.1856000000000009]
					 [30.5100000000000016 6.6006999999999998
					  45.0581999999999994]
					 [29.6693999999999996 6.4168000000000003
					  44.6325999999999965]
					 [31.5146000000000015 7.5953999999999997
					  46.9527000000000001]
					 [32.525500000000001 7.8261000000000003
					  46.6165999999999983]
					 [31.3875999999999991 6.2950999999999997
					  47.5516000000000005]
					 [28.3976000000000006 8.9301999999999992
					  45.5932999999999993]
					 [26.2154999999999987 9.6135000000000002
					  44.9909999999999997]
					 [27.0280999999999985 8.8961000000000006
					  45.8192000000000021]
					 [26.7043999999999997 10.3489000000000004
					  43.9594999999999985]
					 [28.1087999999999987 10.3836999999999993
					  43.7246999999999986]
					 [28.8978000000000002 9.6707999999999998
					  44.5534999999999997] rC [25.8715000000000011
								   11.0249000000000006
								   43.1749000000000009]
					 [26.5732999999999997 8.2370999999999999
					  46.7483999999999966]
					 [26.2707000000000015 11.5609000000000002
					  42.4177000000000035]
					 [24.8760000000000012 10.9939 43.3427000000000007]
					 [28.5089000000000006 10.9722000000000008
					  42.8990000000000009]
					 [29.9782000000000011 9.6686999999999994
					  44.4097000000000008]]
					[[0.8727 0.476 -0.1091 -0.4188 0.6148
					  -0.6682 -0.251 0.6289 0.7359 -8.1686999999999994
					  -52.0760999999999967 -25.0726000000000013]
					 [0.9187 0.2887 0.2694 0.0302 -0.7316
					  0.6811 0.3938 -0.6176 -0.6808 -48.4329999999999998
					  26.3253999999999984 13.6382999999999992]
					 [-0.1504 0.7744 -0.6145 0.7581 0.4893
					  0.4311 0.6345 -0.401 -0.6607 -31.9784000000000006
					  -13.4284999999999997 44.9650000000000034]
					 [-0.6236 -0.781 -0.0337 -0.6889999999999999
					  0.5694 -0.4484 0.3694 -0.2564 -0.8932
					  12.1105 30.8774000000000015 46.0945999999999998]
					 [33.3400000000000034 11.0980000000000008
					  46.1749999999999972]
					 [34.5129999999999981 10.2319999999999993
					  46.4660000000000011]
					 [33.4129999999999967 12.3960000000000008
					  46.9339999999999975]
					 [31.9810000000000016 10.3390000000000004
					  46.4819999999999993]
					 [30.8152000000000008 11.1618999999999993
					  46.2002999999999986]
					 [30.4518999999999984 10.9453999999999994
					  45.1957000000000022]
					 [31.0379000000000005 12.2015999999999991
					  46.4399999999999977]
					 [29.7081000000000017 10.7447999999999997
					  47.1428000000000011]
					 [29.4506000000000014 9.6944999999999997
					  47.0058999999999969]
					 [30.1045000000000016 10.9634 48.4885000000000019]
					 [29.1794000000000011 11.8417999999999992
					  49.1490000000000009]
					 [28.4388000000000005 11.2210000000000001
					  49.6533000000000015]
					 [28.5211000000000006 12.6007999999999996
					  48.0367000000000033]
					 [29.194700000000001 13.3948999999999998
					  47.7147000000000006]
					 [27.2316000000000003 13.0683000000000007
					  48.3134000000000015]
					 [27.0851000000000006 13.3391000000000002
					  49.2227000000000032]
					 [28.4131 11.5507000000000009 46.9391000000000034]
					 [28.4451000000000001 12.0511999999999997
					  45.9712999999999994]
					 [27.2707000000000015 10.6954999999999991
					  47.1096999999999966]
					 [29.8750999999999998 12.7405000000000008
					  50.0681999999999974]
					 [30.7171999999999983 13.1841000000000008
					  52.2327999999999975]
					 [30.0616999999999983 12.3404000000000007
					  51.3847000000000023]
					 [31.1833999999999989 14.3940999999999999
					  51.8297000000000025]
					 [30.991299999999999 14.8073999999999995
					  50.4802999999999997]
					 [30.343399999999999 13.9610000000000003
					  49.6548000000000016] rC [31.8090000000000011
								   15.1846999999999994
								   52.6957000000000022]
					 [29.6469999999999985 11.2493999999999996
					  51.7616000000000014]
					 [32.1422000000000025 16.0774000000000008
					  52.360599999999998]
					 [31.9391999999999996 14.8893000000000004
					  53.6527000000000029]
					 [31.3631999999999991 15.7771000000000008
					  50.1490999999999971]
					 [30.174199999999999 14.2373999999999992
					  48.6141000000000005]]
					[[0.1549 0.871 -0.4663 0.6768 -0.4374
					  -0.5921 -0.7197 -0.2239 -0.6572 25.2447000000000017
					  -14.1920000000000002 50.3200999999999965]
					 [0.9187 0.2887 0.2694 0.0302 -0.7316
					  0.6811 0.3938 -0.6176 -0.6808 -48.4329999999999998
					  26.3253999999999984 13.6382999999999992]
					 [-0.1504 0.7744 -0.6145 0.7581 0.4893
					  0.4311 0.6345 -0.401 -0.6607 -31.9784000000000006
					  -13.4284999999999997 44.9650000000000034]
					 [-0.6236 -0.781 -0.0337 -0.6889999999999999
					  0.5694 -0.4484 0.3694 -0.2564 -0.8932
					  12.1105 30.8774000000000015 46.0945999999999998]
					 [33.3400000000000034 11.0980000000000008
					  46.1749999999999972]
					 [34.5129999999999981 10.2319999999999993
					  46.4660000000000011]
					 [33.4129999999999967 12.3960000000000008
					  46.9339999999999975]
					 [31.9810000000000016 10.3390000000000004
					  46.4819999999999993]
					 [31.8779000000000003 9.9368999999999996
					  47.8759999999999977]
					 [31.3238999999999983 10.6930999999999994
					  48.4322000000000017]
					 [32.8646999999999991 9.6623999999999999
					  48.248899999999999]
					 [31.0428999999999995 8.6773000000000007
					  47.940100000000001]
					 [30.0440000000000005 8.8473000000000006
					  47.5382999999999996]
					 [31.6749000000000009 7.6351000000000004
					  47.2119]
					 [31.9159000000000006 6.5022000000000002
					  48.0615999999999985]
					 [31.0690999999999988 5.8243 47.9543999999999997]
					 [31.9299999999999997 7.0685000000000002
					  49.4493000000000009]
					 [32.9024000000000001 7.5288000000000004
					  49.6244999999999976]
					 [31.5671999999999997 6.1749999999999998
					  50.4632000000000005]
					 [31.8415999999999997 5.2663000000000002
					  50.3200000000000003]
					 [30.8617999999999988 8.1514000000000006
					  49.3748999999999967]
					 [31.1122000000000014 8.9396000000000004
					  50.0850000000000009]
					 [29.5350999999999999 7.6245000000000003
					  49.5409000000000006]
					 [33.1890000000000001 5.8628999999999998
					  47.7342999999999975]
					 [34.4003999999999976 4.2636000000000003
					  46.4827999999999975]
					 [33.2062000000000026 4.8497000000000003
					  46.7850999999999999]
					 [35.5600000000000023 4.6374000000000004
					  47.0822000000000003]
					 [35.5444000000000031 5.6750999999999996
					  48.057699999999997]
					 [34.3564999999999969 6.2450000000000001
					  48.3432000000000031] rC [36.6976999999999975
								   4.0305 46.7597999999999985]
					 [32.1661000000000001 4.5034000000000001
					  46.2347999999999999]
					 [37.5405000000000015 4.3346999999999998
					  47.2259000000000029]
					 [36.7032999999999987 3.2923 46.0705999999999989]
					 [36.4712999999999994 5.9810999999999996
					  48.5427999999999997]
					 [34.2986000000000004 7.0426000000000002
					  49.0838999999999999]]) 17 16 ()])
		       #fn(#7# #8# [([[-0.0043 -0.8175 0.5759 0.2617 -0.5567 -0.7884
				       0.9651 0.1473 0.2164 0.0359 8.3928999999999991
				       0.5532]
				      [-0.8143 -0.5091 -0.2788 -0.0433 -0.4257
				       0.9038 -0.5788 0.748 0.3246 1.5226999999999999
				       6.9114000000000004 -7.0765000000000002]
				      [0.3822 -0.7477 0.543 0.4552 0.6637 0.5935
				       -0.8042 0.0203 0.5941 -6.9471999999999996
				       -4.1185999999999998 -5.9108000000000001]
				      [0.5639999999999999 0.8007 -0.2022 -0.8247
				       0.5587 -0.0878 0.0426 0.2162 0.9754 6.2694000000000001
				       -7.0540000000000003 3.3315999999999999]
				      [2.8929999999999998 8.5380000000000003 -3.3279999999999998]
				      [1.698 7.6959999999999997 -3.5569999999999999]
				      [3.226 9.5009999999999994 -4.4020000000000001]
				      [4.1589999999999998 7.6040000000000001 -3.0339999999999998]
				      [5.4352 8.2182999999999993 -2.7757000000000001]
				      [5.383 8.7882999999999996 -1.8481000000000001]
				      [5.7728999999999999 8.7436000000000007 -3.6690999999999998]
				      [6.4829999999999997 7.1517999999999997 -2.5251999999999999]
				      [7.4748999999999999 7.5972 -2.4481999999999999]
				      [6.1626000000000003 6.4619999999999997 -1.2827]
				      [6.5430999999999999 5.0991999999999997 -1.3905000000000001]
				      [7.2870999999999997 4.9328000000000003 -0.6114000000000001]
				      [7.1852 4.8935000000000004 -2.7591999999999999]
				      [6.8573000000000004 3.9363000000000001 -3.1644999999999999]
				      [8.5779999999999994 5.1025 -2.6046]
				      [8.9515999999999991 4.7576999999999998 -1.7902]
				      [6.5522 6.0300000000000002 -3.5611999999999999]
				      [5.5419999999999998 5.7355999999999998 -3.8458999999999999]
				      [7.3487 6.4089 -4.6867000000000001]
				      [4.7442000000000002 0.4514 -0.139]
				      [6.3686999999999996 2.1459000000000001 -0.5926]
				      [5.9794999999999998 0.9335 -0.2657]
				      [5.3052000000000001 2.9470999999999998 -0.8125]
				      [3.9891000000000001 2.5987 -0.723]
				      [3.7016 1.2717000000000001 -0.3647] rA [2.4552999999999998
  0.7925 -0.239] [3.177 3.6859000000000002 -1.0198]
				      [5.3247 4.2694999999999999 -1.171]
				      [4.0156000000000001 4.6414999999999997 -1.2759]
				      [6.7198000000000002 0.1618 -0.0547]
				      [1.6709000000000001 1.3899999999999999 -0.4039]
				      [2.3107000000000002 -0.1627 -0.0373]
				      [3.4426000000000001 5.5361000000000002 -1.5199]]
				     [[0.5566 0.0449 0.8296 0.5125 0.7673 -0.3854
				       -0.6538 0.6397 0.4041 -9.1160999999999994
				       -3.7679 -2.9967999999999999]
				      [-0.8143 -0.5091 -0.2788 -0.0433 -0.4257
				       0.9038 -0.5788 0.748 0.3246 1.5226999999999999
				       6.9114000000000004 -7.0765000000000002]
				      [0.3822 -0.7477 0.543 0.4552 0.6637 0.5935
				       -0.8042 0.0203 0.5941 -6.9471999999999996
				       -4.1185999999999998 -5.9108000000000001]
				      [0.5639999999999999 0.8007 -0.2022 -0.8247
				       0.5587 -0.0878 0.0426 0.2162 0.9754 6.2694000000000001
				       -7.0540000000000003 3.3315999999999999]
				      [2.8929999999999998 8.5380000000000003 -3.3279999999999998]
				      [1.698 7.6959999999999997 -3.5569999999999999]
				      [3.226 9.5009999999999994 -4.4020000000000001]
				      [4.1589999999999998 7.6040000000000001 -3.0339999999999998]
				      [4.5777999999999999 6.6593999999999998 -4.0364000000000004]
				      [4.9219999999999997 7.1962999999999999 -4.9203999999999999]
				      [3.7995999999999999 5.9090999999999996 -4.1764000000000001]
				      [5.7873000000000001 5.8868999999999998 -3.5482]
				      [6.0404999999999998 5.0875000000000004 -4.2446000000000002]
				      [6.9135 6.8036000000000003 -3.431]
				      [7.7293000000000003 6.4084000000000003 -2.3391999999999999]
				      [8.7078000000000007 6.1814999999999998 -2.7624]
				      [7.1304999999999996 5.1417999999999999 -1.7346999999999999]
				      [7.2039999999999997 5.1981999999999999 -0.6486]
				      [7.7416999999999998 4.0392000000000001 -2.3813]
				      [8.6784999999999997 4.1443000000000003 -2.5630000000000002]
				      [5.6665999999999999 5.2728000000000002 -2.1536]
				      [5.1746999999999996 5.9805000000000001 -1.4863]
				      [4.9996999999999998 4.0086000000000004 -2.1972999999999998]
				      [10.3245000000000005 8.5458999999999996
				       1.5467]
				      [9.8050999999999995 6.9432 -0.1497]
				      [10.5175000000000001 7.4328000000000003
				       0.8408]
				      [8.7523 7.7422000000000004 -0.4228]
				      [8.4257000000000009 8.9060000000000006 0.2099]
				      [9.2665000000000006 9.3241999999999994 1.254]
				      rA [9.0663999999999998 10.4461999999999993
					  1.9610000000000001]
				      [7.2750000000000004 9.4536999999999995 -0.3428]
				      [7.7961999999999998 7.5518999999999998 -1.3858999999999999]
				      [6.9478999999999997 8.6157000000000004 -1.2770999999999999]
				      [11.4062999999999999 6.9047000000000001
				       1.1859]
				      [8.2844999999999995 11.0341000000000005
				       1.7552000000000001]
				      [9.6584000000000003 10.6646999999999998
				       2.7198000000000002]
				      [6.0430000000000001 8.9853000000000005 -1.7594000000000001]]
				     [[-0.5021 0.0731 0.8617 -0.8112 0.3054 -0.4986
				       -0.2996 -0.9494 -0.094 6.4272999999999998
				       -5.1943999999999999 -3.7806999999999999]
				      [-0.8143 -0.5091 -0.2788 -0.0433 -0.4257
				       0.9038 -0.5788 0.748 0.3246 1.5226999999999999
				       6.9114000000000004 -7.0765000000000002]
				      [0.3822 -0.7477 0.543 0.4552 0.6637 0.5935
				       -0.8042 0.0203 0.5941 -6.9471999999999996
				       -4.1185999999999998 -5.9108000000000001]
				      [0.5639999999999999 0.8007 -0.2022 -0.8247
				       0.5587 -0.0878 0.0426 0.2162 0.9754 6.2694000000000001
				       -7.0540000000000003 3.3315999999999999]
				      [2.8929999999999998 8.5380000000000003 -3.3279999999999998]
				      [1.698 7.6959999999999997 -3.5569999999999999]
				      [3.226 9.5009999999999994 -4.4020000000000001]
				      [4.1589999999999998 7.6040000000000001 -3.0339999999999998]
				      [4.1214000000000004 6.7115999999999998 -1.9049]
				      [3.3464999999999998 5.9610000000000003 -2.0607000000000002]
				      [4.0789 7.2927999999999997 -0.9837]
				      [5.4169999999999998 5.9292999999999996 -1.8186]
				      [5.4505999999999997 5.3399999999999999 -0.9023]
				      [5.5067000000000004 5.0416999999999996 -2.9702999999999999]
				      [6.8650000000000002 4.9151999999999996 -3.3612000000000002]
				      [7.109 3.8576999999999999 -3.2603]
				      [7.7152000000000003 5.7282000000000002 -2.3894000000000002]
				      [8.5029000000000003 6.2355999999999998 -2.9462999999999999]
				      [8.1036000000000001 4.8567999999999998 -1.3419000000000001]
				      [8.327 3.9651000000000001 -1.6184000000000001]
				      [6.7003000000000004 6.7565 -1.8911]
				      [6.5898000000000003 7.5328999999999997 -2.6482000000000001]
				      [7.0505000000000004 7.2877999999999998 -0.6105]
				      [9.6739999999999995 4.7656000000000001 -7.6614000000000004]
				      [9.0739000000000001 4.3013000000000003 -5.3940999999999999]
				      [9.8415999999999997 4.2191999999999998 -6.4581]
				      [7.9885000000000002 5.0632000000000001 -5.6445999999999996]
				      [7.6821999999999999 5.6856 -6.8193999999999999]
				      [8.5831 5.5214999999999996 -7.8840000000000003]
				      rA [8.4084000000000003 6.0747 -9.0932999999999993]
				      [6.4856999999999996 6.3815999999999997 -6.7035]
				      [6.9740000000000002 5.3703000000000003 -4.7759999999999998]
				      [6.1132999999999997 6.1612999999999998 -5.4808000000000003]
				      [10.7627000000000006 3.6375000000000002
				       -6.4219999999999997]
				      [7.6031000000000004 6.6390000000000002 -9.2733000000000008]
				      [9.1004000000000005 5.9707999999999997 -9.7893000000000008]
				      [5.1704999999999997 6.6829999999999998 -5.3167]]
				     [[-0.5426 -0.8175 0.1929 0.8304 -0.5567 -0.0237
				       0.1267 0.1473 0.9809 -0.5075 8.3928999999999991
				       0.2229]
				      [-0.8143 -0.5091 -0.2788 -0.0433 -0.4257
				       0.9038 -0.5788 0.748 0.3246 1.5226999999999999
				       6.9114000000000004 -7.0765000000000002]
				      [0.3822 -0.7477 0.543 0.4552 0.6637 0.5935
				       -0.8042 0.0203 0.5941 -6.9471999999999996
				       -4.1185999999999998 -5.9108000000000001]
				      [0.5639999999999999 0.8007 -0.2022 -0.8247
				       0.5587 -0.0878 0.0426 0.2162 0.9754 6.2694000000000001
				       -7.0540000000000003 3.3315999999999999]
				      [2.8929999999999998 8.5380000000000003 -3.3279999999999998]
				      [1.698 7.6959999999999997 -3.5569999999999999]
				      [3.226 9.5009999999999994 -4.4020000000000001]
				      [4.1589999999999998 7.6040000000000001 -3.0339999999999998]
				      [5.4352 8.2182999999999993 -2.7757000000000001]
				      [5.383 8.7882999999999996 -1.8481000000000001]
				      [5.7728999999999999 8.7436000000000007 -3.6690999999999998]
				      [6.4829999999999997 7.1517999999999997 -2.5251999999999999]
				      [7.4748999999999999 7.5972 -2.4481999999999999]
				      [6.1626000000000003 6.4619999999999997 -1.2827]
				      [6.5430999999999999 5.0991999999999997 -1.3905000000000001]
				      [7.2870999999999997 4.9328000000000003 -0.6114000000000001]
				      [7.1852 4.8935000000000004 -2.7591999999999999]
				      [6.8573000000000004 3.9363000000000001 -3.1644999999999999]
				      [8.5779999999999994 5.1025 -2.6046]
				      [8.9515999999999991 4.7576999999999998 -1.7902]
				      [6.5522 6.0300000000000002 -3.5611999999999999]
				      [5.5419999999999998 5.7355999999999998 -3.8458999999999999]
				      [7.3487 6.4089 -4.6867000000000001]
				      [3.6343000000000001 2.6680000000000001 2.0783]
				      [5.4504999999999999 3.9805000000000001 1.2445999999999999]
				      [4.7539999999999996 3.3816000000000002 2.1850999999999998]
				      [4.8804999999999996 3.7951000000000001 0.0354]
				      [3.7416 3.0924999999999998 -0.2305]
				      [3.0872999999999999 2.4980000000000002 0.8606]
				      rA [1.96 1.7805 0.7462]
				      [3.4605000000000001 3.1183999999999998 -1.5906]
				      [5.3247 4.2694999999999999 -1.171]
				      [4.4244000000000003 3.8243999999999998 -2.0952999999999999]
				      [5.0814000000000004 3.4352 3.2233999999999998]
				      [1.5423 1.6454 -0.152]
				      [1.5716000000000001 1.3398000000000001 1.5391999999999999]
				      [4.2675000000000001 3.8875999999999999 -3.1720999999999999]]
				     [[-0.5891 0.0449 0.8068 0.5375 0.7673 0.3498
				       -0.6034 0.6397 -0.4762 -0.3019 -3.7679
				       -9.5913000000000004]
				      [-0.8143 -0.5091 -0.2788 -0.0433 -0.4257
				       0.9038 -0.5788 0.748 0.3246 1.5226999999999999
				       6.9114000000000004 -7.0765000000000002]
				      [0.3822 -0.7477 0.543 0.4552 0.6637 0.5935
				       -0.8042 0.0203 0.5941 -6.9471999999999996
				       -4.1185999999999998 -5.9108000000000001]
				      [0.5639999999999999 0.8007 -0.2022 -0.8247
				       0.5587 -0.0878 0.0426 0.2162 0.9754 6.2694000000000001
				       -7.0540000000000003 3.3315999999999999]
				      [2.8929999999999998 8.5380000000000003 -3.3279999999999998]
				      [1.698 7.6959999999999997 -3.5569999999999999]
				      [3.226 9.5009999999999994 -4.4020000000000001]
				      [4.1589999999999998 7.6040000000000001 -3.0339999999999998]
				      [4.5777999999999999 6.6593999999999998 -4.0364000000000004]
				      [4.9219999999999997 7.1962999999999999 -4.9203999999999999]
				      [3.7995999999999999 5.9090999999999996 -4.1764000000000001]
				      [5.7873000000000001 5.8868999999999998 -3.5482]
				      [6.0404999999999998 5.0875000000000004 -4.2446000000000002]
				      [6.9135 6.8036000000000003 -3.431]
				      [7.7293000000000003 6.4084000000000003 -2.3391999999999999]
				      [8.7078000000000007 6.1814999999999998 -2.7624]
				      [7.1304999999999996 5.1417999999999999 -1.7346999999999999]
				      [7.2039999999999997 5.1981999999999999 -0.6486]
				      [7.7416999999999998 4.0392000000000001 -2.3813]
				      [8.6784999999999997 4.1443000000000003 -2.5630000000000002]
				      [5.6665999999999999 5.2728000000000002 -2.1536]
				      [5.1746999999999996 5.9805000000000001 -1.4863]
				      [4.9996999999999998 4.0086000000000004 -2.1972999999999998]
				      [10.2593999999999994 10.6774000000000004
				       -1.0056]
				      [9.7528000000000006 8.7080000000000002 -2.2631000000000001]
				      [10.4471000000000007 9.7875999999999994
				       -1.9791000000000001]
				      [8.7271000000000001 8.5574999999999992 -1.3991]
				      [8.4100000000000001 9.3803000000000001 -0.358]
				      [9.2294 10.5030000000000001 -0.1574] rA
				      [9.0349000000000004 11.3950999999999993
				       0.825]
				      [7.2891000000000004 8.9068000000000005 0.3121]
				      [7.7961999999999998 7.5518999999999998 -1.3858999999999999]
				      [6.9702000000000002 7.8292000000000002 -0.3353]
				      [11.3132000000000001 10.0536999999999992
				       -2.5851000000000002]
				      [8.2741000000000007 11.2783999999999995
				       1.4629000000000001]
				      [9.6732999999999993 12.1367999999999991
				       0.9529]
				      [6.0888 7.399 0.1403]]
				     [[-0.9815 0.0731 -0.1772 0.1912 0.3054 -0.9328
				       -0.0141 -0.9494 -0.3137 5.7506000000000004
				       -5.1943999999999999 4.7469999999999999]
				      [-0.8143 -0.5091 -0.2788 -0.0433 -0.4257
				       0.9038 -0.5788 0.748 0.3246 1.5226999999999999
				       6.9114000000000004 -7.0765000000000002]
				      [0.3822 -0.7477 0.543 0.4552 0.6637 0.5935
				       -0.8042 0.0203 0.5941 -6.9471999999999996
				       -4.1185999999999998 -5.9108000000000001]
				      [0.5639999999999999 0.8007 -0.2022 -0.8247
				       0.5587 -0.0878 0.0426 0.2162 0.9754 6.2694000000000001
				       -7.0540000000000003 3.3315999999999999]
				      [2.8929999999999998 8.5380000000000003 -3.3279999999999998]
				      [1.698 7.6959999999999997 -3.5569999999999999]
				      [3.226 9.5009999999999994 -4.4020000000000001]
				      [4.1589999999999998 7.6040000000000001 -3.0339999999999998]
				      [4.1214000000000004 6.7115999999999998 -1.9049]
				      [3.3464999999999998 5.9610000000000003 -2.0607000000000002]
				      [4.0789 7.2927999999999997 -0.9837]
				      [5.4169999999999998 5.9292999999999996 -1.8186]
				      [5.4505999999999997 5.3399999999999999 -0.9023]
				      [5.5067000000000004 5.0416999999999996 -2.9702999999999999]
				      [6.8650000000000002 4.9151999999999996 -3.3612000000000002]
				      [7.109 3.8576999999999999 -3.2603]
				      [7.7152000000000003 5.7282000000000002 -2.3894000000000002]
				      [8.5029000000000003 6.2355999999999998 -2.9462999999999999]
				      [8.1036000000000001 4.8567999999999998 -1.3419000000000001]
				      [8.327 3.9651000000000001 -1.6184000000000001]
				      [6.7003000000000004 6.7565 -1.8911]
				      [6.5898000000000003 7.5328999999999997 -2.6482000000000001]
				      [7.0505000000000004 7.2877999999999998 -0.6105]
				      [6.6623999999999999 3.5061 -8.2986000000000004]
				      [6.5810000000000004 3.2570000000000001 -5.9221000000000004]
				      [6.5151000000000003 2.8262999999999998 -7.1624999999999996]
				      [6.8364000000000003 4.5816999999999997 -5.8882000000000003]
				      [7.0115999999999996 5.4063999999999997 -6.9608999999999996]
				      [6.9173 4.8259999999999996 -8.2361000000000004]
				      rA [7.0667999999999997 5.5163000000000002
					  -9.3763000000000005]
				      [7.2572999999999999 6.7069999999999999 -6.5393999999999997]
				      [6.9740000000000002 5.3703000000000003 -4.7759999999999998]
				      [7.2237999999999998 6.6275000000000004 -5.2453000000000003]
				      [6.3146000000000004 1.7741 -7.3640999999999996]
				      [7.2568000000000001 6.4972000000000003 -9.3455999999999992]
				      [7.0437000000000003 5.0477999999999996 -10.2446000000000002]
				      [7.4108000000000001 7.6227 -4.8418000000000001]]
				     [[0.2379 0.131 -0.9624 -0.5876 -0.7696 -0.2499
				       -0.7734 0.6249 -0.1061 30.9869999999999983
				       -26.9344000000000001 42.6415999999999968]
				      [0.7529 0.1548 0.6397 0.2952 -0.9481000000000001
				       -0.118 0.5881999999999999 0.2777 -0.7595
				       -58.8918999999999997 -11.3094999999999999
				       6.0865999999999998]
				      [-0.0239 0.9667 -0.2546 0.9731 -0.0359 -0.2275
				       -0.229 -0.2532 -0.9399 3.5400999999999998
				       -29.7912999999999997 52.2796000000000021]
				      [-0.8912 -0.4531 0.0242 -0.1183 0.1805 -0.9764
				       0.438 -0.873 -0.2145 19.9023000000000003
				       54.8053999999999988 15.2798999999999996]
				      [41.820999999999998 8.3879999999999999 43.5889999999999986]
				      [42.5399999999999991 8.0449999999999999
				       44.8329999999999984]
				      [42.2469999999999999 9.6920000000000002
				       42.9909999999999997]
				      [40.2550000000000026 8.2029999999999994
				       43.7340000000000018]
				      [39.3504999999999967 8.4696999999999996
				       42.6565000000000012]
				      [39.1377000000000024 7.5433000000000003
				       42.1229999999999976]
				      [39.7203000000000017 9.3118999999999996
				       42.0716999999999999]
				      [38.0405000000000015 8.9194999999999993
				       43.2869000000000028]
				      [37.3686999999999969 9.3035999999999994
				       42.5193000000000012]
				      [37.4318999999999988 7.8146000000000004
				       43.9386999999999972]
				      [37.1959000000000017 8.1354000000000006
				       45.3237000000000023]
				      [36.1788000000000025 8.5202000000000009
				       45.3969999999999985]
				      [38.1721000000000004 9.2327999999999992
				       45.6503999999999976]
				      [39.1555000000000035 8.7939000000000007
				       45.8188000000000031]
				      [37.7862000000000009 10.0617000000000001
				       46.7013000000000034]
				      [37.3087000000000018 9.6228999999999996
				       47.4091999999999985]
				      [38.1843999999999966 10.0267999999999997
				       44.3367000000000004]
				      [39.1578000000000017 10.5053999999999998
				       44.228900000000003]
				      [37.0546999999999969 10.9126999999999992
				       44.3440999999999974]
				      [34.8811000000000035 4.2072000000000003
				       47.578400000000002]
				      [35.1084000000000032 6.1336000000000004
				       46.1818000000000026]
				      [34.4108000000000018 5.1360000000000001
				       46.7207000000000008]
				      [36.3907999999999987 6.1223999999999998
				       46.6052999999999997]
				      [36.9819000000000031 5.2333999999999996
				       47.4697000000000031]
				      [36.178600000000003 4.1985000000000001 48.0035000000000025]
				      rA [36.6103000000000023 3.2749000000000001
					  48.8451999999999984]
				      [38.323599999999999 5.5522 47.6595000000000013]
				      [37.3887 7.0023999999999997 46.2436999999999969]
				      [38.5054999999999978 6.6096000000000004
				       46.9057000000000031]
				      [33.3552999999999997 5.0152000000000001
				       46.4771000000000001]
				      [37.5730000000000004 3.2804000000000002
				       49.1507000000000005]
				      [35.9774999999999991 2.5638000000000001
				       49.1828000000000003]
				      [39.5461000000000027 6.9184000000000001
				       47.0041000000000011]]
				     [[0.1084 -0.0895 -0.9901 0.9789 -0.1638 0.122
				       -0.1731 -0.9824000000000001 0.0698 -2.9039000000000001
				       47.265500000000003 33.0093999999999994]
				      [0.7529 0.1548 0.6397 0.2952 -0.9481000000000001
				       -0.118 0.5881999999999999 0.2777 -0.7595
				       -58.8918999999999997 -11.3094999999999999
				       6.0865999999999998]
				      [-0.0239 0.9667 -0.2546 0.9731 -0.0359 -0.2275
				       -0.229 -0.2532 -0.9399 3.5400999999999998
				       -29.7912999999999997 52.2796000000000021]
				      [-0.8912 -0.4531 0.0242 -0.1183 0.1805 -0.9764
				       0.438 -0.873 -0.2145 19.9023000000000003
				       54.8053999999999988 15.2798999999999996]
				      [41.820999999999998 8.3879999999999999 43.5889999999999986]
				      [42.5399999999999991 8.0449999999999999
				       44.8329999999999984]
				      [42.2469999999999999 9.6920000000000002
				       42.9909999999999997]
				      [40.2550000000000026 8.2029999999999994
				       43.7340000000000018]
				      [39.4849999999999994 8.9300999999999995
				       44.6976999999999975]
				      [39.0638000000000005 9.8199000000000005
				       44.2295999999999978]
				      [40.0756999999999977 9.0713000000000008
				       45.6028999999999982]
				      [38.3102000000000018 8.0413999999999994
				       45.0788999999999973]
				      [37.7841999999999985 8.4636999999999993
				       45.9350999999999985]
				      [37.4200000000000017 7.9452999999999996
				       43.9769000000000005]
				      [37.2248999999999981 6.5609000000000002
				       43.6272999999999982]
				      [36.3359999999999985 6.2168000000000001
				       44.1561000000000021]
				      [38.4346999999999994 5.8414000000000001
				       44.1589999999999989]
				      [39.2687999999999988 5.9973999999999998
				       43.4748999999999981]
				      [38.2344000000000008 4.4907000000000004
				       44.4348000000000027]
				      [37.6373999999999995 4.0385999999999997
				       43.8340999999999994]
				      [38.6925999999999988 6.6078999999999999
				       45.4637000000000029]
				      [39.758499999999998 6.5640000000000001 45.6876999999999995]
				      [37.8237999999999985 6.0705 46.4722999999999971]
				      [33.9162000000000035 6.2598000000000003
				       39.7757999999999967]
				      [34.6709000000000032 6.5758999999999999
				       42.0215000000000032]
				      [33.7257000000000033 6.5186000000000002
				       41.085799999999999]
				      [35.8935000000000031 6.3323999999999998
				       41.5018000000000029]
				      [36.2105000000000032 6.0601000000000003
				       40.1931999999999974]
				      [35.1537999999999968 6.0151000000000003
				       39.253700000000002] rA [35.308799999999998
							       5.7641999999999998
							       37.9649000000000001]
				      [37.5818000000000012 5.8677000000000001
				       40.0506999999999991]
				      [37.0932000000000031 6.3197000000000001
				       42.1809999999999974]
				      [38.0508999999999986 6.0354000000000001
				       41.2635000000000005]
				      [32.6829999999999998 6.6898 41.3532000000000011]
				      [36.2304999999999993 5.5854999999999997
				       37.5925000000000011]
				      [34.5056000000000012 5.7511999999999999
				       37.352800000000002]
				      [39.1317999999999984 5.8993000000000002
				       41.2284999999999968]]
				     [[0.8467 0.4166 -0.3311 -0.3962 0.9089 0.1303
				       0.3552 0.0209 0.9346 -42.7319000000000031
				       -26.6222999999999992 -29.8162999999999982]
				      [0.7529 0.1548 0.6397 0.2952 -0.9481000000000001
				       -0.118 0.5881999999999999 0.2777 -0.7595
				       -58.8918999999999997 -11.3094999999999999
				       6.0865999999999998]
				      [-0.0239 0.9667 -0.2546 0.9731 -0.0359 -0.2275
				       -0.229 -0.2532 -0.9399 3.5400999999999998
				       -29.7912999999999997 52.2796000000000021]
				      [-0.8912 -0.4531 0.0242 -0.1183 0.1805 -0.9764
				       0.438 -0.873 -0.2145 19.9023000000000003
				       54.8053999999999988 15.2798999999999996]
				      [41.820999999999998 8.3879999999999999 43.5889999999999986]
				      [42.5399999999999991 8.0449999999999999
				       44.8329999999999984]
				      [42.2469999999999999 9.6920000000000002
				       42.9909999999999997]
				      [40.2550000000000026 8.2029999999999994
				       43.7340000000000018]
				      [39.3504999999999967 8.4696999999999996
				       42.6565000000000012]
				      [39.1377000000000024 7.5433000000000003
				       42.1229999999999976]
				      [39.7203000000000017 9.3118999999999996
				       42.0716999999999999]
				      [38.0405000000000015 8.9194999999999993
				       43.2869000000000028]
				      [37.6478999999999999 8.1347000000000005
				       43.9335000000000022]
				      [38.2691000000000017 10.0932999999999993
				       44.0523999999999987]
				      [37.3999000000000024 11.1487999999999996
				       43.5972999999999971]
				      [36.5061000000000035 11.1220999999999997
				       44.2205999999999975]
				      [37.0364000000000004 10.7837999999999994
				       42.1835999999999984]
				      [37.8635999999999981 11.0488999999999997
				       41.5251999999999981]
				      [35.8275000000000006 11.3132999999999999
				       41.7379000000000033]
				      [35.6214000000000013 12.1896000000000004
				       42.071399999999997]
				      [36.9316000000000031 9.2555999999999994
				       42.2837000000000032]
				      [37.1777999999999977 8.8260000000000005
				       41.3126999999999995]
				      [35.6285000000000025 8.9334000000000007
				       42.7926000000000002]
				      [38.1482000000000028 15.2833000000000006
				       46.464100000000002]
				      [37.3641000000000005 13.0968 45.9007000000000005]
				      [37.5031999999999996 14.1288 46.7299999999999969]
				      [37.9570000000000007 13.3376999999999999
				       44.7113000000000014]
				      [38.6396999999999977 14.4659999999999993
				       44.3267000000000024]
				      [38.7473000000000027 15.5228999999999999
				       45.2608999999999995] rA [39.3719999999999999
								16.6648999999999994
								45.0296999999999983]
				      [39.1079000000000008 14.3351000000000006
				       43.0223000000000013]
				      [38.0131999999999977 12.4868000000000006
				       43.6280000000000001]
				      [38.7058000000000035 13.1402000000000001
				       42.661999999999999]
				      [37.0730999999999966 14.0856999999999992
				       47.7306000000000026]
				      [39.8113000000000028 16.8280999999999992
				       44.134999999999998]
				      [39.4099999999999966 17.3740999999999985
				       45.747799999999998]
				      [39.0412000000000035 12.9659999999999993
				       41.6396999999999977]]
				     [[0.7063 0.6317 -0.3196 -0.0403 -0.4149 -0.909
				       -0.7068 0.6549 -0.2676 6.4401999999999999
				       -52.1495999999999995 30.8246000000000002]
				      [0.7529 0.1548 0.6397 0.2952 -0.9481000000000001
				       -0.118 0.5881999999999999 0.2777 -0.7595
				       -58.8918999999999997 -11.3094999999999999
				       6.0865999999999998]
				      [-0.0239 0.9667 -0.2546 0.9731 -0.0359 -0.2275
				       -0.229 -0.2532 -0.9399 3.5400999999999998
				       -29.7912999999999997 52.2796000000000021]
				      [-0.8912 -0.4531 0.0242 -0.1183 0.1805 -0.9764
				       0.438 -0.873 -0.2145 19.9023000000000003
				       54.8053999999999988 15.2798999999999996]
				      [41.820999999999998 8.3879999999999999 43.5889999999999986]
				      [42.5399999999999991 8.0449999999999999
				       44.8329999999999984]
				      [42.2469999999999999 9.6920000000000002
				       42.9909999999999997]
				      [40.2550000000000026 8.2029999999999994
				       43.7340000000000018]
				      [39.4849999999999994 8.9300999999999995
				       44.6976999999999975]
				      [39.0638000000000005 9.8199000000000005
				       44.2295999999999978]
				      [40.0756999999999977 9.0713000000000008
				       45.6028999999999982]
				      [38.3102000000000018 8.0413999999999994
				       45.0788999999999973]
				      [37.7098999999999975 7.8166000000000002
				       44.1972999999999985]
				      [38.8012000000000015 6.8320999999999996
				       45.6379999999999981]
				      [38.2430999999999983 6.6413000000000002
				       46.9528999999999996]
				      [37.3504999999999967 6.0262000000000002
				       46.8385000000000034]
				      [37.848399999999998 8.0155999999999992 47.4213999999999984]
				      [38.7381000000000029 8.5405999999999995
				       47.7689999999999984]
				      [36.8286000000000016 8.0367999999999995
				       48.3701000000000008]
				      [36.8391999999999982 7.3063000000000002
				       48.9928999999999988]
				      [37.3575999999999979 8.6511999999999993
				       46.1131999999999991]
				      [37.5206999999999979 9.7274999999999991
				       46.1670999999999978]
				      [35.9984999999999999 8.2392000000000003
				       45.9031999999999982]
				      [39.9117000000000033 2.2277999999999998
				       48.8526999999999987]
				      [38.6206999999999994 3.6941000000000002
				       47.4757000000000033]
				      [38.9872000000000014 2.4887999999999999
				       47.9057000000000031]
				      [39.2961000000000027 4.6719999999999997
				       48.1174000000000035]
				      [40.2546000000000035 4.5307000000000004
				       49.0912000000000006]
				      [40.5932000000000031 3.2189000000000001
				       49.4984999999999999] rA [41.4938000000000002
								2.9317000000000002
								50.4228999999999985]
				      [40.7194999999999965 5.7755000000000001
				       49.5060000000000002]
				      [39.1730000000000018 6.0305 47.9170000000000016]
				      [40.0412999999999997 6.625 48.7727999999999966]
				      [38.5257000000000005 1.5960000000000001
				       47.4838000000000022]
				      [41.9906999999999968 3.6753 50.8920999999999992]
				      [41.6848000000000027 1.9686999999999999
				       50.6599000000000004]
				      [40.3571000000000026 7.6321000000000003
				       49.0452000000000012]]) 18 17 ()])
		       #fn(#1# #2# [#10=[[-0.0359 -0.8071 0.5894 -0.2669 0.5760999999999999
					  0.7726 -0.9631 -0.1296 -0.2361 0.1584
					  8.3434000000000008 0.5434]
					 [-0.8313 -0.4738 -0.2906 0.0649 0.4366
					  -0.8973 0.5521 -0.7648 -0.3322 1.6833
					  6.806 -7.0011000000000001]
					 [0.3445 -0.763 0.547 -0.4628 -0.645 -0.6082
					  0.8168 -0.0436 -0.5753 -6.8178999999999998
					  -3.9777999999999998 -5.9886999999999997]
					 [0.5855 0.7931 -0.1682 0.8103 -0.579
					  0.0906 -0.0255 -0.1894 -0.9816 6.1203000000000003
					  -7.1051000000000002 3.1983999999999999]
					 [2.6760000000000002 -8.4960000000000004
					  3.2879999999999998]
					 [1.4950000000000001 -7.6230000000000002
					  3.4769999999999999]
					 [2.9489999999999998 -9.4640000000000004
					  4.3739999999999997]
					 [3.9729999999999999 -7.5949999999999998
					  3.0339999999999998]
					 [5.2430000000000003 -8.2420000000000009
					  2.8260000000000001]
					 [5.1974 -8.8497000000000003 1.9222999999999999]
					 [5.5548000000000002 -8.7347999999999999
					  3.7469000000000001]
					 [6.3140000000000001 -7.2060000000000004
					  2.5510000000000002]
					 [7.2953999999999999 -7.6761999999999997
					  2.4897999999999998]
					 [6.0140000000000002 -6.5419999999999998
					  1.2889999999999999]
					 [6.4189999999999996 -5.1840000000000002
					  1.3620000000000001]
					 [7.1608000000000001 -5.0495000000000001
					  0.5747]
					 [7.0759999999999996 -4.9560000000000004
					  2.7269999999999999]
					 [6.7770000000000001 -3.9803000000000002
					  3.1099000000000001]
					 [8.4499999999999993 -5.1929999999999996
					  2.581]
					 [8.8308999999999997 -4.8754999999999997
					  1.7589999999999999]
					 [6.4059999999999997 -6.0590000000000002
					  3.5579999999999998]
					 [5.4020999999999999 -5.7313000000000001
					  3.8281000000000001]
					 [7.157 -6.4240000000000004 4.7069999999999999]
					 [5.2169999999999996 -4.3259999999999996
					  1.169]
					 [4.2960000000000003 -2.2559999999999998
					  0.629]
					 [5.4329999999999998 -3.02 0.799]
					 [2.9929999999999999 -2.6779999999999999
					  0.794]
					 [2.867 -4.0629999999999997 1.1830000000000001]
					 [3.9569999999999999 -4.8300000000000001
					  1.355] rU [6.5469999999999997 -2.556
						     0.629]
					 [2.0539999999999998 -1.8999999999999999
					  0.613]
					 [4.4299999999999997 -1.302 0.36]
					 [1.9590000000000001 -4.4569999999999999
					  1.325]
					 [3.8460000000000001 -5.7859999999999996
					  1.6240000000000001]] 7 8 ()])
		       #fn(#7# #8# [#9# 4 3 ()])
		       #fn(#11=":000r1e0~\x7fi0233|31e1~\x7fi0233|31K;" #12=[G37-A38
  helix5*] [#10# 5 4 ()])
		       #fn(#11# #12# [#6# 6 5 ()]))
		  [([23 [#14=1.0 #13=0.0 #13# #13# #14# #13# #13# #13# #14# #13#
			 #13# #13#] #15#])
		   (#fn(#4# #5# [#10# 8 23 ()]) . #16#)
		   #fn("8000r2c0qe1|3141;" [#fn(";000r1|bB=6K0c0e1e2e3bC\x7f3232e1e4~3242;|b6=6K0c5e1e2e3b7\x7f3232e1e4~3242;];" [#fn("9000r2e0e1|}32c242;" [<=
  pt-dist 4.0]) atom-pos nuc-P get-var nuc-O3* #fn("9000r2e0e1|}32c242;" [<=
  pt-dist 4.5])]) var-id] pseudoknot-constraint?) ()]]] try-assignments))
#6 (search/lambda/lambda/try-assignments/lambda
 [23 [#1=1.0 #0=0.0 #0# #0# #1# #0# #0# #0# #1# #0# #0# #0#]
  [[-0.0018 -0.8207 0.5714 0.2679 -0.5508999999999999 -0.7904 0.9634 0.1517 0.2209
    0.0073 8.4030000000000005 0.6232] [-0.8143 -0.5091 -0.2788 -0.0433 -0.4257
				       0.9038 -0.5788 0.748 0.3246 1.5226999999999999
				       6.9114000000000004 -7.0765000000000002]
   [0.3822 -0.7477 0.543 0.4552 0.6637 0.5935 -0.8042 0.0203 0.5941 -6.9471999999999996
    -4.1185999999999998 -5.9108000000000001]
   [0.5639999999999999 0.8007 -0.2022 -0.8247 0.5587 -0.0878 0.0426 0.2162 0.9754
    6.2694000000000001 -7.0540000000000003 3.3315999999999999]
   [2.8929999999999998 8.5380000000000003 -3.3279999999999998]
   [1.698 7.6959999999999997 -3.5569999999999999]
   [3.226 9.5009999999999994 -4.4020000000000001]
   [4.1589999999999998 7.6040000000000001 -3.0339999999999998]
   [5.4550000000000001 8.2119999999999997 -2.8809999999999998]
   [5.4546000000000001 8.8507999999999996 -1.9978]
   [5.7587999999999999 8.6624999999999996 -3.8258999999999999]
   [6.4969999999999999 7.1479999999999997 -2.5979999999999999]
   [7.4896000000000003 7.5918999999999999 -2.5213999999999999]
   [6.1630000000000003 6.4859999999999998 -1.3440000000000001]
   [6.54 5.1200000000000001 -1.419] [7.2763 4.9680999999999997 -0.6297]
   [7.194 4.883 -2.7770000000000001] [6.8666999999999998 3.9182999999999999 -3.1646999999999998]
   [8.5860000000000003 5.0910000000000002 -2.6139999999999999]
   [8.9510000000000005 4.7625999999999999 -1.7889999999999999]
   [6.5720000000000001 6.0039999999999996 -3.609]
   [5.5636000000000001 5.7065999999999999 -3.8965999999999998]
   [7.3800999999999997 6.3562000000000003 -4.7350000000000003]
   [4.7149999999999999 0.491 -0.136] [6.3490000000000002 2.173 -0.602]
   [5.9530000000000003 0.965 -0.267] [5.29 2.9790000000000001 -0.826]
   [3.972 2.6389999999999998 -0.733] [3.677 1.3160000000000001 -0.366] rA [2.4279999999999999
  0.845 -0.236] [3.1659999999999999 3.7290000000000001 -1.036]
   [5.3170000000000002 4.2990000000000004 -1.1930000000000001]
   [4.0099999999999998 4.6779999999999999 -1.2989999999999999]
   [6.6890000000000001 0.1903 -0.0518] [1.647 1.446 -0.404]
   [2.278 -0.108 -0.028] [3.4420999999999999 5.5743999999999998 -1.5482]]])
#7 (run ())

real	0m0.116s
user	0m0.090s
sys	0m0.021s
+!CSVLINE!+femtolisp,nucleic,CRASHED

Testing pi under Femtolisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/Femtolisp-prelude.scm
Compiling...
femtolisp_comp /tmp/larcenous/Femtolisp/pi.scm /tmp/larcenous/Femtolisp/pi.scm
Running...
parse-error: read: overflow in numeric constant 314159265358979323846264338327950288419716939937507
in file /tmp/larcenous/Femtolisp/pi.scm

real	0m0.018s
user	0m0.014s
sys	0m0.002s
+!CSVLINE!+femtolisp,pi,CRASHED

Testing pnpoly under Femtolisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/Femtolisp-prelude.scm
Compiling...
femtolisp_comp /tmp/larcenous/Femtolisp/pnpoly.scm /tmp/larcenous/Femtolisp/pnpoly.scm
Running...
Running pnpoly:1000000
Elapsed time: 94.0871350765228271 seconds (94.0870000000000033) for pnpoly:1000000
+!CSVLINE!+femtolisp-unknown,pnpoly:1000000,94.0871350765228271

real	1m34.104s
user	1m33.099s
sys	0m0.206s

Testing ray under Femtolisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/Femtolisp-prelude.scm
Compiling...
femtolisp_comp /tmp/larcenous/Femtolisp/ray.scm /tmp/larcenous/Femtolisp/ray.scm
Running...
Running ray:50
Elapsed time: 28.9349319934844971 seconds (28.9349999999999987) for ray:50
+!CSVLINE!+femtolisp-unknown,ray:50,28.9349319934844971

real	0m28.954s
user	0m28.833s
sys	0m0.073s

Testing simplex under Femtolisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/Femtolisp-prelude.scm
Compiling...
femtolisp_comp /tmp/larcenous/Femtolisp/simplex.scm /tmp/larcenous/Femtolisp/simplex.scm
Running...
Running simplex:1000000
Elapsed time: 83.1084520816802979 seconds (83.1080000000000041) for simplex:1000000
+!CSVLINE!+femtolisp-unknown,simplex:1000000,83.1084520816802979

real	1m23.131s
user	1m22.807s
sys	0m0.177s

Testing ack under Femtolisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/Femtolisp-prelude.scm
Compiling...
femtolisp_comp /tmp/larcenous/Femtolisp/ack.scm /tmp/larcenous/Femtolisp/ack.scm
Running...
Running ack:3:12:2
Elapsed time: 47.7454378604888916 seconds (47.7449999999999974) for ack:3:12:2
+!CSVLINE!+femtolisp-unknown,ack:3:12:2,47.7454378604888916

real	0m47.762s
user	0m47.606s
sys	0m0.084s

Testing array1 under Femtolisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/Femtolisp-prelude.scm
Compiling...
femtolisp_comp /tmp/larcenous/Femtolisp/array1.scm /tmp/larcenous/Femtolisp/array1.scm
Running...
Running array1:1000000:500
Elapsed time: 61.5761318206787109 seconds (61.5760000000000005) for array1:1000000:500
+!CSVLINE!+femtolisp-unknown,array1:1000000:500,61.5761318206787109

real	1m1.597s
user	1m1.416s
sys	0m0.123s

Testing string under Femtolisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/Femtolisp-prelude.scm
Compiling...
femtolisp_comp /tmp/larcenous/Femtolisp/string.scm /tmp/larcenous/Femtolisp/string.scm
Running...
Running string:500000:25
Elapsed time: 1.5580770969390869 seconds (1.5580000000000001) for string:500000:25
+!CSVLINE!+femtolisp-unknown,string:500000:25,1.5580770969390869

real	0m1.588s
user	0m1.277s
sys	0m0.303s

Testing sum1 under Femtolisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/Femtolisp-prelude.scm
Compiling...
femtolisp_comp /tmp/larcenous/Femtolisp/sum1.scm /tmp/larcenous/Femtolisp/sum1.scm
Running...
Running sum1:25
Elapsed time: 0.7492270469665527 seconds (0.749) for sum1:25
+!CSVLINE!+femtolisp-unknown,sum1:25,0.7492270469665527

real	0m0.765s
user	0m0.753s
sys	0m0.009s

Testing cat under Femtolisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/Femtolisp-prelude.scm
Compiling...
femtolisp_comp /tmp/larcenous/Femtolisp/cat.scm /tmp/larcenous/Femtolisp/cat.scm
Running...
Running cat:50
Elapsed time: 28.9008760452270508 seconds (28.9009999999999998) for cat:50
+!CSVLINE!+femtolisp-unknown,cat:50,28.9008760452270508

real	0m28.917s
user	0m28.529s
sys	0m0.194s

Testing tail under Femtolisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/Femtolisp-prelude.scm
Compiling...
femtolisp_comp /tmp/larcenous/Femtolisp/tail.scm /tmp/larcenous/Femtolisp/tail.scm
Running...
Running tail:25
Elapsed time: 0.5768799781799316 seconds (0.577) for tail:25
+!CSVLINE!+femtolisp-unknown,tail:25,0.5768799781799316

real	0m0.596s
user	0m0.433s
sys	0m0.091s

Testing wc under Femtolisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/Femtolisp-prelude.scm
Compiling...
femtolisp_comp /tmp/larcenous/Femtolisp/wc.scm /tmp/larcenous/Femtolisp/wc.scm
Running...
Running wc:inputs/bib:50
Elapsed time: 36.6899280548095703 seconds (36.6899999999999977) for wc:inputs/bib:50
+!CSVLINE!+femtolisp-unknown,wc:inputs/bib:50,36.6899280548095703

real	0m36.706s
user	0m36.571s
sys	0m0.108s

Testing read1 under Femtolisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/Femtolisp-prelude.scm
Compiling...
femtolisp_comp /tmp/larcenous/Femtolisp/read1.scm /tmp/larcenous/Femtolisp/read1.scm
Running...
Running read1:2500
Elapsed time: 1.6071560382843018 seconds (1.607) for read1:2500
+!CSVLINE!+femtolisp-unknown,read1:2500,1.6071560382843018

real	0m1.623s
user	0m1.595s
sys	0m0.024s

Testing compiler under Femtolisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/Femtolisp-prelude.scm
Compiling...
femtolisp_comp /tmp/larcenous/Femtolisp/compiler.scm /tmp/larcenous/Femtolisp/compiler.scm
Running...
eval: variable string-set! has no value
in file /tmp/larcenous/Femtolisp/compiler.scm
#0 (string->canonical-symbol/lambda/lambda/lambda
 "QUOTE" "     " 4)
#1 (lambda)

real	0m0.022s
user	0m0.019s
sys	0m0.002s
+!CSVLINE!+femtolisp,compiler,CRASHED

Testing conform under Femtolisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/Femtolisp-prelude.scm
Compiling...
femtolisp_comp /tmp/larcenous/Femtolisp/conform.scm /tmp/larcenous/Femtolisp/conform.scm
Running...
Running conform:500
Elapsed time: 44.037473201751709 seconds (44.036999999999999) for conform:500
+!CSVLINE!+femtolisp-unknown,conform:500,44.037473201751709

real	0m44.060s
user	0m43.943s
sys	0m0.076s

Testing dynamic under Femtolisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/Femtolisp-prelude.scm
Compiling...
femtolisp_comp /tmp/larcenous/Femtolisp/dynamic.scm /tmp/larcenous/Femtolisp/dynamic.scm
Running...
arg-error: symbol: too few arguments
in file /tmp/larcenous/Femtolisp/dynamic.scm
#0 (lambda)

real	0m0.042s
user	0m0.038s
sys	0m0.002s
+!CSVLINE!+femtolisp,dynamic,CRASHED

Testing earley under Femtolisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/Femtolisp-prelude.scm
Compiling...
femtolisp_comp /tmp/larcenous/Femtolisp/earley.scm /tmp/larcenous/Femtolisp/earley.scm
Running...
Running earley:1
Elapsed time: 35.2716391086578369 seconds (35.2719999999999985) for earley:1
+!CSVLINE!+femtolisp-unknown,earley:1,35.2716391086578369

real	0m35.473s
user	0m33.943s
sys	0m1.468s

Testing graphs under Femtolisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/Femtolisp-prelude.scm
Compiling...
femtolisp_comp /tmp/larcenous/Femtolisp/graphs.scm /tmp/larcenous/Femtolisp/graphs.scm
Running...
Running graphs:7:3
Elapsed time: 97.9755699634552002 seconds (97.9759999999999991) for graphs:7:3
+!CSVLINE!+femtolisp-unknown,graphs:7:3,97.9755699634552002

real	1m38.004s
user	1m37.649s
sys	0m0.253s

Testing lattice under Femtolisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/Femtolisp-prelude.scm
Compiling...
femtolisp_comp /tmp/larcenous/Femtolisp/lattice.scm /tmp/larcenous/Femtolisp/lattice.scm
Running...
Running lattice:44:10
Elapsed time: 121.389232873916626 seconds (121.3889999999999958) for lattice:44:10
+!CSVLINE!+femtolisp-unknown,lattice:44:10,121.389232873916626

real	2m1.409s
user	2m1.022s
sys	0m0.242s

Testing matrix under Femtolisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/Femtolisp-prelude.scm
Compiling...
femtolisp_comp /tmp/larcenous/Femtolisp/matrix.scm /tmp/larcenous/Femtolisp/matrix.scm
Running...
Running matrix:5:5:2500
Elapsed time: 34.101315975189209 seconds (34.1009999999999991) for matrix:5:5:2500
+!CSVLINE!+femtolisp-unknown,matrix:5:5:2500,34.101315975189209

real	0m34.126s
user	0m34.007s
sys	0m0.074s

Testing maze under Femtolisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/Femtolisp-prelude.scm
Compiling...
femtolisp_comp /tmp/larcenous/Femtolisp/maze.scm /tmp/larcenous/Femtolisp/maze.scm
Running...
Running maze:20:7:10000
ERROR: returned incorrect result: (#0=#\space
 #0# #0# #1=#\_
 #0# #0# #0#
 #1# #0# #0#
 #0# #1# #7=#\linefeed
 #6=#\space #2=#\_ #3=#\/
 #4=#\space #5=#\\ #2#
 #3# #4# #5#
 #2# #3# #10=#\.
 #5# #6# #7#
 #14=#\/ #4# #8=#\space
 #11=#\_ #9=#\/ #4#
 #8# #8# #9#
 #10# #8# #8#
 #8# #10# #15=#\\
 #13=#\linefeed #12=#\\ #8#
 #9# #4# #8#
 #11# #9# #10#
 #8# #11# #9#
 #4# #12# #11#
 #9# #13# #14#
 #4# #12# #11#
 #9# #10# #8#
 #11# #9# #4#
 #12# #11# #8#
 #4# #15# #13#
 #12# #11# #8#
 #4# #8# #8#
 #8# #4# #12#
 #11# #8# #4#
 #8# #11# #9#
 #13# #14# #4#
 #12# #11# #9#
 #10# #12# #11#
 #9# #4# #12#
 #11# #9# #4#
 #15# #13# #12#
 #11# #8# #4#
 #8# #8# #9#
 #4# #8# #11#
 #8# #4# #8#
 #11# #9# #13#
 #14# #4# #12#
 #8# #9# #10#
 #12# #11# #9#
 #4# #8# #11#
 #8# #4# #15#
 #13# #12# #8#
 #9# #4# #12#
 #11# #8# #10#
 #12# #8# #8#
 #4# #12# #11#
 #9# #13# #14#
 #4# #12# #11#
 #9# #4# #12#
 #8# #9# #4#
 #12# #11# #9#
 #4# #15# #13#
 #12# #11# #8#
 #4# #12# #11#
 #8# #10# #8#
 #11# #8# #4#
 #8# #11# #9#
 #13# #14# #4#
 #8# #11# #9#
 #4# #12# #8#
 #8# #4# #12#
 #8# #9# #4#
 #15# #13# #12#
 #8# #9# #4#
 #8# #8# #9#
 #10# #12# #11#
 #9# #4# #8#
 #11# #9# #13#
 #14# #4# #8#
 #11# #9# #4#
 #12# #8# #9#
 #10# #12# #11#
 #9# #10# #15#
 #13# #12# #8#
 #9# #4# #8#
 #11# #9# #10#
 #8# #8# #8#
 #10# #8# #8#
 #9# #13# #14#
 #4# #12# #11#
 #9# #4# #12#
 #11# #9# #4#
 #12# #11# #9#
 #10# #15# #13#
 #12# #11# #8#
 #4# #8# #11#
 #8# #4# #12#
 #11# #9# #10#
 #8# #11# #9#
 #13# #14# #4#
 #12# #11# #8#
 #10# #12# #11#
 #9# #10# #8#
 #11# #9# #4#
 #15# #13# #12#
 #11# #8# #10#
 #8# #11# #8#
 #10# #12# #8#
 #9# #4# #8#
 #8# #9# #13#
 #14# #4# #8#
 #11# #8# #10#
 #12# #11# #8#
 #10# #8# #8#
 #9# #4# #15#
 #13# #12# #11#
 #9# #4# #12#
 #8# #9# #4#
 #12# #8# #9#
 #4# #12# #11#
 #9# #13# #14#
 #4# #12# #8#
 #9# #10# #8#
 #11# #9# #4#
 #12# #8# #8#
 #4# #15# #13#
 #12# #11# #8#
 #10# #8# #11#
 #9# #4# #12#
 #11# #9# #4#
 #12# #11# #9#
 #13# #14# #10#
 #12# #11# #8#
 #10# #8# #11#
 #9# #4# #12#
 #11# #8# #4#
 #15# #13# #12#
 #8# #8# #10#
 #8# #11# #8#
 #4# #12# #8#
 #9# #4# #12#
 #11# #9# #13#
 #14# #10# #12#
 #11# #8# #4#
 #12# #11# #8#
 #4# #8# #8#
 #9# #4# #15#
 #13# #12# #8#
 #9# #4# #12#
 #8# #9# #4#
 #12# #11# #9#
 #4# #12# #8#
 #9# #13# #14#
 #10# #12# #11#
 #8# #4# #12#
 #11# #8# #4#
 #12# #11# #8#
 #4# #15# #13#
 #12# #8# #8#
 #4# #12# #11#
 #9# #10# #12#
 #8# #9# #4#
 #8# #11# #9#
 #13# #14# #10#
 #12# #11# #9#
 #10# #8# #11#
 #8# #10# #12#
 #8# #9# #4#
 #15# #13# #12#
 #11# #8# #10#
 #8# #11# #9#
 #10# #8# #11#
 #9# #4# #8#
 #8# #9# #13#
 #14# #4# #8#
 #8# #9# #4#
 #8# #8# #8#
 #4# #12# #11#
 #9# #4# #15#
 #13# #12# #11#
 #9# #4# #12#
 #11# #9# #10#
 #12# #11# #8#
 #4# #12# #8#
 #9# #13# #14#
 #4# #12# #11#
 #9# #10# #12#
 #11# #8# #10#
 #12# #11# #9#
 #4# #15# #13#
 #12# #8# #9#
 #4# #8# #8#
 #8# #10# #12#
 #8# #8# #4#
 #12# #11# #9#
 #13# #14# #4#
 #12# #11# #9#
 #10# #12# #11#
 #8# #10# #12#
 #11# #8# #4#
 #15# #13# #12#
 #8# #9# #10#
 #12# #11# #8#
 #10# #12# #8#
 #9# #4# #12#
 #8# #9# #13#
 #14# #10# #8#
 #11# #8# #10#
 #12# #8# #9#
 #4# #12# #8#
 #9# #4# #15#
 #13# #12# #8#
 #9# #4# #8#
 #11# #8# #10#
 #12# #11# #9#
 #4# #12# #8#
 #9# #13# #14#
 #10# #12# #11#
 #8# #4# #12#
 #11# #8# #4#
 #8# #11# #9#
 #4# #15# #13#
 #12# #8# #9#
 #4# #12# #11#
 #9# #4# #12#
 #11# #9# #4#
 #12# #11# #9#
 #13#)

real	0m26.537s
user	0m26.452s
sys	0m0.060s

Testing mazefun under Femtolisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/Femtolisp-prelude.scm
Compiling...
femtolisp_comp /tmp/larcenous/Femtolisp/mazefun.scm /tmp/larcenous/Femtolisp/mazefun.scm
Running...
Running mazefun:11:11:10000
Elapsed time: 28.3685660362243652 seconds (28.3689999999999998) for mazefun:11:11:10000
+!CSVLINE!+femtolisp-unknown,mazefun:11:11:10000,28.3685660362243652

real	0m28.388s
user	0m28.314s
sys	0m0.047s

Testing nqueens under Femtolisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/Femtolisp-prelude.scm
Compiling...
femtolisp_comp /tmp/larcenous/Femtolisp/nqueens.scm /tmp/larcenous/Femtolisp/nqueens.scm
Running...
Running nqueens:13:10
Elapsed time: 64.926738977432251 seconds (64.9270000000000067) for nqueens:13:10
+!CSVLINE!+femtolisp-unknown,nqueens:13:10,64.926738977432251

real	1m4.944s
user	1m4.753s
sys	0m0.121s

Testing paraffins under Femtolisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/Femtolisp-prelude.scm
Compiling...
femtolisp_comp /tmp/larcenous/Femtolisp/paraffins.scm /tmp/larcenous/Femtolisp/paraffins.scm
Running...
Running paraffins:23:10
Elapsed time: 5.9173998832702637 seconds (5.9169999999999998) for paraffins:23:10
+!CSVLINE!+femtolisp-unknown,paraffins:23:10,5.9173998832702637

real	0m6.032s
user	0m5.277s
sys	0m0.748s

Testing parsing under Femtolisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/Femtolisp-prelude.scm
Compiling...
femtolisp_comp /tmp/larcenous/Femtolisp/parsing.scm /tmp/larcenous/Femtolisp/parsing.scm
Running...
Running parsing:2500
eval: variable string-set! has no value
in file /tmp/larcenous/Femtolisp/parsing.scm
#0 (parse-string/lambda/lambda/lambda/lambda/lambda/lambda/lambda/lambda/lambda/lambda/lambda/lambda/lambda/lambda/lambda/lambda/lambda/lambda/consumechar)
#1 (parse-string/lambda/lambda/lambda/lambda/lambda/lambda/lambda/lambda/lambda/lambda/lambda/lambda/lambda/lambda/lambda/lambda/lambda/lambda/state0/lambda
 #\;)
#2 (parse-string/lambda/lambda/lambda/lambda/lambda/lambda/lambda/lambda/lambda/lambda/lambda/lambda/lambda/lambda/lambda/lambda/lambda/lambda/parse-datum)
#3 (parse-string/lambda/lambda/lambda/lambda/lambda/lambda/lambda/lambda/lambda/lambda/lambda/lambda/lambda/lambda/lambda/lambda/lambda/lambda/lambda
 #0=#fn("8000r2|c0\x8240};~i1[30|42;" [eof] [#0#
					     #1=[#fn("7000r0c0q]31i0m30312c1qi0m3041;" [#fn("6000r1c0qm02|;" [#fn("7000r1e0|316F0i1n302`o602~i1m3041;^;" [char-whitespace?])])
  #fn("8000r1e0|iA0326:0i0lc141;\x7f|41;" [char=? eof])] #1# scanner0)
						 #fn("7000r1c0q|41;" [#fn("8000r1|c0=6@0i1n302i1lc141;|c2=6@0i1n302i1lc341;|c4=6@0i1n302i1lc541;|c6=6@0i1n302i1lc741;|c8=6C0i1n302i1Ni1m3041;e9|c:326C0i1n302i1Mi1m3041;e9|c;326C0i1n302i1Li1m3041;|c<=6C0i1n302i1Ai1m3041;e9|c=326C0i1n302i1?i1m3041;|c>=6C0i1n302i1>i1m3041;|c?=6C0i1n302i13i1m3041;|c@=6C0i1n302i12i1m3041;eA~316C0i1n302i1Oi1m3041;i1ki?041;" [#\`
  backquote #\' quote #\) rparen #\( lparen #\; memv (#\+
						      #\-)
  (#\0
   #\1 #\2 #\3
   #\4 #\5 #\6
   #\7 #\8 #\9) #\. (#\a
		     #\b #\c #\d
		     #\e #\f #\g
		     #\h #\i #\j
		     #\k #\l #\m
		     #\n #\o #\p
		     #\q #\r #\s
		     #\t #\u #\v
		     #\w #\x #\y
		     #\z #\A #\B
		     #\C #\D #\E
		     #\F #\G #\H
		     #\I #\J #\K
		     #\L #\M #\N
		     #\O #\P #\Q
		     #\R #\S #\T
		     #\U #\V #\W
		     #\X #\Y #\Z
		     #\! #\$ #\%
		     #\& #\* #\/
		     #\: #\< #\=
		     #\> #\? #\^
		     #\_ #\~) #\# #\" #\, char-whitespace?])] #1# state0)
						 #fn("7000r1c0q|41;" [#fn("7000r1|c0=6@0i1n302i1lc141;i1lc241;" [#\@
  splicing comma])] #1# state1) #fn("7000r1c0q|41;" [#fn("7000r1|c0=6@0i1n302i1lc141;i1g~316C0i1n302i13i1m3041;i1ki?041;" [#\"
  string])] #1# state2) #fn("7000r1c0q|41;" [#fn("7000r1|c0=6C0i1n302i19i1m3041;i1ki?041;" [#\n])] #1# state3)
						 #fn("7000r1c0q|41;" [#fn("7000r1|c0=6C0i1n302i14i1m3041;i1ki?041;" [#\i])] #1# state4)
						 #fn("7000r1c0q|41;" [#fn("7000r1|c0=6C0i1n302i15i1m3041;i1ki?041;" [#\l])] #1# state5)
						 #fn("7000r1c0q|41;" [#fn("7000r1|c0=6C0i1n302i16i1m3041;i1ki?041;" [#\w])] #1# state6)
						 #fn("7000r1c0q|41;" [#fn("7000r1|c0=6C0i1n302i17i1m3041;i1ki?041;" [#\e])] #1# state7)
						 #fn("7000r1c0q|41;" [#fn("7000r1|c0=6@0i1n302i1lc141;i1ki?041;" [#\e
  character])] #1# state8) #fn("7000r1c0q|41;" [#fn("7000r1|c0=6C0i1n302i19i1m3041;i1ki?041;" [#\c])] #1# state9)
						 #fn("7000r1c0q|41;" [#fn("7000r1|c0=6C0i1n302i1:i1m3041;i1ki?041;" [#\a])] #1# state10)
						 #fn("7000r1c0q|41;" [#fn("7000r1|c0=6C0i1n302i1;i1m3041;i1ki?041;" [#\p])] #1# state11)
						 #fn("7000r1c0q|41;" [#fn("7000r1|c0=6C0i1n302i1<i1m3041;|c1=6C0i1n302i18i1m3041;e2~316@0i1n302i1lc341;i1ki?041;" [#\s
  #\n char? character])] #1# state12) #fn("7000r1c0q|41;" [#fn("8000r1|c0=6@0i1n302i1lc141;e2|c3326@0i1n302i1lc441;|c5=6C0i1n302i1=i1m3041;i1ki?041;" [#\(
  vecstart memv (#\t
		 #\f) boolean #\\])] #1# state13)
						 #fn("7000r1c0q|41;" [#fn("8000r1e0|c1326C0i1n302i1?i1m3041;i1lc241;" [memv
  (#\a
   #\b #\c #\d
   #\e #\f #\g
   #\h #\i #\j
   #\k #\l #\m
   #\n #\o #\p
   #\q #\r #\s
   #\t #\u #\v
   #\w #\x #\y
   #\z #\A #\B
   #\C #\D #\E
   #\F #\G #\H
   #\I #\J #\K
   #\L #\M #\N
   #\O #\P #\Q
   #\R #\S #\T
   #\U #\V #\W
   #\X #\Y #\Z
   #\! #\$ #\%
   #\& #\* #\/
   #\: #\< #\=
   #\> #\? #\^
   #\_ #\~ #\0
   #\1 #\2 #\3
   #\4 #\5 #\6
   #\7 #\8 #\9
   #\+ #\- #\.
   #\@) id])] #1# state14) #fn("7000r1c0q|41;" [#fn("7000r1|c0=6@0i1n302i1lc141;i1ki?041;" [#\.
  id])] #1# state15) #fn("7000r1c0q|41;" [#fn("8000r1e0|c1326C0i1n302i1Ci1m3041;|c2=6C0i1n302i1@i1m3041;i1lc341;" [memv
  (#\0
   #\1 #\2 #\3
   #\4 #\5 #\6
   #\7 #\8 #\9) #\. period])] #1# state16)
						 #fn("7000r1c0q|41;" [#fn("8000r1e0|c1326C0i1n302i1Ci1m3041;i1ki?041;" [memv
  (#\0
   #\1 #\2 #\3
   #\4 #\5 #\6
   #\7 #\8 #\9)])] #1# state17) #fn("7000r1c0q|41;" [#fn("8000r1e0|c1326C0i1n302i1Gi1m3041;|c2=6C0i1n302i1Di1m3041;e0|c3326C0i1n302i1Ci1m3041;i1lc441;" [memv
  (#\e
   #\s #\f #\d
   #\l) #\# (#\0
	     #\1 #\2 #\3
	     #\4 #\5 #\6
	     #\7 #\8 #\9) number])] #1# state18)
						 #fn("7000r1c0q|41;" [#fn("8000r1e0|c1326C0i1n302i1Gi1m3041;|c2=6C0i1n302i1Di1m3041;i1lc341;" [memv
  (#\e
   #\s #\f #\d
   #\l) #\# number])] #1# state19) #fn("7000r1c0q|41;" [#fn("8000r1e0|c1326C0i1n302i1Ei1m3041;i1lc241;" [memv
  (#\0
   #\1 #\2 #\3
   #\4 #\5 #\6
   #\7 #\8 #\9) number])] #1# state20) #fn("7000r1c0q|41;" [#fn("8000r1e0|c1326C0i1n302i1Ei1m3041;i1ki?041;" [memv
  (#\0
   #\1 #\2 #\3
   #\4 #\5 #\6
   #\7 #\8 #\9)])] #1# state21) #fn("7000r1c0q|41;" [#fn("8000r1e0|c1326C0i1n302i1Fi1m3041;e0|c2326C0i1n302i1Ei1m3041;i1ki?041;" [memv
  (#\+
   #\-) (#\0
	 #\1 #\2 #\3
	 #\4 #\5 #\6
	 #\7 #\8 #\9)])] #1# state22) #fn("7000r1c0q|41;" [#fn("7000r1|c0=6C0i1n302i1Hi1m3041;i1lc141;" [#\#
  number])] #1# state23) #fn("7000r1c0q|41;" [#fn("8000r1e0|c1326C0i1n302i1Ii1m3041;|c2=6C0i1n302i1Hi1m3041;i1lc341;" [memv
  (#\0
   #\1 #\2 #\3
   #\4 #\5 #\6
   #\7 #\8 #\9) #\# number])] #1# state24)
						 #fn("7000r1c0q|41;" [#fn("8000r1e0|c1326C0i1n302i1Ii1m3041;i1ki?041;" [memv
  (#\0
   #\1 #\2 #\3
   #\4 #\5 #\6
   #\7 #\8 #\9)])] #1# state25) #fn("7000r1c0q|41;" [#fn("8000r1|c0=6C0i1n302i1Ki1m3041;|c1=6C0i1n302i1Ji1m3041;e2|c3326C0i1n302i1Gi1m3041;|c4=6C0i1n302i1Di1m3041;i1lc541;" [#\#
  #\/ memv (#\e
	    #\s #\f #\d
	    #\l) #\. number])] #1# state26)
						 #fn("7000r1c0q|41;" [#fn("8000r1e0|c1326C0i1n302i1Li1m3041;|c2=6C0i1n302i1Ki1m3041;|c3=6C0i1n302i1Ji1m3041;e0|c4326C0i1n302i1Gi1m3041;|c5=6C0i1n302i1Ci1m3041;i1lc641;" [memv
  (#\0
   #\1 #\2 #\3
   #\4 #\5 #\6
   #\7 #\8 #\9) #\# #\/ (#\e
			 #\s #\f #\d
			 #\l) #\. number])] #1# state27)
						 #fn("7000r1c0q|41;" [#fn("8000r1e0|c1326C0i1n302i1Li1m3041;|c2=6C0i1n302i1Bi1m3041;i1lc341;" [memv
  (#\0
   #\1 #\2 #\3
   #\4 #\5 #\6
   #\7 #\8 #\9) #\. id])] #1# state28) #fn("7000r1c0q|41;" [#fn("7000r1|c0=6H0i1n302`o602i11i1m3041;i1h~316C0i1n302i1Ni1m3041;i1ki?041;" [#\linefeed])] #1# state29)
						 #fn("7000r1c0q|41;" [#fn("7000r1e0~316C0i1n302i1Oi1m3041;`o602i11i1m3041;" [char-whitespace?])] #1# state30)
						 #fn("7000r1c0q|41;" [#fn("7000r1`o602i11i1m3041;" [])] #1# state31)
						 #fn("7000r1c0q|41;" [#fn("7000r1i1lc041;" [id])] #1# state32)
						 #fn("7000r1c0q|41;" [#fn("7000r1i1lc041;" [boolean])] #1# state33)
						 #fn("7000r1c0q|41;" [#fn("7000r1i1lc041;" [character])] #1# state34)
						 #fn("7000r1c0q|41;" [#fn("7000r1i1lc041;" [vecstart])] #1# state35)
						 #fn("7000r1c0q|41;" [#fn("7000r1i1lc041;" [string])] #1# state36)
						 #fn("7000r1c0q|41;" [#fn("7000r1i1lc041;" [lparen])] #1# state37)
						 #fn("7000r1c0q|41;" [#fn("7000r1i1lc041;" [rparen])] #1# state38)
						 #fn("7000r1c0q|41;" [#fn("7000r1i1lc041;" [quote])] #1# state39)
						 #fn("7000r1c0q|41;" [#fn("7000r1i1lc041;" [backquote])] #1# state40)
						 #fn("7000r1c0q|41;" [#fn("7000r1i1lc041;" [splicing])] #1# state41)
						 #fn("7000r0c0qi0i3041;" [#fn("8000r1c0|c1326=0c2qi0^3041;c0|c3326=0c4qi0\\3041;i0|c5c642;" [#fn(memq)
  (splicing comma backquote quote lparen vecstart)
  #fn("7000r1i1p|41;" []) (boolean number character string id)
  #fn("7000r1i1p|41;" []) <datum> (backquote boolean character comma id lparen
				   number quote splicing string vecstart)])] #1# parse-datum)
						 #fn("7000r0c0qi0i3041;" [#fn("8000r1|c0=6=0c1qi0]3041;|c2=6>0i0j302i0u40;|c3=6>0i0j302i0s40;|c4=6>0i0j302i0t40;|c5=6>0i0j302i0r40;i0|c6c742;" [id
  #fn("7000r1i1p|41;" []) string character number boolean <simple-datum> (boolean
  character id number string)])] #1# parse-simple-datum)
						 #fn("7000r0c0qi0i3041;" [#fn("8000r1|c0=6>0i0j302i0v40;i0|c1c242;" [id
  <symbol> (id)])] #1# parse-symbol) #fn("7000r0c0qi0i3041;" [#fn("8000r1|c0=6=0c1qi0e3041;c2|c3326=0c4qi0_3041;i0|c5c642;" [vecstart
  #fn("7000r1i1p|41;" []) #fn(memq) (lparen quote backquote comma splicing)
  #fn("7000r1i1p|41;" []) <compound-datum> (backquote comma lparen quote
						      splicing vecstart)])] #1# parse-compound-datum)
						 #fn("7000r0c0qi0i3041;" [#fn("8000r1c0|c1326=0c2qi0c3041;|c3=6C0i0j302c4qi0`3041;i0|c5c642;" [#fn(memq)
  (splicing comma backquote quote) #fn("7000r1i1p|41;" []) lparen #fn("7000r1i1p|41;" [])
  <list> (backquote comma lparen quote splicing)])] #1# parse-list)
						 #fn("7000r0c0qi0i3041;" [#fn("8000r1c0|c1326=0c2qi0[3041;|c3=6>0i0j302i0o40;i0|c4c542;" [#fn(memq)
  (id string character number boolean vecstart lparen quote backquote comma
   splicing) #fn("7000r1c0qi1a3041;" [#fn("7000r1~|K;" [])]) rparen <list2> (backquote
  boolean character comma id lparen number quote rparen splicing string
  vecstart)])] #1# parse-list2) #fn("7000r0c0qi0i3041;" [#fn("8000r1c0|c1326=0c2qi0f3041;i0|c3c442;" [#fn(memq)
  (rparen period splicing comma backquote quote lparen vecstart boolean number
   character string id) #fn("7000r1c0qi1b3041;" [#fn("8000r1i2w~|42;" [])])
  <list3> (backquote boolean character comma id lparen number period quote
	   rparen splicing string vecstart)])] #1# parse-list3)
						 #fn("7000r0c0qi0i3041;" [#fn("8000r1|c0=6C0i0j302c1qi0[3041;|c2=6>0i0j302i0o40;i0|c3c442;" [period
  #fn("8000r1i1i30c0\x82?0i1j302i1p|41;i1|c1c242;" [rparen <list4> (rparen)])
  rparen <list4> (period rparen)])] #1# parse-list4)
						 #fn("7000r0c0qi0i3041;" [#fn("8000r1c0|c1326=0c2qi0d3041;i0|c3c442;" [#fn(memq)
  (quote backquote comma splicing) #fn("7000r1c0qi1[3041;" [#fn("7000r1~|L2;" [])])
  <abbreviation> (backquote comma quote splicing)])] #1# parse-abbreviation)
						 #fn("7000r0c0qi0i3041;" [#fn("8000r1|c0=6>0i0j302i0z40;|c1=6>0i0j302i0{40;|c2=6>0i0j302i0x40;|c3=6>0i0j302i0y40;i0|c4c542;" [splicing
  comma backquote quote <abbrev-prefix> (backquote comma quote splicing)])] #1# parse-abbrev-prefix)
						 #fn("7000r0c0qi0i3041;" [#fn("8000r1|c0=6C0i0j302c1qi0f3041;i0|c2c342;" [vecstart
  #fn("8000r1i1i30c0\x82?0i1j302i1q|41;i1|c1c242;" [rparen <vector> (rparen)])
  <vector> (vecstart)])] #1# parse-vector)
						 #fn("7000r0c0qi0i3041;" [#fn("8000r1c0|c1326=0c2qi0[3041;c0|c332680i0o40;i0|c4c542;" [#fn(memq)
  (id string character number boolean vecstart lparen quote backquote comma
   splicing) #fn("7000r1c0qi1f3041;" [#fn("7000r1~|K;" [])]) (rparen period)
  <data> (backquote boolean character comma id lparen number period quote
	  rparen splicing string vecstart)])] #1# parse-data)
						 #fn("8000r1e0|c132@;" [char=?
  #\"] isnotdoublequote?) #fn("8000r1e0|c132@;" [char=? #\linefeed] isnotnewline?)
						 #fn("6000r0i;0660i<0;`o502~40;" [] #1# next-token)
						 #fn("6000r0^o;0;" [] #1# consume-token!)
						 #fn("7000r1c0q]41;" [#fn("=000r1~i@0W670c05N0~i?0W670c15A0~i>0W670c2540c3m02e4^e5c6|32i90332^o<02^o402i1i40;" ["Amazingly long token"
  "in line " "Bug in lexical analyzer (generated)"
  "Bug in lexical analyzer" error string-append "Lexical Error: "])] #1# scannererror)
						 #fn("9000r1c0|c1326C0e2i60`i5033o:0530^2|o<02]o;02|;" [#fn(memq)
  (boolean character id number string) substring] #1# accept)
						 #fn("8000r0i30660i40;i20i10X6K0e0iB0i2032o402i20awo20580iA0o402]o302^2i0m40;" [string-ref] #1# scanchar)
						 #fn(";000r0i30660^570i0m302i50i@0X6g0^o302e0i40c1326=0i80awo80530^2e2i60i50i40332i50awo50;i0ki?041;" [char=?
  #\linefeed string-set!] #1# consumechar)
						 #fn("6000r0_;" [] emptyList)
						 #fn("6000r1|;" [] identity)
						 #fn("7000r1e0|41;" [list->vector] list2vector)
						 #fn("8000r0e0i:0c142;" [string=?
  "#t"] #1# makeBool) #fn("8000r0e0i:0`42;" [string-ref] #1# makeChar)
						 #fn("7000r0c0i:041;" [#fn(string->number)] #1# makeNum)
						 #fn(":000r0e0i:0ae1i:031ax43;" [substring
  string-length] #1# makeString) #fn("7000r0e0i:041;" [string->symbol] #1# makeSym)
						 #fn("9000r2|\x8540};|Mi0w|N}32K;" [] #1# pseudoAppend)
						 #fn("6000r0c0;" [quasiquote] symBackquote)
						 #fn("6000r0c0;" [quote] symQuote)
						 #fn("6000r0c0;" [unquote-splicing] symSplicing)
						 #fn("6000r0c0;" [unquote] symUnquote)
						 #fn("8000r2c0i0i30\x8250c0;e1c2312e1i80312e1c3312c4|312e5302e1c6312e1i0i30312e1c7312e5302e1c8312c4}312e5302e9^c:42;" [eof
  display "Syntax error in line " " while parsing a " #fn(write) newline "  Encountered a "
  " while expecting something in" "  " error "Syntax error"] #1# parse-error)
						 [28300 [1 [#f [#\;
								
								    [0 [1 [0 [""
  [#f [z1 [3 [2 [1 [1024 [#\~ [";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n; File:         nboyer.sch\n; Description:  The Boyer benchmark\n; Author:       Bob Boyer\n; Created:      5-Apr-85\n; Modified:     10-Apr-85 14:52:20 (Bob Shaw)\n;               22-Jul-87 (Will Clinger)\n;               2-Jul-88 (Will Clinger -- distinguished #f and the empty list)\n;               13-Feb-97 (Will Clinger -- fixed bugs in unifier and rules,\n;                          rewrote to eliminate property lists, and added\n;                          a scaling parameter suggested by Bob Boyer)\n;               19-Mar-99 (Will Clinger -- cleaned up comments)\n;               4-Apr-01 (Will Clinger -- changed four 1- symbols to sub1)\n; Language:     Scheme\n; Status:       Public Domain\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n;;; NBOYER -- Logic programming benchmark, originally written by Bob Boyer.\n;;; Fairly CONS intensive.\n\n; Note:  The version of this benchmark that appears in Dick Gabriel's book\n; contained several bugs that are corrected here.  These bugs are discussed\n; by Henry Baker, \"The Boyer Benchmark Meets Linear Logic\", ACM SIGPLAN Lisp\n; Pointers 6(4), October-December 1993, pages 3-10.  The fixed bugs are:\n;\n;    The benchmark now returns a boolean result.\n;    FALSEP and TRUEP use TERM-MEMBER? rather than MEMV (which is called MEMBER\n;         in Common Lisp)\n;    ONE-WAY-UNIFY1 now treats numbers correctly\n;    ONE-WAY-UNIFY1-LST now treats empty lists correctly\n;    Rule 19 has been corrected (this rule was not touched by the original\n;         benchmark, but is used by this version)\n;    Rules 84 and 101 have been corrected (but these rules are never touched\n;         by the benchmark)\n;\n; According to Baker, these bug fixes make the benchmark 10-25% slower.\n; Please do not compare the timings from this benchmark against those of\n; the original benchmark.\n;\n; This version of the benchmark also prints the number of rewrites as a sanity\n; check, because it is too easy for a buggy version to return the correct\n; boolean result.  The correct number of rewrites is\n;\n;     n      rewrites       peak live storage (approximate, in bytes)\n;     0         95024           520,000\n;     1        591777         2,085,000\n;     2       1813975         5,175,000\n;     3       5375678\n;     4      16445406\n;     5      51507739\n\n; Nboyer is a 2-phase benchmark.\n; The first phase attaches lemmas to symbols.  This phase is not timed,\n; but it accounts for very little of the runtime anyway.\n; The second phase creates the test problem, and tests to see\n; whether it is implied by the lemmas.\n\n(define (nboyer-benchmark . args)\n  (let ((n (if (null? args) 0 (car args))))\n    (setup-boyer)\n    (run-benchmark (string-append \"nboyer\"\n                                  (number->string n))\n                   1\n                   (lambda () (test-boyer n))\n                   (lambda (rewrites)\n                     (and (number? rewrites)\n                          (case n\n                           ((0)  (= rewrites 95024))\n                           ((1)  (= rewrites 591777))\n                           ((2)  (= rewrites 1813975))\n                           ((3)  (= rewrites 5375678))\n                           ((4)  (= rewrites 16445406))\n                           ((5)  (= rewrites 51507739))\n                           ; If it works for n <= 5, assume it works.\n                           (else #t)))))))\n\n(define (setup-boyer) #t) ; assigned below\n(define (test-boyer) #t)  ; assigned below\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;\n; The first phase.\n;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n; In the original benchmark, it stored a list of lemmas on the\n; property lists of symbols.\n; In the new benchmark, it maintains an association list of\n; symbols and symbol-records, and stores the list of lemmas\n; within the symbol-records.\n\n(let ()\n  \n  (define (setup)\n    (add-lemma-lst\n     (quote ((equal (compile form)\n                    (reverse (codegen (optimize form)\n                                      (nil))))\n             (equal (eqp x y)\n                    (equal (fix x)\n                           (fix y)))\n             (equal (greaterp x y)\n                    (lessp y x))\n             (equal (lesseqp x y)\n                    (not (lessp y x)))\n             (equal (greatereqp x y)\n                    (not (lessp x y)))\n             (equal (boolean x)\n                    (or (equal x (t))\n                        (equal x (f))))\n             (equal (iff x y)\n                    (and (implies x y)\n                         (implies y x)))\n             (equal (even1 x)\n                    (if (zerop x)\n                        (t)\n                        (odd (sub1 x))))\n             (equal (countps- l pred)\n                    (countps-loop l pred (zero)))\n             (equal (fact- i)\n                    (fact-loop i 1))\n             (equal (reverse- x)\n                    (reverse-loop x (nil)))\n             (equal (divides x y)\n                    (zerop (remainder y x)))\n             (equal (assume-true var alist)\n                    (cons (cons var (t))\n                          alist))\n             (equal (assume-false var alist)\n                    (cons (cons var (f))\n                          alist))\n             (equal (tautology-checker x)\n                    (tautologyp (normalize x)\n                                (nil)))\n             (equal (falsify x)\n                    (falsify1 (normalize x)\n                              (nil)))\n             (equal (prime x)\n                    (and (not (zerop x))\n                         (not (equal x (add1 (zero))))\n                         (prime1 x (sub1 x))))\n             (equal (and p q)\n                    (if p (if q (t)\n                                (f))\n                          (f)))\n             (equal (or p q)\n                    (if p (t)\n                          (if q (t)\n                                (f))))\n             (equal (not p)\n                    (if p (f)\n                          (t)))\n             (equal (implies p q)\n                    (if p (if q (t)\n                                (f))\n                          (t)))\n             (equal (fix x)\n                    (if (numberp x)\n                        x\n                        (zero)))\n             (equal (if (if a b c)\n                        d e)\n                    (if a (if b d e)\n                          (if c d e)))\n             (equal (zerop x)\n                    (or (equal x (zero))\n                        (not (numberp x))))\n             (equal (plus (plus x y)\n                          z)\n                    (plus x (plus y z)))\n             (equal (equal (plus a b)\n                           (zero))\n                    (and (zerop a)\n                         (zerop b)))\n             (equal (difference x x)\n                    (zero))\n             (equal (equal (plus a b)\n                           (plus a c))\n                    (equal (fix b)\n                           (fix c)))\n             (equal (equal (zero)\n                           (difference x y))\n                    (not (lessp y x)))\n             (equal (equal x (difference x y))\n                    (and (numberp x)\n                         (or (equal x (zero))\n                             (zerop y))))\n             (equal (meaning (plus-tree (append x y))\n                             a)\n                    (plus (meaning (plus-tree x)\n                                   a)\n                          (meaning (plus-tree y)\n                                   a)))\n             (equal (meaning (plus-tree (plus-fringe x))\n                             a)\n                    (fix (meaning x a)))\n             (equal (append (append x y)\n                            z)\n                    (append x (append y z)))\n             (equal (reverse (append a b))\n                    (append (reverse b)\n                            (reverse a)))\n             (equal (times x (plus y z))\n                    (plus (times x y)\n                          (times x z)))\n             (equal (times (times x y)\n                           z)\n                    (times x (times y z)))\n             (equal (equal (times x y)\n                           (zero))\n                    (or (zerop x)\n                        (zerop y)))\n             (equal (exec (append x y)\n                          pds envrn)\n                    (exec y (exec x pds envrn)\n                            envrn))\n             (equal (mc-flatten x y)\n                    (append (flatten x)\n                            y))\n             (equal (member x (append a b))\n                    (or (member x a)\n                        (member x b)))\n             (equal (member x (reverse y))\n                    (member x y))\n             (equal (length (reverse x))\n                    (length x))\n             (equal (member a (intersect b c))\n                    (and (member a b)\n                         (member a c)))\n             (equal (nth (zero)\n                         i)\n                    (zero))\n             (equal (exp i (plus j k))\n                    (times (exp i j)\n                           (exp i k)))\n             (equal (exp i (times j k))\n                    (exp (exp i j)\n                         k))\n             (equal (reverse-loop x y)\n                    (append (reverse x)\n                            y))\n             (equal (reverse-loop x (nil))\n                    (reverse x))\n             (equal (count-list z (sort-lp x y))\n                    (plus (count-list z x)\n                          (count-list z y)))\n             (equal (equal (append a b)\n                           (append a c))\n                    (equal b c))\n             (equal (plus (remainder x y)\n                          (times y (quotient x y)))\n                    (fix x))\n             (equal (power-eval (big-plus1 l i base)\n                                base)\n                    (plus (power-eval l base)\n                          i))\n             (equal (power-eval (big-plus x y i base)\n                                base)\n                    (plus i (plus (power-eval x base)\n                                  (power-eval y base))))\n             (equal (remainder y 1)\n                    (zero))\n             (equal (lessp (remainder x y)\n                           y)\n                    (not (zerop y)))\n             (equal (remainder x x)\n                    (zero))\n             (equal (lessp (quotient i j)\n                           i)\n                    (and (not (zerop i))\n                         (or (zerop j)\n                             (not (equal j 1)))))\n             (equal (lessp (remainder x y)\n                           x)\n                    (and (not (zerop y))\n                         (not (zerop x))\n                         (not (lessp x y))))\n             (equal (power-eval (power-rep i base)\n                                base)\n                    (fix i))\n             (equal (power-eval (big-plus (power-rep i base)\n                                          (power-rep j base)\n                                          (zero)\n                                          base)\n                                base)\n                    (plus i j))\n             (equal (gcd x y)\n                    (gcd y x))\n             (equal (nth (append a b)\n                         i)\n                    (append (nth a i)\n                            (nth b (difference i (length a)))))\n             (equal (difference (plus x y)\n                                x)\n                    (fix y))\n             (equal (difference (plus y x)\n                                x)\n                    (fix y))\n             (equal (difference (plus x y)\n                                (plus x z))\n                    (difference y z))\n             (equal (times x (difference c w))\n                    (difference (times c x)\n                                (times w x)))\n             (equal (remainder (times x z)\n                               z)\n                    (zero))\n             (equal (difference (plus b (plus a c))\n                                a)\n                    (plus b c))\n             (equal (difference (add1 (plus y z))\n                                z)\n                    (add1 y))\n             (equal (lessp (plus x y)\n                           (plus x z))\n                    (lessp y z))\n             (equal (lessp (times x z)\n                           (times y z))\n                    (and (not (zerop z))\n                         (lessp x y)))\n             (equal (lessp y (plus x y))\n                    (not (zerop x)))\n             (equal (gcd (times x z)\n                         (times y z))\n                    (times z (gcd x y)))\n             (equal (value (normalize x)\n                           a)\n                    (value x a))\n             (equal (equal (flatten x)\n                           (cons y (nil)))\n                    (and (nlistp x)\n                         (equal x y)))\n             (equal (listp (gopher x))\n                    (listp x))\n             (equal (samefringe x y)\n                    (equal (flatten x)\n                           (flatten y)))\n             (equal (equal (greatest-factor x y)\n                           (zero))\n                    (and (or (zerop y)\n                             (equal y 1))\n                         (equal x (zero))))\n             (equal (equal (greatest-factor x y)\n                           1)\n                    (equal x 1))\n             (equal (numberp (greatest-factor x y))\n                    (not (and (or (zerop y)\n                                  (equal y 1))\n                              (not (numberp x)))))\n             (equal (times-list (append x y))\n                    (times (times-list x)\n                           (times-list y)))\n             (equal (prime-list (append x y))\n                    (and (prime-list x)\n                         (prime-list y)))\n             (equal (equal z (times w z))\n                    (and (numberp z)\n                         (or (equal z (zero))\n                             (equal w 1))))\n             (equal (greatereqp x y)\n                    (not (lessp x y)))\n             (equal (equal x (times x y))\n                    (or (equal x (zero))\n                        (and (numberp x)\n                             (equal y 1))))\n             (equal (remainder (times y x)\n                               y)\n                    (zero))\n             (equal (equal (times a b)\n                           1)\n                    (and (not (equal a (zero)))\n                         (not (equal b (zero)))\n                         (numberp a)\n                         (numberp b)\n                         (equal (sub1 a)\n                                (zero))\n                         (equal (sub1 b)\n                                (zero))))\n             (equal (lessp (length (delete x l))\n                           (length l))\n                    (member x l))\n             (equal (sort2 (delete x l))\n                    (delete x (sort2 l)))\n             (equal (dsort x)\n                    (sort2 x))\n             (equal (length (cons x1\n                                  (cons x2\n                                        (cons x3 (cons x4\n                                                       (cons x5\n                                                             (cons x6 x7)))))))\n                    (plus 6 (length x7)))\n             (equal (difference (add1 (add1 x))\n                                2)\n                    (fix x))\n             (equal (quotient (plus x (plus x y))\n                              2)\n                    (plus x (quotient y 2)))\n             (equal (sigma (zero)\n                           i)\n                    (quotient (times i (add1 i))\n                              2))\n             (equal (plus x (add1 y))\n                    (if (numberp y)\n                        (add1 (plus x y))\n                        (add1 x)))\n             (equal (equal (difference x y)\n                           (difference z y))\n                    (if (lessp x y)\n                        (not (lessp y z))\n                        (if (lessp z y)\n                            (not (lessp y x))\n                            (equal (fix x)\n                                   (fix z)))))\n             (equal (meaning (plus-tree (delete x y))\n                             a)\n                    (if (member x y)\n                        (difference (meaning (plus-tree y)\n                                             a)\n                                    (meaning x a))\n                        (meaning (plus-tree y)\n                                 a)))\n             (equal (times x (add1 y))\n                    (if (numberp y)\n                        (plus x (times x y))\n                        (fix x)))\n             (equal (nth (nil)\n                         i)\n                    (if (zerop i)\n                        (nil)\n                        (zero)))\n             (equal (last (append a b))\n                    (if (listp b)\n                        (last b)\n                        (if (listp a)\n                            (cons (car (last a))\n                                  b)\n                            b)))\n             (equal (equal (lessp x y)\n                           z)\n                    (if (lessp x y)\n                        (equal (t) z)\n                        (equal (f) z)))\n             (equal (assignment x (append a b))\n                    (if (assignedp x a)\n                        (assignment x a)\n                        (assignment x b)))\n             (equal (car (gopher x))\n                    (if (listp x)\n                        (car (flatten x))\n                        (zero)))\n             (equal (flatten (cdr (gopher x)))\n                    (if (listp x)\n                        (cdr (flatten x))\n                        (cons (zero)\n                              (nil))))\n             (equal (quotient (times y x)\n                              y)\n                    (if (zerop y)\n                        (zero)\n                        (fix x)))\n             (equal (get j (set i val mem))\n                    (if (eqp j i)\n                        val\n                        (get j mem)))))))\n  \n  (define (add-lemma-lst lst)\n    (cond ((null? lst)\n           #t)\n          (else (add-lemma (car lst))\n                (add-lemma-lst (cdr lst)))))\n  \n  (define (add-lemma term)\n    (cond ((and (pair? term)\n                (eq? (car term)\n                     (quote equal))\n                (pair? (cadr term)))\n           (put (car (cadr term))\n                (quote lemmas)\n                (cons\n                 (translate-term term)\n                 (get (car (cadr term)) (quote lemmas)))))\n          (else (error \"ADD-LEMMA did not like term:  \" term))))\n  \n  ; Translates a term by replacing its constructor symbols by symbol-records.\n  \n  (define (translate-term term)\n    (cond ((not (pair? term))\n           term)\n          (else (cons (symbol->symbol-record (car term))\n                      (translate-args (cdr term))))))\n  \n  (define (translate-args lst)\n    (cond ((null? lst)\n           '())\n          (else (cons (translate-term (car lst))\n                      (translate-args (cdr lst))))))\n  \n  ; For debugging only, so the use of MAP does not change\n  ; the first-order character of the benchmark.\n  \n  (define (untranslate-term term)\n    (cond ((not (pair? term))\n           term)\n          (else (cons (get-name (car term))\n                      (map untranslate-term (cdr term))))))\n  \n  ; A symbol-record is represented as a vector with two fields:\n  ; the symbol (for debugging) and\n  ; the list of lemmas associated with the symbol.\n  \n  (define (put sym property value)\n    (put-lemmas! (symbol->symbol-record sym) value))\n  \n  (define (get sym property)\n    (get-lemmas (symbol->symbol-record sym)))\n  \n  (define (symbol->symbol-record sym)\n    (let ((x (assq sym *symbol-records-alist*)))\n      (if x\n          (cdr x)\n          (let ((r (make-symbol-record sym)))\n            (set! *symbol-records-alist*\n                  (cons (cons sym r)\n                        *symbol-records-alist*))\n            r))))\n  \n  ; Association list of symbols and symbol-records.\n  \n  (define *symbol-records-alist* '())\n  \n  ; A symbol-record is represented as a vector with two fields:\n  ; the symbol (for debugging) and\n  ; the list of lemmas associated with the symbol.\n  \n  (define (make-symbol-record sym)\n    (vector sym '()))\n  \n  (define (put-lemmas! symbol-record lemmas)\n    (vector-set! symbol-record 1 lemmas))\n  \n  (define (get-lemmas symbol-record)\n    (vector-ref symbol-record 1))\n  \n  (define (get-name symbol-record)\n    (vector-ref symbol-record 0))\n  \n  (define (symbol-record-equal? r1 r2)\n    (eq? r1 r2))\n  \n  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n  ;\n  ; The second phase.\n  ;\n  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n  \n  (define (test n)\n    (let ((term\n           (apply-subst\n            (translate-alist\n             (quote ((x f (plus (plus a b)\n                                (plus c (zero))))\n                     (y f (times (times a b)\n                                 (plus c d)))\n                     (z f (reverse (append (append a b)\n                                           (nil))))\n                     (u equal (plus a b)\n                              (difference x y))\n                     (w lessp (remainder a b)\n                              (member a (length b))))))\n            (translate-term\n             (do ((term\n                   (quote (implies (and (implies x y)\n                                        (and (implies y z)\n                                             (and (implies z u)\n                                                  (implies u w))))\n                                   (implies x w)))\n                   (list 'or term '(f)))\n                  (n n (- n 1)))\n                 ((zero? n) term))))))\n    (tautp term)))\n  \n  (define (translate-alist alist)\n    (cond ((null? alist)\n           '())\n          (else (cons (cons (caar alist)\n                            (translate-term (cdar alist)))\n                      (translate-alist (cdr alist))))))\n  \n  (define (apply-subst alist term)\n    (cond ((not (pair? term))\n           (let ((temp-temp (assq term alist)))\n             (if temp-temp\n                 (cdr temp-temp)\n                 term)))\n          (else (cons (car term)\n                      (apply-subst-lst alist (cdr term))))))\n  \n  (define (apply-subst-lst alist lst)\n    (cond ((null? lst)\n           '())\n          (else (cons (apply-subst alist (car lst))\n                      (apply-subst-lst alist (cdr lst))))))\n  \n  (define (tautp x)\n    (tautologyp (rewrite x)\n                '() '()))\n  \n  (define (tautologyp x true-lst false-lst)\n    (cond ((truep x true-lst)\n           #t)\n          ((falsep x false-lst)\n           #f)\n          ((not (pair? x))\n           #f)\n          ((eq? (car x) if-constructor)\n           (cond ((truep (cadr x)\n                         true-lst)\n                  (tautologyp (caddr x)\n                              true-lst false-lst))\n                 ((falsep (cadr x)\n                          false-lst)\n                  (tautologyp (cadddr x)\n                              true-lst false-lst))\n                 (else (and (tautologyp (caddr x)\n                                        (cons (cadr x)\n                                              true-lst)\n                                        false-lst)\n                            (tautologyp (cadddr x)\n                                        true-lst\n                                        (cons (cadr x)\n                                              false-lst))))))\n          (else #f)))\n  \n  (define if-constructor '*) ; becomes (symbol->symbol-record 'if)\n  \n  (define rewrite-count 0) ; sanity check\n  \n  (define (rewrite term)\n    (set! rewrite-count (+ rewrite-count 1))\n    (cond ((not (pair? term))\n           term)\n          (else (rewrite-with-lemmas (cons (car term)\n                                           (rewrite-args (cdr term)))\n                                     (get-lemmas (car term))))))\n  \n  (define (rewrite-args lst)\n    (cond ((null? lst)\n           '())\n          (else (cons (rewrite (car lst))\n                      (rewrite-args (cdr lst))))))\n  \n  (define (rewrite-with-lemmas term lst)\n    (cond ((null? lst)\n           term)\n          ((one-way-unify term (cadr (car lst)))\n           (rewrite (apply-subst unify-subst (caddr (car lst)))))\n          (else (rewrite-with-lemmas term (cdr lst)))))\n  \n  (define unify-subst '*)\n  \n  (define (one-way-unify term1 term2)\n    (begin (set! unify-subst '())\n           (one-way-unify1 term1 term2)))\n  \n  (define (one-way-unify1 term1 term2)\n    (cond ((not (pair? term2))\n           (let ((temp-temp (assq term2 unify-subst)))\n             (cond (temp-temp\n                    (term-equal? term1 (cdr temp-temp)))\n                   ((number? term2)          ; This bug fix makes\n                    (equal? term1 term2))    ; nboyer 10-25% slower!\n                   (else\n                    (set! unify-subst (cons (cons term2 term1)\n                                            unify-subst))\n                    #t))))\n          ((not (pair? term1))\n           #f)\n          ((eq? (car term1)\n                (car term2))\n           (one-way-unify1-lst (cdr term1)\n                               (cdr term2)))\n          (else #f)))\n  \n  (define (one-way-unify1-lst lst1 lst2)\n    (cond ((null? lst1)\n           (null? lst2))\n          ((null? lst2)\n           #f)\n          ((one-way-unify1 (car lst1)\n                           (car lst2))\n           (one-way-unify1-lst (cdr lst1)\n                               (cdr lst2)))\n          (else #f)))\n  \n  (define (falsep x lst)\n    (or (term-equal? x false-term)\n        (term-member? x lst)))\n  \n  (define (truep x lst)\n    (or (term-equal? x true-term)\n        (term-member? x lst)))\n  \n  (define false-term '*)  ; becomes (translate-term '(f))\n  (define true-term '*)   ; becomes (translate-term '(t))\n  \n  ; The next two procedures were in the original benchmark\n  ; but were never used.\n  \n  (define (trans-of-implies n)\n    (translate-term\n     (list (quote implies)\n           (trans-of-implies1 n)\n           (list (quote implies)\n                 0 n))))\n  \n  (define (trans-of-implies1 n)\n    (cond ((equal? n 1)\n           (list (quote implies)\n                 0 1))\n          (else (list (quote and)\n                      (list (quote implies)\n                            (- n 1)\n                            n)\n                      (trans-of-implies1 (- n 1))))))\n  \n  ; Translated terms can be circular structures, which can't be\n  ; compared using Scheme's equal? and member procedures, so we\n  ; use these instead.\n  \n  (define (term-equal? x y)\n    (cond ((pair? x)\n           (and (pair? y)\n                (symbol-record-equal? (car x) (car y))\n                (term-args-equal? (cdr x) (cdr y))))\n          (else (equal? x y))))\n  \n  (define (term-args-equal? lst1 lst2)\n    (cond ((null? lst1)\n           (null? lst2))\n          ((null? lst2)\n           #f)\n          ((term-equal? (car lst1) (car lst2))\n           (term-args-equal? (cdr lst1) (cdr lst2)))\n          (else #f)))\n  \n  (define (term-member? x lst)\n    (cond ((null? lst)\n           #f)\n          ((term-equal? x (car lst))\n           #t)\n          (else (term-member? x (cdr lst)))))\n  \n  (set! setup-boyer\n        (lambda ()\n          (set! *symbol-records-alist* '())\n          (set! if-constructor (symbol->symbol-record 'if))\n          (set! false-term (translate-term '(f)))\n          (set! true-term  (translate-term '(t)))\n          (setup)))\n  \n  (set! test-boyer\n        (lambda (n)\n          (set! rewrite-count 0)\n          (let ((answer (test n)))\n            (write rewrite-count)\n            (display \" rewrites\")\n            (newline)\n            (if answer\n                rewrite-count\n                #f)))))\n\n(should return this list)\n"
			       ()]]]]]]]]]]]]]]]]]]]]))
#4 (parsing-benchmark/lambda/lambda/lambda/lambda/lambda
 0 #f)

real	0m0.041s
user	0m0.032s
sys	0m0.006s
+!CSVLINE!+femtolisp,parsing,CRASHED

Testing peval under Femtolisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/Femtolisp-prelude.scm
Compiling...
femtolisp_comp /tmp/larcenous/Femtolisp/peval.scm /tmp/larcenous/Femtolisp/peval.scm
Running...
Running peval:2000
Elapsed time: 29.88388991355896 seconds (29.8840000000000003) for peval:2000
+!CSVLINE!+femtolisp-unknown,peval:2000,29.88388991355896

real	0m29.908s
user	0m29.838s
sys	0m0.046s

Testing primes under Femtolisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/Femtolisp-prelude.scm
Compiling...
femtolisp_comp /tmp/larcenous/Femtolisp/primes.scm /tmp/larcenous/Femtolisp/primes.scm
Running...
Running primes:1000:10000
Elapsed time: 13.1410329341888428 seconds (13.141) for primes:1000:10000
+!CSVLINE!+femtolisp-unknown,primes:1000:10000,13.1410329341888428

real	0m13.158s
user	0m13.132s
sys	0m0.018s

Testing quicksort under Femtolisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/Femtolisp-prelude.scm
Compiling...
femtolisp_comp /tmp/larcenous/Femtolisp/quicksort.scm /tmp/larcenous/Femtolisp/quicksort.scm
Running...
Running quicksort:10000:2500
Elapsed time: 99.8780670166015625 seconds (99.8780000000000001) for quicksort:10000:2500
+!CSVLINE!+femtolisp-unknown,quicksort:10000:2500,99.8780670166015625

real	1m39.909s
user	1m39.450s
sys	0m0.277s

Testing scheme under Femtolisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/Femtolisp-prelude.scm
Compiling...
femtolisp_comp /tmp/larcenous/Femtolisp/scheme.scm /tmp/larcenous/Femtolisp/scheme.scm
Running...
eval: variable exp has no value
in file /tmp/larcenous/Femtolisp/scheme.scm
#0 (lambda)

real	0m0.034s
user	0m0.029s
sys	0m0.003s
+!CSVLINE!+femtolisp,scheme,CRASHED

Testing slatex under Femtolisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/Femtolisp-prelude.scm
Compiling...
femtolisp_comp /tmp/larcenous/Femtolisp/slatex.scm /tmp/larcenous/Femtolisp/slatex.scm
Running...
Running slatex:500
eval: variable char-alphabetic? has no value
in file /tmp/larcenous/Femtolisp/slatex.scm
#0 (lambda/lambda #\d)
#1 (lambda/lambda/lambda/lambda/lambda/lambda/lambda
 #\\)
#2 (lambda/lambda/lambda/lambda/lambda/lambda)
#3 (call-with-input-file/lambda
 #<io stream>)
#4 (lambda "inputs/slatex-data/test")

real	0m0.045s
user	0m0.040s
sys	0m0.002s
+!CSVLINE!+femtolisp,slatex,CRASHED

Testing chudnovsky under Femtolisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/Femtolisp-prelude.scm
Compiling...
femtolisp_comp /tmp/larcenous/Femtolisp/chudnovsky.scm /tmp/larcenous/Femtolisp/chudnovsky.scm
Running...
parse-error: read: overflow in numeric constant 314159265358979323846264338327950288419716939937510
in file /tmp/larcenous/Femtolisp/chudnovsky.scm

real	0m0.017s
user	0m0.013s
sys	0m0.002s
+!CSVLINE!+femtolisp,chudnovsky,CRASHED

Testing nboyer under Femtolisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/Femtolisp-prelude.scm
Compiling...
femtolisp_comp /tmp/larcenous/Femtolisp/nboyer.scm /tmp/larcenous/Femtolisp/nboyer.scm
Running...
Running nboyer:5:1
Elapsed time: 13.3663339614868164 seconds (13.3659999999999997) for nboyer:5:1
+!CSVLINE!+femtolisp-unknown,nboyer:5:1,13.3663339614868164

real	0m13.454s
user	0m12.886s
sys	0m0.498s

Testing sboyer under Femtolisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/Femtolisp-prelude.scm
Compiling...
femtolisp_comp /tmp/larcenous/Femtolisp/sboyer.scm /tmp/larcenous/Femtolisp/sboyer.scm
Running...
Running sboyer:5:1
Elapsed time: 15.3890819549560547 seconds (15.3889999999999993) for sboyer:5:1
+!CSVLINE!+femtolisp-unknown,sboyer:5:1,15.3890819549560547

real	0m15.443s
user	0m15.048s
sys	0m0.320s

Testing gcbench under Femtolisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/Femtolisp-prelude.scm
Compiling...
femtolisp_comp /tmp/larcenous/Femtolisp/gcbench.scm /tmp/larcenous/Femtolisp/gcbench.scm
Running...
The garbage collector should touch about 128 megabytes of heap storage.
The use of more or less memory will skew the results.
Running gcbench:20:1
eval: variable define-record-type has no value
in file /tmp/larcenous/Femtolisp/gcbench.scm
#0 (gcbench/lambda/lambda/lambda/lambda/lambda
 18)

real	0m0.020s
user	0m0.015s
sys	0m0.002s
+!CSVLINE!+femtolisp,gcbench,CRASHED

Testing mperm under Femtolisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/Femtolisp-prelude.scm
Compiling...
femtolisp_comp /tmp/larcenous/Femtolisp/mperm.scm /tmp/larcenous/Femtolisp/mperm.scm
Running...
arg-error: apply: too many arguments
in file /tmp/larcenous/Femtolisp/mperm.scm
#0 (<= 0 1 2)

real	0m0.019s
user	0m0.015s
sys	0m0.002s
+!CSVLINE!+femtolisp,mperm,CRASHED

Testing equal under Femtolisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/Femtolisp-prelude.scm
Compiling...
femtolisp_comp /tmp/larcenous/Femtolisp/equal.scm /tmp/larcenous/Femtolisp/equal.scm
Running...
Running equal:100:100:8:1000:2000:5000
./bench: line 688: 16446 Cputime limit exceeded: 24  "${FEMTOLISP}" "$1" < "$2"

real	5m1.559s
user	4m58.381s
sys	0m1.872s
+!CSVLINE!+femtolisp,equal,CRASHED

Testing bv2string under Femtolisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/Femtolisp-prelude.scm
Compiling...
femtolisp_comp /tmp/larcenous/Femtolisp/bv2string.scm /tmp/larcenous/Femtolisp/bv2string.scm
Running...
Running bv2string:1000:1000:100
eval: variable make-bytevector has no value
in file /tmp/larcenous/Femtolisp/bv2string.scm
#0 (string-bytevector-tests/lambda/random-bytevector/lambda
 7)
#1 (string-bytevector-tests/lambda
 #1=#fn("8000r3c0q}|3141;" [#fn("8000r1c0qi02|3141;" [#fn("8000r1c0qi11|3141;" [#fn(":000r1e0c1e2i10|32]43;" [test
  "round trip of string conversion" string=?])])])] test-roundtrip)
 #2=#fn("9000r1|c0X670~|41;i05e1|c032~c031|43;" [16384 quotient] #0=[#fn("9000r1e0\x7fi02T2i03wi04aw32o022e0e1i02b832|42;" [remainder
  quotient] #0#) 701 219896 743483 524287 #fn(":000r3e0|316:0e1}g242;i05e2|c332c3}T2~c331wg243;" [zero?
  remainder quotient 16384] #0#) ()])
 #3=#fn("8000r1c0q\x7f|3141;" [#fn("8000r1c0qe1|3141;" [#fn("7000r1c0q]41;" [#fn("7000r1c0qm02|`41;" [#fn(":000r1|i20W660i10;e0i10|i41c131332~|aw41;" [bytevector-u8-set!
  128])])]) make-bytevector])] #4=[#1# #2#
				   #3# #5=#fn("8000r1c0q\x7f|3141;" [#fn("8000r1c0qe1|31680|aw530|41;" [#fn("8000r1c0qe1|3141;" [#fn("7000r1c0q]41;" [#fn("7000r1c0qm02|`41;" [#fn(":000r1|i20W660i10;e0i10|i51c131332~|aw41;" [bytevector-u8-set!
  128])])]) make-bytevector]) odd?])] #4# random-bytevector2)
				   #6=#fn("8000r1c0q\x7f|3141;" [#fn(":000r1c0qb4e1|b4U231T241;" [#fn("8000r1c0qe1|3141;" [#fn("7000r1c0q]41;" [#fn("7000r1c0qm02|`41;" [#fn(":000r1|i20W660i10;e0i10|i51c131332~|aw41;" [bytevector-u8-set!
  128])])]) make-bytevector]) round])] #4# random-bytevector4)
				   [1000 1000 ()]] random-bytevector)
 #5# #6#)
#2 (main/lambda/lambda/lambda/lambda/lambda/lambda/lambda/lambda/lambda)

real	0m0.017s
user	0m0.013s
sys	0m0.002s
+!CSVLINE!+femtolisp,bv2string,CRASHED
