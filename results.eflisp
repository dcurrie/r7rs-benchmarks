
****************************
Benchmarking eflisp on Thu Aug 10 16:17:06 EDT 2017 under Darwin e-MacBookPro.local 16.7.0 Darwin Kernel Version 16.7.0: Thu Jun 15 17:36:27 PDT 2017; root:xnu-3789.70.16~2/RELEASE_X86_64 x86_64

Testing browse under eflisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/eflisp-prelude.scm
Compiling...
eflisp_comp /tmp/larcenous/eflisp/browse.scm /tmp/larcenous/eflisp/browse.scm
Running...
Running browse:2000
Elapsed time: 4.28407096862793 seconds (4.284) for browse:2000
+!CSVLINE!+eflisp-unknown,browse:2000,4.28407096862793

real	0m4.307s
user	0m4.292s
sys	0m0.007s

Testing deriv under eflisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/eflisp-prelude.scm
Compiling...
eflisp_comp /tmp/larcenous/eflisp/deriv.scm /tmp/larcenous/eflisp/deriv.scm
Running...
Running deriv:10000000
Elapsed time: 10.35128116607666 seconds (10.351) for deriv:10000000
+!CSVLINE!+eflisp-unknown,deriv:10000000,10.35128116607666

real	0m10.367s
user	0m10.350s
sys	0m0.010s

Testing destruc under eflisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/eflisp-prelude.scm
Compiling...
eflisp_comp /tmp/larcenous/eflisp/destruc.scm /tmp/larcenous/eflisp/destruc.scm
Running...
Running destruc:600:50:4000
Elapsed time: 26.25623416900635 seconds (26.256) for destruc:600:50:4000
+!CSVLINE!+eflisp-unknown,destruc:600:50:4000,26.25623416900635

real	0m26.272s
user	0m26.235s
sys	0m0.026s

Testing diviter under eflisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/eflisp-prelude.scm
Compiling...
eflisp_comp /tmp/larcenous/eflisp/diviter.scm /tmp/larcenous/eflisp/diviter.scm
Running...
Running diviter:1000:1000000
Elapsed time: 24.62545609474182 seconds (24.625) for diviter:1000:1000000
+!CSVLINE!+eflisp-unknown,diviter:1000:1000000,24.62545609474182

real	0m24.641s
user	0m24.602s
sys	0m0.028s

Testing divrec under eflisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/eflisp-prelude.scm
Compiling...
eflisp_comp /tmp/larcenous/eflisp/divrec.scm /tmp/larcenous/eflisp/divrec.scm
Running...
Running divrec:1000:1000000
Elapsed time: 22.02306413650513 seconds (22.023) for divrec:1000:1000000
+!CSVLINE!+eflisp-unknown,divrec:1000:1000000,22.02306413650513

real	0m22.038s
user	0m22.009s
sys	0m0.020s

Testing puzzle under eflisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/eflisp-prelude.scm
Compiling...
eflisp_comp /tmp/larcenous/eflisp/puzzle.scm /tmp/larcenous/eflisp/puzzle.scm
Running...
Running puzzle:1000
Elapsed time: 66.2351770401001 seconds (66.235) for puzzle:1000
+!CSVLINE!+eflisp-unknown,puzzle:1000,66.2351770401001

real	1m6.253s
user	1m5.261s
sys	0m0.972s

Testing triangl under eflisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/eflisp-prelude.scm
Compiling...
eflisp_comp /tmp/larcenous/eflisp/triangl.scm /tmp/larcenous/eflisp/triangl.scm
Running...
Running triangl:22:1:50
Elapsed time: 33.26211810112 seconds (33.262) for triangl:22:1:50
+!CSVLINE!+eflisp-unknown,triangl:22:1:50,33.26211810112

real	0m33.278s
user	0m33.228s
sys	0m0.035s

Testing tak under eflisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/eflisp-prelude.scm
Compiling...
eflisp_comp /tmp/larcenous/eflisp/tak.scm /tmp/larcenous/eflisp/tak.scm
Running...
Running tak:40:20:11:1
Elapsed time: 24.14940714836121 seconds (24.149) for tak:40:20:11:1
+!CSVLINE!+eflisp-unknown,tak:40:20:11:1,24.14940714836121

real	0m24.164s
user	0m24.130s
sys	0m0.025s

Testing takl under eflisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/eflisp-prelude.scm
Compiling...
eflisp_comp /tmp/larcenous/eflisp/takl.scm /tmp/larcenous/eflisp/takl.scm
Running...
Running takl:40:20:12:1
Elapsed time: 77.81075286865234 seconds (77.81100000000001) for takl:40:20:12:1
+!CSVLINE!+eflisp-unknown,takl:40:20:12:1,77.81075286865234

real	1m17.826s
user	1m17.732s
sys	0m0.069s

Testing ntakl under eflisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/eflisp-prelude.scm
Compiling...
eflisp_comp /tmp/larcenous/eflisp/ntakl.scm /tmp/larcenous/eflisp/ntakl.scm
Running...
Running ntakl:40:20:12:1
Elapsed time: 57.5842649936676 seconds (57.584) for ntakl:40:20:12:1
+!CSVLINE!+eflisp-unknown,ntakl:40:20:12:1,57.5842649936676

real	0m57.600s
user	0m57.507s
sys	0m0.064s

Testing cpstak under eflisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/eflisp-prelude.scm
Compiling...
eflisp_comp /tmp/larcenous/eflisp/cpstak.scm /tmp/larcenous/eflisp/cpstak.scm
Running...
Running cpstak:40:20:11:1
Elapsed time: 57.44455695152283 seconds (57.445) for cpstak:40:20:11:1
+!CSVLINE!+eflisp-unknown,cpstak:40:20:11:1,57.44455695152283

real	0m57.460s
user	0m57.285s
sys	0m0.104s

Testing ctak under eflisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/eflisp-prelude.scm
Compiling...
eflisp_comp /tmp/larcenous/eflisp/ctak.scm /tmp/larcenous/eflisp/ctak.scm
Running...
Running ctak:32:16:8:1
Elapsed time: 64.64295291900635 seconds (64.643) for ctak:32:16:8:1
+!CSVLINE!+eflisp-unknown,ctak:32:16:8:1,64.64295291900635

real	1m4.659s
user	0m26.265s
sys	0m38.325s

Testing fib under eflisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/eflisp-prelude.scm
Compiling...
eflisp_comp /tmp/larcenous/eflisp/fib.scm /tmp/larcenous/eflisp/fib.scm
Running...
Running fib:40:5
Elapsed time: 50.26582002639771 seconds (50.266) for fib:40:5
+!CSVLINE!+eflisp-unknown,fib:40:5,50.26582002639771

real	0m50.281s
user	0m50.170s
sys	0m0.060s

Testing fibc under eflisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/eflisp-prelude.scm
Compiling...
eflisp_comp /tmp/larcenous/eflisp/fibc.scm /tmp/larcenous/eflisp/fibc.scm
Running...
Running fibc:30:10
Elapsed time: 46.53879594802856 seconds (46.539) for fibc:30:10
+!CSVLINE!+eflisp-unknown,fibc:30:10,46.53879594802856

real	0m46.555s
user	0m23.169s
sys	0m23.318s

Testing fibfp under eflisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/eflisp-prelude.scm
Compiling...
eflisp_comp /tmp/larcenous/eflisp/fibfp.scm /tmp/larcenous/eflisp/fibfp.scm
Running...
Running fibfp:35:10
Elapsed time: 19.95034003257751 seconds (19.95) for fibfp:35:10
+!CSVLINE!+eflisp-unknown,fibfp:35:10,19.95034003257751

real	0m19.966s
user	0m19.916s
sys	0m0.033s

Testing sum under eflisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/eflisp-prelude.scm
Compiling...
eflisp_comp /tmp/larcenous/eflisp/sum.scm /tmp/larcenous/eflisp/sum.scm
Running...
Running sum:10000:200000
Elapsed time: 66.35523390769958 seconds (66.355) for sum:10000:200000
+!CSVLINE!+eflisp-unknown,sum:10000:200000,66.35523390769958

real	1m6.370s
user	1m6.202s
sys	0m0.103s

Testing sumfp under eflisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/eflisp-prelude.scm
Compiling...
eflisp_comp /tmp/larcenous/eflisp/sumfp.scm /tmp/larcenous/eflisp/sumfp.scm
Running...
Running sumfp:1000000:500
Elapsed time: 35.4381091594696 seconds (35.438) for sumfp:1000000:500
+!CSVLINE!+eflisp-unknown,sumfp:1000000:500,35.4381091594696

real	0m35.453s
user	0m35.335s
sys	0m0.074s

Testing fft under eflisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/eflisp-prelude.scm
Compiling...
eflisp_comp /tmp/larcenous/eflisp/fft.scm /tmp/larcenous/eflisp/fft.scm
Running...
Running fft:65536:100
Elapsed time: 20.88724994659424 seconds (20.887) for fft:65536:100
+!CSVLINE!+eflisp-unknown,fft:65536:100,20.88724994659424

real	0m20.905s
user	0m20.850s
sys	0m0.036s

Testing mbrot under eflisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/eflisp-prelude.scm
Compiling...
eflisp_comp /tmp/larcenous/eflisp/mbrot.scm /tmp/larcenous/eflisp/mbrot.scm
Running...
Running mbrot:75:1000
Elapsed time: 34.68400812149048 seconds (34.684) for mbrot:75:1000
+!CSVLINE!+eflisp-unknown,mbrot:75:1000,34.68400812149048

real	0m34.700s
user	0m34.541s
sys	0m0.095s

Testing mbrotZ under eflisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/eflisp-prelude.scm
Compiling...
eflisp_comp /tmp/larcenous/eflisp/mbrotZ.scm /tmp/larcenous/eflisp/mbrotZ.scm
Running...
Running mbrotZ:75:1000
eval: variable -1.0-0.5i has no value
in file /tmp/larcenous/eflisp/mbrotZ.scm
#0 (test 75)

real	0m0.017s
user	0m0.012s
sys	0m0.002s
+!CSVLINE!+eflisp,mbrotZ,CRASHED

Testing nucleic under eflisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/eflisp-prelude.scm
Compiling...
eflisp_comp /tmp/larcenous/eflisp/nucleic.scm /tmp/larcenous/eflisp/nucleic.scm
Running...
Running nucleic:50
eval: variable atan has no value
in file /tmp/larcenous/eflisp/nucleic.scm
#0 (math-atan2 -1.223 0.226)
#1 (pt-phi [-1.223 -0.8209999999999997 0.226])
#2 (tfo-align [6.54 5.12 -1.419] [5.317 4.299 -1.193]
	   [5.29 2.979 -0.826])
#3 (dgf-base [-0.9737 -0.1834 0.1352 -0.1779 0.2417 -0.9539 0.1422 -0.9529 -0.2679
	   0.4837 6.2649 8.028499999999999]
	  [23 [#1=1.0 #0=0.0 #0# #0# #1# #0# #0# #0# #1# #0# #0# #0#]
	   [[-0.0018 -0.8207 0.5714 0.2679 -0.5508999999999999 -0.7904 0.9634
	     0.1517 0.2209 0.0073 8.403 0.6232]
	    [-0.8143 -0.5091 -0.2788 -0.0433 -0.4257 0.9038 -0.5788 0.748 0.3246
	     1.5227 6.9114 -7.0765] [0.3822 -0.7477 0.543 0.4552 0.6637 0.5935
				     -0.8042 0.0203 0.5941 -6.9472 -4.1186 -5.9108]
	    [0.5639999999999999 0.8007 -0.2022 -0.8247 0.5587 -0.0878 0.0426 0.2162
	     0.9754 6.2694 -7.054 3.3316]
	    [2.893 8.538 -3.328] [1.698 7.696 -3.557]
	    [3.226 9.500999999999999 -4.402]
	    [4.159 7.604 -3.034] [5.455 8.212 -2.881]
	    [5.4546 8.8508 -1.9978] [5.7588 8.6625 -3.8259]
	    [6.497 7.148 -2.598] [7.4896 7.5919 -2.5214]
	    [6.163 6.486 -1.344] [6.54 5.12 -1.419]
	    [7.2763 4.9681 -0.6297] [7.194 4.883 -2.777]
	    [6.8667 3.9183 -3.1647] [8.586 5.091 -2.614]
	    [8.951000000000001 4.7626 -1.789]
	    [6.572 6.004 -3.609] [5.5636 5.7066 -3.8966]
	    [7.3801 6.3562 -4.735] [4.715 0.491 -0.136]
	    [6.349 2.173 -0.602] [5.953 0.965 -0.267]
	    [5.29 2.979 -0.826] [3.972 2.639 -0.733]
	    [3.677 1.316 -0.366] rA [2.428 0.845 -0.236]
	    [3.166 3.729 -1.036] [5.317 4.299 -1.193]
	    [4.01 4.678 -1.299] [6.689 0.1903 -0.0518]
	    [1.647 1.446 -0.404] [2.278 -0.108 -0.028]
	    [3.4421 5.5744 -1.5482]]]
	  [[-0.0359 -0.8071 0.5894 -0.2669 0.5760999999999999 0.7726 -0.9631 -0.1296
	    -0.2361 0.1584 8.343400000000001 0.5434]
	   [-0.8313 -0.4738 -0.2906 0.0649 0.4366 -0.8973 0.5521 -0.7648 -0.3322
	    1.6833 6.806 -7.0011] [0.3445 -0.763 0.547 -0.4628 -0.645 -0.6082
				   0.8168 -0.0436 -0.5753 -6.8179 -3.9778 -5.9887]
	   [0.5855 0.7931 -0.1682 0.8103 -0.579 0.0906 -0.0255 -0.1894 -0.9816
	    6.1203 -7.1051 3.1984] [2.676 -8.496 3.288]
	   [1.495 -7.623 3.477] [2.949 -9.464 4.374]
	   [3.973 -7.595 3.034] [5.243 -8.242000000000001 2.826]
	   [5.1974 -8.8497 1.9223] [5.5548 -8.7348 3.7469]
	   [6.314 -7.206 2.551] [7.2954 -7.6762 2.4898]
	   [6.014 -6.542 1.289] [6.419 -5.184 1.362]
	   [7.1608 -5.0495 0.5747] [7.076 -4.956 2.727]
	   [6.777 -3.9803 3.1099] [8.449999999999999 -5.193 2.581]
	   [8.8309 -4.8755 1.759] [6.406 -6.059 3.558]
	   [5.4021 -5.7313 3.8281] [7.157 -6.424 4.707]
	   [5.217 -4.326 1.169] [4.296 -2.256 0.629]
	   [5.433 -3.02 0.799] [2.993 -2.678 0.794]
	   [2.867 -4.063 1.183] [3.957 -4.83 1.355] rU [6.547 -2.556 0.629]
	   [2.054 -1.9 0.613] [4.43 -1.302 0.36]
	   [1.959 -4.457 1.325] [3.846 -5.786 1.624]])
#4 (wc-Dumas/lambda ([23 [#1=1.0 #0=0.0 #0# #0# #1# #0# #0# #0# #1# #0# #0# #0#]
		   [[-0.0018 -0.8207 0.5714 0.2679 -0.5508999999999999 -0.7904
		     0.9634 0.1517 0.2209 0.0073 8.403 0.6232]
		    [-0.8143 -0.5091 -0.2788 -0.0433 -0.4257 0.9038 -0.5788 0.748
		     0.3246 1.5227 6.9114 -7.0765]
		    [0.3822 -0.7477 0.543 0.4552 0.6637 0.5935 -0.8042 0.0203
		     0.5941 -6.9472 -4.1186 -5.9108]
		    [0.5639999999999999 0.8007 -0.2022 -0.8247 0.5587 -0.0878
		     0.0426 0.2162 0.9754 6.2694 -7.054 3.3316]
		    [2.893 8.538 -3.328] [1.698 7.696 -3.557]
		    [3.226 9.500999999999999 -4.402]
		    [4.159 7.604 -3.034] [5.455 8.212 -2.881]
		    [5.4546 8.8508 -1.9978]
		    [5.7588 8.6625 -3.8259]
		    [6.497 7.148 -2.598] [7.4896 7.5919 -2.5214]
		    [6.163 6.486 -1.344] [6.54 5.12 -1.419]
		    [7.2763 4.9681 -0.6297]
		    [7.194 4.883 -2.777] [6.8667 3.9183 -3.1647]
		    [8.586 5.091 -2.614] [8.951000000000001 4.7626 -1.789]
		    [6.572 6.004 -3.609] [5.5636 5.7066 -3.8966]
		    [7.3801 6.3562 -4.735]
		    [4.715 0.491 -0.136] [6.349 2.173 -0.602]
		    [5.953 0.965 -0.267] [5.29 2.979 -0.826]
		    [3.972 2.639 -0.733] [3.677 1.316 -0.366] rA [2.428 0.845
								  -0.236]
		    [3.166 3.729 -1.036] [5.317 4.299 -1.193]
		    [4.01 4.678 -1.299] [6.689 0.1903 -0.0518]
		    [1.647 1.446 -0.404] [2.278 -0.108 -0.028]
		    [3.4421 5.5744 -1.5482]]]))
#5 (search ([23 [#1=1.0 #0=0.0 #0# #0# #1# #0# #0# #0# #1# #0# #0# #0#]
	  #8=[[-0.0018 -0.8207 0.5714 0.2679 -0.5508999999999999 -0.7904 0.9634
	       0.1517 0.2209 0.0073 8.403 0.6232]
	      [-0.8143 -0.5091 -0.2788 -0.0433 -0.4257 0.9038 -0.5788 0.748 0.3246
	       1.5227 6.9114 -7.0765] [0.3822 -0.7477 0.543 0.4552 0.6637 0.5935
				       -0.8042 0.0203 0.5941 -6.9472 -4.1186 -5.9108]
	      [0.5639999999999999 0.8007 -0.2022 -0.8247 0.5587 -0.0878 0.0426
	       0.2162 0.9754 6.2694 -7.054 3.3316]
	      [2.893 8.538 -3.328] [1.698 7.696 -3.557]
	      [3.226 9.500999999999999 -4.402]
	      [4.159 7.604 -3.034] [5.455 8.212 -2.881]
	      [5.4546 8.8508 -1.9978] [5.7588 8.6625 -3.8259]
	      [6.497 7.148 -2.598] [7.4896 7.5919 -2.5214]
	      [6.163 6.486 -1.344] [6.54 5.12 -1.419]
	      [7.2763 4.9681 -0.6297] [7.194 4.883 -2.777]
	      [6.8667 3.9183 -3.1647] [8.586 5.091 -2.614]
	      [8.951000000000001 4.7626 -1.789]
	      [6.572 6.004 -3.609] [5.5636 5.7066 -3.8966]
	      [7.3801 6.3562 -4.735] [4.715 0.491 -0.136]
	      [6.349 2.173 -0.602] [5.953 0.965 -0.267]
	      [5.29 2.979 -0.826] [3.972 2.639 -0.733]
	      [3.677 1.316 -0.366] rA [2.428 0.845 -0.236]
	      [3.166 3.729 -1.036] [5.317 4.299 -1.193]
	      [4.01 4.678 -1.299] [6.689 0.1903 -0.0518]
	      [1.647 1.446 -0.404] [2.278 -0.108 -0.028]
	      [3.4421 5.5744 -1.5482]]])
	(#fn(#2=":000r1e0~|32e1e2g5\x7f33e3i2g6\x7f33L1;" #3=[get-var dgf-base
							      wc-Dumas-tfo
							      make-var] [23 #11=[[-0.0359
  -0.8071 0.5894 -0.2669 0.5760999999999999 0.7726 -0.9631 -0.1296 -0.2361 0.1584
  8.343400000000001 0.5434] [-0.8313 -0.4738 -0.2906 0.0649 0.4366 -0.8973 0.5521
			     -0.7648 -0.3322 1.6833 6.806 -7.0011]
  [0.3445 -0.763 0.547 -0.4628 -0.645 -0.6082 0.8168 -0.0436 -0.5753 -6.8179 -3.9778
   -5.9887] [0.5855 0.7931 -0.1682 0.8103 -0.579 0.0906 -0.0255 -0.1894 -0.9816
	     6.1203 -7.1051 3.1984] [2.676 -8.496 3.288]
  [1.495 -7.623 3.477] [2.949 -9.464 4.374]
  [3.973 -7.595 3.034] [5.243 -8.242000000000001 2.826]
  [5.1974 -8.8497 1.9223] [5.5548 -8.7348 3.7469]
  [6.314 -7.206 2.551] [7.2954 -7.6762 2.4898]
  [6.014 -6.542 1.289] [6.419 -5.184 1.362]
  [7.1608 -5.0495 0.5747] [7.076 -4.956 2.727]
  [6.777 -3.9803 3.1099] [8.449999999999999 -5.193 2.581]
  [8.8309 -4.8755 1.759] [6.406 -6.059 3.558]
  [5.4021 -5.7313 3.8281] [7.157 -6.424 4.707]
  [5.217 -4.326 1.169] [4.296 -2.256 0.629]
  [5.433 -3.02 0.799] [2.993 -2.678 0.794]
  [2.867 -4.063 1.183] [3.957 -4.83 1.355] rU [6.547 -2.556 0.629]
  [2.054 -1.9 0.613] [4.43 -1.302 0.36] [1.959 -4.457 1.325]
  [3.846 -5.786 1.624]] 8])
	 #fn(#4=":000r1e0~|32e1e2g5\x7f33e3i2g6\x7f33L1;" #5=[get-var dgf-base
							      helix3*-tfo
							      make-var] [23 #6=[[-0.0018
  -0.8207 0.5714 0.2679 -0.5508999999999999 -0.7904 0.9634 0.1517 0.2209 0.0073
  8.403 0.6232] [-0.8143 -0.5091 -0.2788 -0.0433 -0.4257 0.9038 -0.5788 0.748
		 0.3246 1.5227 6.9114 -7.0765]
  [0.3822 -0.7477 0.543 0.4552 0.6637 0.5935 -0.8042 0.0203 0.5941 -6.9472 -4.1186
   -5.9108] [0.5639999999999999 0.8007 -0.2022 -0.8247 0.5587 -0.0878 0.0426 0.2162
	     0.9754 6.2694 -7.054 3.3316]
  [2.893 8.538 -3.328] [1.698 7.696 -3.557]
  [3.226 9.500999999999999 -4.402] [4.159 7.604 -3.034]
  [5.455 8.212 -2.881] [5.4546 8.8508 -1.9978]
  [5.7588 8.6625 -3.8259] [6.497 7.148 -2.598]
  [7.4896 7.5919 -2.5214] [6.163 6.486 -1.344]
  [6.54 5.12 -1.419] [7.2763 4.9681 -0.6297]
  [7.194 4.883 -2.777] [6.8667 3.9183 -3.1647]
  [8.586 5.091 -2.614] [8.951000000000001 4.7626 -1.789]
  [6.572 6.004 -3.609] [5.5636 5.7066 -3.8966]
  [7.3801 6.3562 -4.735] [4.715 0.491 -0.136]
  [6.349 2.173 -0.602] [5.953 0.965 -0.267]
  [5.29 2.979 -0.826] [3.972 2.639 -0.733]
  [3.677 1.316 -0.366] rG [6.8426 0.0056 -0.0019]
  [3.166 3.729 -1.036] [5.317 4.299 -1.193]
  [4.01 4.678 -1.299] [2.428 0.845 -0.236]
  [4.6151 -0.4677 0.1305] [6.6463 -0.9463 0.2729]
  [7.817 0.2642 -0.064] [3.4421 5.5744 -1.5482]] 22])
	 #fn(#2# #3# [22 #7=[[-0.0359 -0.8071 0.5894 -0.2669 0.5760999999999999
			      0.7726 -0.9631 -0.1296 -0.2361 0.1584 8.343400000000001
			      0.5434] [-0.8313 -0.4738 -0.2906 0.0649 0.4366 -0.8973
				       0.5521 -0.7648 -0.3322 1.6833 6.806 -7.0011]
			     [0.3445 -0.763 0.547 -0.4628 -0.645 -0.6082 0.8168
			      -0.0436 -0.5753 -6.8179 -3.9778 -5.9887]
			     [0.5855 0.7931 -0.1682 0.8103 -0.579 0.0906 -0.0255
			      -0.1894 -0.9816 6.1203 -7.1051 3.1984]
			     [2.676 -8.496 3.288]
			     [1.495 -7.623 3.477]
			     [2.949 -9.464 4.374]
			     [3.973 -7.595 3.034]
			     [5.243 -8.242000000000001 2.826]
			     [5.1974 -8.8497 1.9223]
			     [5.5548 -8.7348 3.7469]
			     [6.314 -7.206 2.551]
			     [7.2954 -7.6762 2.4898]
			     [6.014 -6.542 1.289]
			     [6.419 -5.184 1.362]
			     [7.1608 -5.0495 0.5747]
			     [7.076 -4.956 2.727]
			     [6.777 -3.9803 3.1099]
			     [8.449999999999999 -5.193 2.581]
			     [8.8309 -4.8755 1.759]
			     [6.406 -6.059 3.558]
			     [5.4021 -5.7313 3.8281]
			     [7.157 -6.424 4.707]
			     [5.217 -4.326 1.169]
			     [4.296 -2.256 0.629]
			     [5.433 -3.02 0.799]
			     [2.993 -2.678 0.794]
			     [2.867 -4.063 1.183]
			     [3.957 -4.83 1.355] rC [2.0187 -1.8047 0.5874]
			     [6.547 -2.556 0.629]
			     [1.0684 -2.1236 0.7109]
			     [2.2344 -0.856 0.3162]
			     [1.8797 -4.4972 1.3404]
			     [3.8479 -5.8742 1.648]] 9])
	 #fn(#4# #5# [22 #6# 21]) #fn(#2# #3# [21 #7# 10])
	 #fn(#4# #5# [21 #7# 20]) #fn(#2# #3# [20 #6# 11])
	 #fn(#4# #5# [20 [[-0.0109 0.5907 0.8068 0.2217 -0.7853 0.578 0.9751 0.1852
			   -0.1224 -1.4225 -11.0956 -2.5217]
			  [-0.8313 -0.4738 -0.2906 0.0649 0.4366 -0.8973 0.5521
			   -0.7648 -0.3322 1.6833 6.806 -7.0011]
			  [0.3445 -0.763 0.547 -0.4628 -0.645 -0.6082 0.8168 -0.0436
			   -0.5753 -6.8179 -3.9778 -5.9887]
			  [0.5855 0.7931 -0.1682 0.8103 -0.579 0.0906 -0.0255
			   -0.1894 -0.9816 6.1203 -7.1051 3.1984]
			  [2.676 -8.496 3.288]
			  [1.495 -7.623 3.477]
			  [2.949 -9.464 4.374]
			  [3.973 -7.595 3.034]
			  [5.243 -8.242000000000001 2.826]
			  [5.1974 -8.8497 1.9223]
			  [5.5548 -8.7348 3.7469]
			  [6.314 -7.206 2.551]
			  [5.8744 -6.2116 2.4731]
			  [7.2798 -7.226 3.642]
			  [8.5733 -6.941 3.1329]
			  [8.9047 -6.0374 3.6446]
			  [8.4429 -6.6596 1.6327]
			  [9.288 -7.1071 1.1096]
			  [8.2502 -5.2799 1.4754]
			  [8.7676 -4.7284 2.0667]
			  [7.1642 -7.4416 1.3021]
			  [7.4125 -8.5002 1.226]
			  [6.516 -6.9772 0.1267]
			  [9.453099999999999 -8.1107 3.4087]
			  [11.5931 -9.0015 3.6357]
			  [10.8101 -7.895 3.3748]
			  [11.1439 -10.2744 3.9206]
			  [9.7056 -10.4026 3.9332]
			  [8.9192 -9.341900000000001 3.6833] rU [11.3013 -6.8063
								 3.1326]
			  [11.9431 -11.1876 4.1375]
			  [12.584 -8.8673 3.6158]
			  [9.289099999999999 -11.2898 4.1313]
			  [7.9263 -9.4537 3.6977]] 19])
	 #fn(#2# #3# [19 #8# 12]) #fn(#4# #5# [19 #7# 3])
	 #fn(#2# #3# [3 #6# 13]) #fn(#4# #5# [3 #7# 2])
	 #fn(#2# #3# [2 #6# 14]) #fn(#4# #5# [2 #7# 1])
	 #fn(#2# #3# [1 [[-0.2067 -0.0264 0.978 0.977 -0.0586 0.2049 0.0519 0.9979
			  0.0379 1.0331 -46.8078 -36.4742]
			 [-0.8643999999999999 -0.4956 -0.0851 -0.0427 0.2409 -0.9696
			  0.501 -0.8345 -0.2294 4.0167 54.5377 12.4779]
			 [0.3706 -0.6167 0.6945 -0.2867 -0.7872 -0.546 0.8834
			  0.0032 -0.4686 -52.902 18.6313 -0.6709000000000001]
			 [0.4155 0.9025 -0.1137 0.904 -0.4236 -0.0582 -0.1007
			  -0.0786 -0.9918 -7.6624 -25.208 49.5181]
			 [31.381 0.14 47.581]
			 [29.986 0.663 47.629]
			 [31.721 -0.646 48.809]
			 [32.494 1.254 47.274]
			 [32.161 2.237 46.256]
			 [31.2986 2.819 46.5812]
			 [32.098 1.7468 45.2845]
			 [33.3476 3.1959 46.1947]
			 [33.2668 3.8958 45.363]
			 [33.3799 3.9183 47.4216]
			 [34.6515 3.7222 48.0398]
			 [35.2947 4.5412 47.718]
			 [35.1756 2.4228 47.4827]
			 [34.6778 1.5937 47.9856]
			 [36.5631 2.2672 47.4798]
			 [37.0163 2.6579 48.2305]
			 [34.6953 2.5043 46.0448]
			 [34.5444 1.4917 45.6706]
			 [35.6679 3.3009 45.3487]
			 [37.4804 4.0914 52.2559]
			 [36.967 4.1312 49.9281]
			 [37.8045 4.2519 50.955]
			 [35.7171 3.8264 50.3222]
			 [35.2668 3.642 51.6115]
			 [36.2037 3.7829 52.6706] rG [39.0869 4.5552 50.7092]
			 [33.9075 3.3338 51.6102]
			 [34.6126 3.6358 49.5108]
			 [33.5805 3.3442 50.3425]
			 [35.9958 3.6512 53.8724]
			 [38.2106 4.2053 52.9295]
			 [39.8218 4.6863 51.3896]
			 [39.342 4.6857 49.7407]
			 [32.5194 3.107 50.2664]] 15])
	 #fn(#9="<000r1e0~|32e1e2e3e4g532e3e5g532e3e6g5323331c730g7c8g6g7\x7fp32g7\x8e1i2_42;" #10=[get-var
  tfo-inv-ortho tfo-align atom-pos nuc-O3* nuc-C3* nuc-C4* #fn(fn#err)
  #fn("@000r2|\x8540};|Me0e1g631~32e0e2g631~32e0e3g631~32\x7f|Ne4i2g7g633e4i2g8g633e4i2g9g633}KKK42;" [tfo-combine
  nuc-P-O3*-60-tfo nuc-P-O3*-180-tfo nuc-P-O3*-275-tfo make-var])] [15 16 ([[-0.0137
  -0.8012 0.5983000000000001 -0.2523 0.5817 0.7733 -0.9675 -0.1404 -0.2101 0.2031
  8.3874 0.4228] [-0.8313 -0.4738 -0.2906 0.0649 0.4366 -0.8973 0.5521 -0.7648
		  -0.3322 1.6833 6.806 -7.0011]
  [0.3445 -0.763 0.547 -0.4628 -0.645 -0.6082 0.8168 -0.0436 -0.5753 -6.8179 -3.9778
   -5.9887] [0.5855 0.7931 -0.1682 0.8103 -0.579 0.0906 -0.0255 -0.1894 -0.9816
	     6.1203 -7.1051 3.1984] [2.676 -8.496 3.288]
  [1.495 -7.623 3.477] [2.949 -9.464 4.374]
  [3.973 -7.595 3.034] [5.2416 -8.2422 2.8181]
  [5.205 -8.812799999999999 1.8901] [5.5368 -8.7738 3.7227]
  [6.3232 -7.2037 2.6002] [7.3048 -7.6757 2.5577]
  [6.0635 -6.5092 1.3456] [6.4697 -5.1547 1.4629]
  [7.2354 -5.0043 0.7018] [7.0856 -4.961 2.8521]
  [6.7777 -3.9935 3.2487] [8.4627 -5.1992 2.7423]
  [8.869300000000001 -4.8638 1.9399] [6.3877 -6.0809 3.6362]
  [5.377 -5.7562 3.8834] [7.1024 -6.4754 4.7985]
  [5.2764 -4.2883 1.2538] [4.3777 -2.2062 0.7229]
  [5.5069 -2.9779 0.9088000000000001] [3.0693 -2.6246 0.85]
  [2.9279 -4.0146 1.2149] [4.0101 -4.7892 1.4017] rU [6.6267 -2.5166 0.7728]
  [2.1383 -1.8396 0.6581] [4.5223 -1.2489 0.4716]
  [2.0151 -4.4065 1.329] [3.8886 -5.7486 1.6535]]
  [[0.5141 0.0246 0.8574000000000001 -0.5547 -0.7529 0.3542 0.6542 -0.6577 -0.3734
    -9.1111 -3.4598 -3.2939] [-0.8313 -0.4738 -0.2906 0.0649 0.4366 -0.8973 0.5521
			      -0.7648 -0.3322 1.6833 6.806 -7.0011]
   [0.3445 -0.763 0.547 -0.4628 -0.645 -0.6082 0.8168 -0.0436 -0.5753 -6.8179
    -3.9778 -5.9887] [0.5855 0.7931 -0.1682 0.8103 -0.579 0.0906 -0.0255 -0.1894
		      -0.9816 6.1203 -7.1051 3.1984]
   [2.676 -8.496 3.288] [1.495 -7.623 3.477]
   [2.949 -9.464 4.374] [3.973 -7.595 3.034]
   [4.3825 -6.6585 4.0489] [4.6841 -7.2019 4.9443]
   [3.6189 -5.8889 4.1625] [5.6255 -5.9175 3.5998]
   [5.8732 -5.1228 4.3034] [6.7337 -6.8605 3.5222]
   [7.5932 -6.4923 2.4548] [8.5661 -6.2983 2.9064]
   [7.0527 -5.2012 1.8322] [7.1627 -5.2525 0.749]
   [7.6666 -4.1249 2.488] [8.5944 -4.2543 2.6981]
   [5.5661 -5.3029 2.2009] [5.0841 -6.0018 1.5172]
   [4.9062 -4.0452 2.2042] [7.6298 -7.6136 1.4752]
   [8.6945 -8.704599999999999 -0.2857] [8.6943 -7.6514 0.6066]
   [7.7426 -9.698700000000001 -0.3801] [6.6642 -9.574199999999999 0.5722]
   [6.6391 -8.559200000000001 1.4526] rU [9.584 -6.8186 0.6136]
   [7.8505 -10.5925 -1.2223] [9.460100000000001 -8.7514 -0.9277]
   [5.9281 -10.2509 0.5782] [5.8831 -8.4931 2.1028]]
  [[-0.4993 0.0476 0.8651 0.8078 -0.3353 0.4847 0.3132 0.9409 0.129 6.2989 -5.2303
    -3.8577] [-0.8313 -0.4738 -0.2906 0.0649 0.4366 -0.8973 0.5521 -0.7648 -0.3322
	      1.6833 6.806 -7.0011] [0.3445 -0.763 0.547 -0.4628 -0.645 -0.6082
				     0.8168 -0.0436 -0.5753 -6.8179 -3.9778 -5.9887]
   [0.5855 0.7931 -0.1682 0.8103 -0.579 0.0906 -0.0255 -0.1894 -0.9816 6.1203
    -7.1051 3.1984] [2.676 -8.496 3.288] [1.495 -7.623 3.477]
   [2.949 -9.464 4.374] [3.973 -7.595 3.034]
   [3.9938 -6.7042 1.9023] [3.2332 -5.9343 2.0319]
   [3.9666 -7.2863 0.9812] [5.3098 -5.9546 1.8564]
   [5.3863 -5.3702 0.9395] [5.3851 -5.0642 3.0076]
   [6.7315 -4.9724 3.4462] [7.0033 -3.9202 3.3619]
   [7.5997 -5.8018 2.4948] [8.3627 -6.3254 3.0707]
   [8.041 -4.9501 1.4724] [8.2781 -4.0644 1.757]
   [6.5701 -6.8129 1.9714] [6.4186 -7.5809 2.7299]
   [6.9357 -7.3841 0.7235] [6.8024 -5.4718 4.8475]
   [7.9218 -5.57 6.8877] [7.8908 -5.0886 5.5944]
   [6.9789 -6.3827 7.4823] [5.8742 -6.7319 6.6202]
   [5.8182 -6.2769 5.357] rU [8.774699999999999 -4.3728 5.1568]
   [7.1154 -6.7509 8.6509] [8.705500000000001 -5.3037 7.4491]
   [5.1416 -7.3178 6.9665] [5.0441 -6.531 4.7784]]
  [[-0.5669 -0.8012 0.1918 -0.8129 0.5817 0.0273 -0.1334 -0.1404 -0.9811 -0.3279
    8.3874 0.3355] [-0.8313 -0.4738 -0.2906 0.0649 0.4366 -0.8973 0.5521 -0.7648
		    -0.3322 1.6833 6.806 -7.0011]
   [0.3445 -0.763 0.547 -0.4628 -0.645 -0.6082 0.8168 -0.0436 -0.5753 -6.8179
    -3.9778 -5.9887] [0.5855 0.7931 -0.1682 0.8103 -0.579 0.0906 -0.0255 -0.1894
		      -0.9816 6.1203 -7.1051 3.1984]
   [2.676 -8.496 3.288] [1.495 -7.623 3.477]
   [2.949 -9.464 4.374] [3.973 -7.595 3.034]
   [5.2416 -8.2422 2.8181] [5.205 -8.812799999999999 1.8901]
   [5.5368 -8.7738 3.7227] [6.3232 -7.2037 2.6002]
   [7.3048 -7.6757 2.5577] [6.0635 -6.5092 1.3456]
   [6.4697 -5.1547 1.4629] [7.2354 -5.0043 0.7018]
   [7.0856 -4.961 2.8521] [6.7777 -3.9935 3.2487]
   [8.4627 -5.1992 2.7423] [8.869300000000001 -4.8638 1.9399]
   [6.3877 -6.0809 3.6362] [5.377 -5.7562 3.8834]
   [7.1024 -6.4754 4.7985] [5.2764 -4.2883 1.2538]
   [3.8961 -3.0896 -0.1893] [5.0095 -3.8907 -0.0346]
   [3.048 -2.6632 0.8116] [3.4093 -3.131 2.1292]
   [4.4878 -3.9124 2.3088] rU [5.7005 -4.2164 -0.9842]
   [2.08 -1.9458 0.5503] [3.6834 -2.7882 -1.119]
   [2.8508 -2.8721 2.9172] [4.7188 -4.2247 3.2295]]
  [[-0.6298 0.0246 0.7763 -0.5226 -0.7529 -0.4001 0.5746 -0.6577 0.487 -0.0208
    -3.4598 -9.6882] [-0.8313 -0.4738 -0.2906 0.0649 0.4366 -0.8973 0.5521 -0.7648
		      -0.3322 1.6833 6.806 -7.0011]
   [0.3445 -0.763 0.547 -0.4628 -0.645 -0.6082 0.8168 -0.0436 -0.5753 -6.8179
    -3.9778 -5.9887] [0.5855 0.7931 -0.1682 0.8103 -0.579 0.0906 -0.0255 -0.1894
		      -0.9816 6.1203 -7.1051 3.1984]
   [2.676 -8.496 3.288] [1.495 -7.623 3.477]
   [2.949 -9.464 4.374] [3.973 -7.595 3.034]
   [4.3825 -6.6585 4.0489] [4.6841 -7.2019 4.9443]
   [3.6189 -5.8889 4.1625] [5.6255 -5.9175 3.5998]
   [5.8732 -5.1228 4.3034] [6.7337 -6.8605 3.5222]
   [7.5932 -6.4923 2.4548] [8.5661 -6.2983 2.9064]
   [7.0527 -5.2012 1.8322] [7.1627 -5.2525 0.749]
   [7.6666 -4.1249 2.488] [8.5944 -4.2543 2.6981]
   [5.5661 -5.3029 2.2009] [5.0841 -6.0018 1.5172]
   [4.9062 -4.0452 2.2042] [7.6298 -7.6136 1.4752]
   [8.5977 -9.5977 0.7329] [8.5951 -8.5745 1.6594]
   [7.7372 -9.7371 -0.3364] [6.7596 -8.680099999999999 -0.4476]
   [6.7338 -7.6721 0.4408] rU [9.3993 -8.537699999999999 2.5743]
   [7.8374 -10.699 -1.1008] [9.292400000000001 -10.3081 0.8477]
   [6.0932 -8.6982 -1.1929] [6.0481 -6.9515 0.3446]]
  [[-0.9837 0.0476 -0.1733 -0.1792 -0.3353 0.9249000000000001 -0.0141 0.9409 0.3384
    5.7793 -5.2303 4.5997] [-0.8313 -0.4738 -0.2906 0.0649 0.4366 -0.8973 0.5521
			    -0.7648 -0.3322 1.6833 6.806 -7.0011]
   [0.3445 -0.763 0.547 -0.4628 -0.645 -0.6082 0.8168 -0.0436 -0.5753 -6.8179
    -3.9778 -5.9887] [0.5855 0.7931 -0.1682 0.8103 -0.579 0.0906 -0.0255 -0.1894
		      -0.9816 6.1203 -7.1051 3.1984]
   [2.676 -8.496 3.288] [1.495 -7.623 3.477]
   [2.949 -9.464 4.374] [3.973 -7.595 3.034]
   [3.9938 -6.7042 1.9023] [3.2332 -5.9343 2.0319]
   [3.9666 -7.2863 0.9812] [5.3098 -5.9546 1.8564]
   [5.3863 -5.3702 0.9395] [5.3851 -5.0642 3.0076]
   [6.7315 -4.9724 3.4462] [7.0033 -3.9202 3.3619]
   [7.5997 -5.8018 2.4948] [8.3627 -6.3254 3.0707]
   [8.041 -4.9501 1.4724] [8.2781 -4.0644 1.757]
   [6.5701 -6.8129 1.9714] [6.4186 -7.5809 2.7299]
   [6.9357 -7.3841 0.7235] [6.8024 -5.4718 4.8475]
   [6.692 -5.0495 7.1354] [6.6201 -4.55 5.8506]
   [6.9254 -6.3614 7.4926] [7.1046 -7.2543 6.3718]
   [7.0391 -6.7951 5.1106] rU [6.4083 -3.3696 5.634]
   [6.9679 -6.6901 8.68] [6.5626 -4.3957 7.8812]
   [7.2781 -8.2254 6.535] [7.1657 -7.4312 4.3503]]
  [[-0.9434 0.3172 0.09710000000000001 0.2294 0.4125 0.8816000000000001 0.2396
    0.8539 -0.4619 8.362500000000001 -52.7147 1.3745]
   [0.2765 -0.1121 -0.9545 -0.8297 0.4733 -0.2959 0.485 0.8737 0.0379 -14.7774
    -45.2464 21.9088] [0.1063 -0.6334 -0.7665 -0.5931999999999999 -0.6591 0.4624
		       -0.798 0.4055 -0.4458 43.7634 4.3296 28.489]
   [0.7136 -0.5032 -0.4873 0.6803 0.3317 0.6536 -0.1673 -0.7979000000000001 0.5790999999999999
    -17.1858 41.439 -27.0751] [21.388 15.078 45.577]
   [21.998 14.55 46.821] [21.145 14.027 44.542]
   [22.125 16.36 44.946] [21.5037 16.8594 43.7323]
   [20.8147 17.6663 43.9823] [21.1086 16.023 43.1557]
   [22.5654 17.4874 42.8616] [22.1584 17.7243 41.8785]
   [23.0557 18.6826 43.4751] [24.4788 18.6151 43.6455]
   [24.9355 19.084 42.7739] [24.7958 17.1427 43.6474]
   [24.5652 16.74 44.6336] [26.1041 16.8773 43.2455]
   [26.7516 17.5328 43.5149] [23.8109 16.5979 42.6377]
   [23.5756 15.5686 42.9084] [24.289 16.7447 41.2729]
   [24.942 19.2174 44.8923] [25.2655 20.5636 44.8883]
   [25.1663 21.2219 43.8561] [25.6911 21.1219 46.0494]
   [25.8051 20.4068 47.2048] [26.2093 20.9962 48.2534] rU [25.4692 19.0221 47.2053]
   [25.0502 18.4827 46.037] [25.9599 22.1772 46.0966]
   [25.5545 18.4409 48.1234] [24.7854 17.4265 45.9883]]
  [[-0.008 -0.7927999999999999 0.6094000000000001 -0.7512 0.4071 0.5197000000000001
    -0.6601 -0.4536 -0.5988 44.1482 30.7036 2.1088]
   [0.2765 -0.1121 -0.9545 -0.8297 0.4733 -0.2959 0.485 0.8737 0.0379 -14.7774
    -45.2464 21.9088] [0.1063 -0.6334 -0.7665 -0.5931999999999999 -0.6591 0.4624
		       -0.798 0.4055 -0.4458 43.7634 4.3296 28.489]
   [0.7136 -0.5032 -0.4873 0.6803 0.3317 0.6536 -0.1673 -0.7979000000000001 0.5790999999999999
    -17.1858 41.439 -27.0751] [21.388 15.078 45.577]
   [21.998 14.55 46.821] [21.145 14.027 44.542]
   [22.125 16.36 44.946] [23.5096 16.1227 44.5783]
   [23.5649 15.8588 43.5222] [23.9621 15.4341 45.2919]
   [24.2805 17.4138 44.7151] [25.3492 17.2309 44.603]
   [23.8497 18.3471 43.7208] [23.409 19.5681 44.3321]
   [24.2595 20.2496 44.3524] [23.0418 19.1813 45.7407]
   [22.0532 18.7224 45.7273] [23.1307 20.2521 46.6291]
   [22.8888 21.1051 46.2611] [24.0799 18.1326 46.07]
   [23.649 17.437 46.79] [25.3329 18.7227 46.5109]
   [22.2515 20.1624 43.6698] [22.476 21.0609 42.6406]
   [23.6229 21.3462 42.3061] [21.3986 21.6081 42.0236]
   [20.1189 21.3012 42.3804] [19.1599 21.8516 41.7578] rU [19.8919 20.3745 43.4387]
   [20.979 19.8423 44.044] [21.5235 22.3222 41.2097]
   [18.8732 20.12 43.7312] [20.8545 19.1313 44.8608]]
  [[-0.0317 0.1374 0.99 -0.3422 -0.9321 0.1184 0.9391 -0.3351 0.0765 -32.1929
    25.8198 -28.5088] [0.2765 -0.1121 -0.9545 -0.8297 0.4733 -0.2959 0.485 0.8737
		       0.0379 -14.7774 -45.2464 21.9088]
   [0.1063 -0.6334 -0.7665 -0.5931999999999999 -0.6591 0.4624 -0.798 0.4055 -0.4458
    43.7634 4.3296 28.489] [0.7136 -0.5032 -0.4873 0.6803 0.3317 0.6536 -0.1673
			    -0.7979000000000001 0.5790999999999999 -17.1858 41.439
			    -27.0751] [21.388 15.078 45.577]
   [21.998 14.55 46.821] [21.145 14.027 44.542]
   [22.125 16.36 44.946] [21.5037 16.8594 43.7323]
   [20.8147 17.6663 43.9823] [21.1086 16.023 43.1557]
   [22.5654 17.4874 42.8616] [23.0565 18.3036 43.3915]
   [23.5375 16.5054 42.4925] [23.6574 16.4257 41.0649]
   [24.4701 17.0882 40.7671] [22.3525 16.9643 40.5396]
   [21.5993 16.1799 40.6133] [22.4693 17.4849 39.2515]
   [23.0899 17.0235 38.6827] [22.0341 18.0633 41.5279]
   [20.9509 18.1709 41.5846] [22.7249 19.302 41.21]
   [23.858 15.0648 40.5757] [25.1556 14.5982 40.4523]
   [26.1047 15.321 40.7448] [25.3391 13.3315 40.002]
   [24.2974 12.5148 39.6749] [24.545 11.341 39.261] rU [22.9633 12.9979 39.8053]
   [22.8009 14.2648 40.2524] [26.3414 12.9194 39.8855]
   [22.1227 12.3533 39.5486] [21.7989 14.6788 40.365]]
  [[-0.9674 0.1021 -0.2318 -0.2514 -0.2766 0.9275 0.0306 0.9555 0.2933 27.8571
    -42.1305 -24.4563] [0.2765 -0.1121 -0.9545 -0.8297 0.4733 -0.2959 0.485 0.8737
			0.0379 -14.7774 -45.2464 21.9088]
   [0.1063 -0.6334 -0.7665 -0.5931999999999999 -0.6591 0.4624 -0.798 0.4055 -0.4458
    43.7634 4.3296 28.489] [0.7136 -0.5032 -0.4873 0.6803 0.3317 0.6536 -0.1673
			    -0.7979000000000001 0.5790999999999999 -17.1858 41.439
			    -27.0751] [21.388 15.078 45.577]
   [21.998 14.55 46.821] [21.145 14.027 44.542]
   [22.125 16.36 44.946] [23.5096 16.1227 44.5783]
   [23.5649 15.8588 43.5222] [23.9621 15.4341 45.2919]
   [24.2805 17.4138 44.7151] [23.8509 18.1819 44.072]
   [24.2506 17.8583 46.0741] [25.583 18.032 46.5775]
   [25.8569 19.0761 46.4256] [26.441 17.1555 45.7033]
   [26.3459 16.1253 46.0462] [27.7649 17.5888 45.6478]
   [28.1004 17.9719 46.4616] [25.7796 17.2997 44.3513]
   [25.9478 16.3824 43.7871] [26.2154 18.4984 43.6541]
   [25.7321 17.6281 47.9726] [25.5136 18.5779 48.956]
   [25.2079 19.7276 48.6503] [25.6482 18.1987 50.2518]
   [25.9847 16.9266 50.6092] [26.0918 16.6439 51.8416] rU [26.2067 15.9515 49.5943]
   [26.0713 16.3497 48.308] [25.489 18.9105 51.0618]
   [26.4742 14.931 49.8682] [26.2346 15.6394 47.4975]])])
	 #fn(#9# #10# [16 17 #12=([[-0.0137 -0.8012 0.5983000000000001 -0.2523
				    0.5817 0.7733 -0.9675 -0.1404 -0.2101 0.2031
				    8.3874 0.4228]
				   [-0.8313 -0.4738 -0.2906 0.0649 0.4366 -0.8973
				    0.5521 -0.7648 -0.3322 1.6833 6.806 -7.0011]
				   [0.3445 -0.763 0.547 -0.4628 -0.645 -0.6082
				    0.8168 -0.0436 -0.5753 -6.8179 -3.9778 -5.9887]
				   [0.5855 0.7931 -0.1682 0.8103 -0.579 0.0906
				    -0.0255 -0.1894 -0.9816 6.1203 -7.1051 3.1984]
				   [2.676 -8.496 3.288]
				   [1.495 -7.623 3.477]
				   [2.949 -9.464 4.374]
				   [3.973 -7.595 3.034]
				   [5.2416 -8.2422 2.8181]
				   [5.205 -8.812799999999999 1.8901]
				   [5.5368 -8.7738 3.7227]
				   [6.3232 -7.2037 2.6002]
				   [7.3048 -7.6757 2.5577]
				   [6.0635 -6.5092 1.3456]
				   [6.4697 -5.1547 1.4629]
				   [7.2354 -5.0043 0.7018]
				   [7.0856 -4.961 2.8521]
				   [6.7777 -3.9935 3.2487]
				   [8.4627 -5.1992 2.7423]
				   [8.869300000000001 -4.8638 1.9399]
				   [6.3877 -6.0809 3.6362]
				   [5.377 -5.7562 3.8834]
				   [7.1024 -6.4754 4.7985]
				   [5.2764 -4.2883 1.2538]
				   [4.3777 -2.2062 0.7229]
				   [5.5069 -2.9779 0.9088000000000001]
				   [3.0693 -2.6246 0.85]
				   [2.9279 -4.0146 1.2149]
				   [4.0101 -4.7892 1.4017] rC [2.104 -1.7437 0.6331]
				   [6.6267 -2.5166 0.7728]
				   [1.1496 -2.06 0.7287]
				   [2.3303 -0.7921 0.3815]
				   [1.9353 -4.4465 1.3419]
				   [3.8895 -5.8371 1.6762]]
				  [[0.5141 0.0246 0.8574000000000001 -0.5547 -0.7529
				    0.3542 0.6542 -0.6577 -0.3734 -9.1111 -3.4598
				    -3.2939]
				   [-0.8313 -0.4738 -0.2906 0.0649 0.4366 -0.8973
				    0.5521 -0.7648 -0.3322 1.6833 6.806 -7.0011]
				   [0.3445 -0.763 0.547 -0.4628 -0.645 -0.6082
				    0.8168 -0.0436 -0.5753 -6.8179 -3.9778 -5.9887]
				   [0.5855 0.7931 -0.1682 0.8103 -0.579 0.0906
				    -0.0255 -0.1894 -0.9816 6.1203 -7.1051 3.1984]
				   [2.676 -8.496 3.288]
				   [1.495 -7.623 3.477]
				   [2.949 -9.464 4.374]
				   [3.973 -7.595 3.034]
				   [4.3825 -6.6585 4.0489]
				   [4.6841 -7.2019 4.9443]
				   [3.6189 -5.8889 4.1625]
				   [5.6255 -5.9175 3.5998]
				   [5.8732 -5.1228 4.3034]
				   [6.7337 -6.8605 3.5222]
				   [7.5932 -6.4923 2.4548]
				   [8.5661 -6.2983 2.9064]
				   [7.0527 -5.2012 1.8322]
				   [7.1627 -5.2525 0.749]
				   [7.6666 -4.1249 2.488]
				   [8.5944 -4.2543 2.6981]
				   [5.5661 -5.3029 2.2009]
				   [5.0841 -6.0018 1.5172]
				   [4.9062 -4.0452 2.2042]
				   [7.6298 -7.6136 1.4752]
				   [8.6945 -8.704599999999999 -0.2857]
				   [8.6943 -7.6514 0.6066]
				   [7.7426 -9.698700000000001 -0.3801]
				   [6.6642 -9.574199999999999 0.5722]
				   [6.6391 -8.559200000000001 1.4526] rC [7.9033
  -10.6371 -1.301] [9.584 -6.8186 0.6136]
				   [7.2009 -11.3604 -1.3619]
				   [8.7058 -10.6168 -1.914]
				   [5.8585 -10.3083 0.5822000000000001]
				   [5.8197 -8.4773 2.1667]]
				  [[-0.4993 0.0476 0.8651 0.8078 -0.3353 0.4847
				    0.3132 0.9409 0.129 6.2989 -5.2303 -3.8577]
				   [-0.8313 -0.4738 -0.2906 0.0649 0.4366 -0.8973
				    0.5521 -0.7648 -0.3322 1.6833 6.806 -7.0011]
				   [0.3445 -0.763 0.547 -0.4628 -0.645 -0.6082
				    0.8168 -0.0436 -0.5753 -6.8179 -3.9778 -5.9887]
				   [0.5855 0.7931 -0.1682 0.8103 -0.579 0.0906
				    -0.0255 -0.1894 -0.9816 6.1203 -7.1051 3.1984]
				   [2.676 -8.496 3.288]
				   [1.495 -7.623 3.477]
				   [2.949 -9.464 4.374]
				   [3.973 -7.595 3.034]
				   [3.9938 -6.7042 1.9023]
				   [3.2332 -5.9343 2.0319]
				   [3.9666 -7.2863 0.9812]
				   [5.3098 -5.9546 1.8564]
				   [5.3863 -5.3702 0.9395]
				   [5.3851 -5.0642 3.0076]
				   [6.7315 -4.9724 3.4462]
				   [7.0033 -3.9202 3.3619]
				   [7.5997 -5.8018 2.4948]
				   [8.3627 -6.3254 3.0707]
				   [8.041 -4.9501 1.4724]
				   [8.2781 -4.0644 1.757]
				   [6.5701 -6.8129 1.9714]
				   [6.4186 -7.5809 2.7299]
				   [6.9357 -7.3841 0.7235]
				   [6.8024 -5.4718 4.8475]
				   [7.9218 -5.57 6.8877]
				   [7.8908 -5.0886 5.5944]
				   [6.9789 -6.3827 7.4823]
				   [5.8742 -6.7319 6.6202]
				   [5.8182 -6.2769 5.357] rC [7.1702 -6.7511 8.7402]
				   [8.774699999999999 -4.3728 5.1568]
				   [6.4741 -7.3461 9.1662]
				   [7.9889 -6.4396 9.242900000000001]
				   [5.0736 -7.3713 6.9922]
				   [4.9784 -6.5473 4.717]]
				  [[-0.5669 -0.8012 0.1918 -0.8129 0.5817 0.0273
				    -0.1334 -0.1404 -0.9811 -0.3279 8.3874 0.3355]
				   [-0.8313 -0.4738 -0.2906 0.0649 0.4366 -0.8973
				    0.5521 -0.7648 -0.3322 1.6833 6.806 -7.0011]
				   [0.3445 -0.763 0.547 -0.4628 -0.645 -0.6082
				    0.8168 -0.0436 -0.5753 -6.8179 -3.9778 -5.9887]
				   [0.5855 0.7931 -0.1682 0.8103 -0.579 0.0906
				    -0.0255 -0.1894 -0.9816 6.1203 -7.1051 3.1984]
				   [2.676 -8.496 3.288]
				   [1.495 -7.623 3.477]
				   [2.949 -9.464 4.374]
				   [3.973 -7.595 3.034]
				   [5.2416 -8.2422 2.8181]
				   [5.205 -8.812799999999999 1.8901]
				   [5.5368 -8.7738 3.7227]
				   [6.3232 -7.2037 2.6002]
				   [7.3048 -7.6757 2.5577]
				   [6.0635 -6.5092 1.3456]
				   [6.4697 -5.1547 1.4629]
				   [7.2354 -5.0043 0.7018]
				   [7.0856 -4.961 2.8521]
				   [6.7777 -3.9935 3.2487]
				   [8.4627 -5.1992 2.7423]
				   [8.869300000000001 -4.8638 1.9399]
				   [6.3877 -6.0809 3.6362]
				   [5.377 -5.7562 3.8834]
				   [7.1024 -6.4754 4.7985]
				   [5.2764 -4.2883 1.2538]
				   [3.8961 -3.0896 -0.1893]
				   [5.0095 -3.8907 -0.0346]
				   [3.048 -2.6632 0.8116]
				   [3.4093 -3.131 2.1292]
				   [4.4878 -3.9124 2.3088] rC [2.0216 -1.8941
							       0.4804]
				   [5.7005 -4.2164 -0.9842]
				   [1.4067 -1.5873 1.2205]
				   [1.8721 -1.6319 -0.4835]
				   [2.8048 -2.8507 2.9918]
				   [4.7491 -4.2593 3.3085]]
				  [[-0.6298 0.0246 0.7763 -0.5226 -0.7529 -0.4001
				    0.5746 -0.6577 0.487 -0.0208 -3.4598 -9.6882]
				   [-0.8313 -0.4738 -0.2906 0.0649 0.4366 -0.8973
				    0.5521 -0.7648 -0.3322 1.6833 6.806 -7.0011]
				   [0.3445 -0.763 0.547 -0.4628 -0.645 -0.6082
				    0.8168 -0.0436 -0.5753 -6.8179 -3.9778 -5.9887]
				   [0.5855 0.7931 -0.1682 0.8103 -0.579 0.0906
				    -0.0255 -0.1894 -0.9816 6.1203 -7.1051 3.1984]
				   [2.676 -8.496 3.288]
				   [1.495 -7.623 3.477]
				   [2.949 -9.464 4.374]
				   [3.973 -7.595 3.034]
				   [4.3825 -6.6585 4.0489]
				   [4.6841 -7.2019 4.9443]
				   [3.6189 -5.8889 4.1625]
				   [5.6255 -5.9175 3.5998]
				   [5.8732 -5.1228 4.3034]
				   [6.7337 -6.8605 3.5222]
				   [7.5932 -6.4923 2.4548]
				   [8.5661 -6.2983 2.9064]
				   [7.0527 -5.2012 1.8322]
				   [7.1627 -5.2525 0.749]
				   [7.6666 -4.1249 2.488]
				   [8.5944 -4.2543 2.6981]
				   [5.5661 -5.3029 2.2009]
				   [5.0841 -6.0018 1.5172]
				   [4.9062 -4.0452 2.2042]
				   [7.6298 -7.6136 1.4752]
				   [8.5977 -9.5977 0.7329]
				   [8.5951 -8.5745 1.6594]
				   [7.7372 -9.7371 -0.3364]
				   [6.7596 -8.680099999999999 -0.4476]
				   [6.7338 -7.6721 0.4408] rC [7.8849 -10.7881
							       -1.1289]
				   [9.3993 -8.537699999999999 2.5743]
				   [7.2499 -10.8809 -1.9088]
				   [8.6122 -11.4649 -0.9468]
				   [6.0317 -8.694100000000001 -1.2588]
				   [5.9901 -6.8809 0.3459]]
				  [[-0.9837 0.0476 -0.1733 -0.1792 -0.3353 0.9249000000000001
				    -0.0141 0.9409 0.3384 5.7793 -5.2303 4.5997]
				   [-0.8313 -0.4738 -0.2906 0.0649 0.4366 -0.8973
				    0.5521 -0.7648 -0.3322 1.6833 6.806 -7.0011]
				   [0.3445 -0.763 0.547 -0.4628 -0.645 -0.6082
				    0.8168 -0.0436 -0.5753 -6.8179 -3.9778 -5.9887]
				   [0.5855 0.7931 -0.1682 0.8103 -0.579 0.0906
				    -0.0255 -0.1894 -0.9816 6.1203 -7.1051 3.1984]
				   [2.676 -8.496 3.288]
				   [1.495 -7.623 3.477]
				   [2.949 -9.464 4.374]
				   [3.973 -7.595 3.034]
				   [3.9938 -6.7042 1.9023]
				   [3.2332 -5.9343 2.0319]
				   [3.9666 -7.2863 0.9812]
				   [5.3098 -5.9546 1.8564]
				   [5.3863 -5.3702 0.9395]
				   [5.3851 -5.0642 3.0076]
				   [6.7315 -4.9724 3.4462]
				   [7.0033 -3.9202 3.3619]
				   [7.5997 -5.8018 2.4948]
				   [8.3627 -6.3254 3.0707]
				   [8.041 -4.9501 1.4724]
				   [8.2781 -4.0644 1.757]
				   [6.5701 -6.8129 1.9714]
				   [6.4186 -7.5809 2.7299]
				   [6.9357 -7.3841 0.7235]
				   [6.8024 -5.4718 4.8475]
				   [6.692 -5.0495 7.1354]
				   [6.6201 -4.55 5.8506]
				   [6.9254 -6.3614 7.4926]
				   [7.1046 -7.2543 6.3718]
				   [7.0391 -6.7951 5.1106] rC [6.9614 -6.6648
							       8.781499999999999]
				   [6.4083 -3.3696 5.634]
				   [7.1329 -7.628 9.032400000000001]
				   [6.8204 -5.9469 9.4777]
				   [7.2954 -8.313499999999999 6.544]
				   [7.1753 -7.4798 4.2735]]
				  [[0.0033 0.272 -0.9623 0.3013 -0.9179 -0.2584
				    -0.9535 -0.2891 -0.08500000000000001 43.0403
				    13.7233 34.571]
				   [0.9187 0.2887 0.2694 0.0302 -0.7316 0.6811
				    0.3938 -0.6176 -0.6808 -48.433 26.3254 13.6383]
				   [-0.1504 0.7744 -0.6145 0.7581 0.4893 0.4311
				    0.6345 -0.401 -0.6607 -31.9784 -13.4285 44.965]
				   [-0.6236 -0.781 -0.0337 -0.6889999999999999
				    0.5694 -0.4484 0.3694 -0.2564 -0.8932 12.1105
				    30.8774 46.0946]
				   [33.34 11.098 46.175]
				   [34.513 10.232 46.466]
				   [33.413 12.396 46.934]
				   [31.981 10.339 46.482]
				   [30.8152 11.1619 46.2003]
				   [30.4519 10.9454 45.1957]
				   [31.0379 12.2016 46.44]
				   [29.7081 10.7448 47.1428]
				   [28.871 11.4416 47.0982]
				   [29.255 9.439399999999999 46.8162]
				   [29.3907 8.5625 47.946]
				   [28.4416 8.5669 48.4819]
				   [30.4468 9.203099999999999 48.7952]
				   [31.4222 8.9651 48.3709]
				   [30.3701 8.915699999999999 50.1624]
				   [30.0652 8.0304 50.374]
				   [30.1622 10.6879 48.612]
				   [31.0952 11.2399 48.7254]
				   [29.1076 11.1535 49.4702]
				   [29.7883 7.2209 47.5235]
				   [29.1825 5.0438 46.8275]
				   [28.8008 6.2912 47.2263]
				   [30.4888 4.689 46.7186]
				   [31.5034 5.6405 47.0249]
				   [31.1091 6.8691 47.4156] rC [30.8109 3.4584
								46.3336]
				   [27.6171 6.5989 47.3189]
				   [31.7923 3.2301 46.2638]
				   [30.088 2.7857 46.1215]
				   [32.5542 5.3634 46.9395]
				   [31.8523 7.6279 47.6603]]
				  [[0.07969999999999999 -0.6026 -0.7941 0.7939000000000001
				    0.5201 -0.315 0.6028 -0.6054 0.5198 -36.8341
				    41.5293 1.6628]
				   [0.9187 0.2887 0.2694 0.0302 -0.7316 0.6811
				    0.3938 -0.6176 -0.6808 -48.433 26.3254 13.6383]
				   [-0.1504 0.7744 -0.6145 0.7581 0.4893 0.4311
				    0.6345 -0.401 -0.6607 -31.9784 -13.4285 44.965]
				   [-0.6236 -0.781 -0.0337 -0.6889999999999999
				    0.5694 -0.4484 0.3694 -0.2564 -0.8932 12.1105
				    30.8774 46.0946]
				   [33.34 11.098 46.175]
				   [34.513 10.232 46.466]
				   [33.413 12.396 46.934]
				   [31.981 10.339 46.482]
				   [31.8779 9.9369 47.876]
				   [31.3239 10.6931 48.4322]
				   [32.8647 9.6624 48.2489]
				   [31.0429 8.677300000000001 47.9401]
				   [31.0779 8.2331 48.9349]
				   [29.6956 8.966900000000001 47.5983]
				   [29.2784 8.17 46.4782]
				   [28.8006 7.2731 46.8722]
				   [30.5544 7.794 45.7875]
				   [30.8837 8.641 45.1856]
				   [30.51 6.6007 45.0582]
				   [29.6694 6.4168 44.6326]
				   [31.5146 7.5954 46.9527]
				   [32.5255 7.8261 46.6166]
				   [31.3876 6.2951 47.5516]
				   [28.3976 8.930199999999999 45.5933]
				   [26.2155 9.6135 44.991]
				   [27.0281 8.896100000000001 45.8192]
				   [26.7044 10.3489 43.9595]
				   [28.1088 10.3837 43.7247]
				   [28.8978 9.6708 44.5535] rC [25.8715 11.0249
								43.1749]
				   [26.5733 8.2371 46.7484]
				   [26.2707 11.5609 42.4177]
				   [24.876 10.9939 43.3427]
				   [28.5089 10.9722 42.899]
				   [29.9782 9.668699999999999 44.4097]]
				  [[0.8727 0.476 -0.1091 -0.4188 0.6148 -0.6682
				    -0.251 0.6289 0.7359 -8.168699999999999 -52.0761
				    -25.0726]
				   [0.9187 0.2887 0.2694 0.0302 -0.7316 0.6811
				    0.3938 -0.6176 -0.6808 -48.433 26.3254 13.6383]
				   [-0.1504 0.7744 -0.6145 0.7581 0.4893 0.4311
				    0.6345 -0.401 -0.6607 -31.9784 -13.4285 44.965]
				   [-0.6236 -0.781 -0.0337 -0.6889999999999999
				    0.5694 -0.4484 0.3694 -0.2564 -0.8932 12.1105
				    30.8774 46.0946]
				   [33.34 11.098 46.175]
				   [34.513 10.232 46.466]
				   [33.413 12.396 46.934]
				   [31.981 10.339 46.482]
				   [30.8152 11.1619 46.2003]
				   [30.4519 10.9454 45.1957]
				   [31.0379 12.2016 46.44]
				   [29.7081 10.7448 47.1428]
				   [29.4506 9.6945 47.0059]
				   [30.1045 10.9634 48.4885]
				   [29.1794 11.8418 49.149]
				   [28.4388 11.221 49.6533]
				   [28.5211 12.6008 48.0367]
				   [29.1947 13.3949 47.7147]
				   [27.2316 13.0683 48.3134]
				   [27.0851 13.3391 49.2227]
				   [28.4131 11.5507 46.9391]
				   [28.4451 12.0512 45.9713]
				   [27.2707 10.6955 47.1097]
				   [29.8751 12.7405 50.0682]
				   [30.7172 13.1841 52.2328]
				   [30.0617 12.3404 51.3847]
				   [31.1834 14.3941 51.8297]
				   [30.9913 14.8074 50.4803]
				   [30.3434 13.961 49.6548] rC [31.809 15.1847
								52.6957]
				   [29.647 11.2494 51.7616]
				   [32.1422 16.0774 52.3606]
				   [31.9392 14.8893 53.6527]
				   [31.3632 15.7771 50.1491]
				   [30.1742 14.2374 48.6141]]
				  [[0.1549 0.871 -0.4663 0.6768 -0.4374 -0.5921
				    -0.7197 -0.2239 -0.6572 25.2447 -14.192 50.3201]
				   [0.9187 0.2887 0.2694 0.0302 -0.7316 0.6811
				    0.3938 -0.6176 -0.6808 -48.433 26.3254 13.6383]
				   [-0.1504 0.7744 -0.6145 0.7581 0.4893 0.4311
				    0.6345 -0.401 -0.6607 -31.9784 -13.4285 44.965]
				   [-0.6236 -0.781 -0.0337 -0.6889999999999999
				    0.5694 -0.4484 0.3694 -0.2564 -0.8932 12.1105
				    30.8774 46.0946]
				   [33.34 11.098 46.175]
				   [34.513 10.232 46.466]
				   [33.413 12.396 46.934]
				   [31.981 10.339 46.482]
				   [31.8779 9.9369 47.876]
				   [31.3239 10.6931 48.4322]
				   [32.8647 9.6624 48.2489]
				   [31.0429 8.677300000000001 47.9401]
				   [30.044 8.847300000000001 47.5383]
				   [31.6749 7.6351 47.2119]
				   [31.9159 6.5022 48.0616]
				   [31.0691 5.8243 47.9544]
				   [31.93 7.0685 49.4493]
				   [32.9024 7.5288 49.6245]
				   [31.5672 6.175 50.4632]
				   [31.8416 5.2663 50.32]
				   [30.8618 8.151400000000001 49.3749]
				   [31.1122 8.9396 50.085]
				   [29.5351 7.6245 49.5409]
				   [33.189 5.8629 47.7343]
				   [34.4004 4.2636 46.4828]
				   [33.2062 4.8497 46.7851]
				   [35.56 4.6374 47.0822]
				   [35.5444 5.6751 48.0577]
				   [34.3565 6.245 48.3432] rC [36.6977 4.0305
							       46.7598]
				   [32.1661 4.5034 46.2348]
				   [37.5405 4.3347 47.2259]
				   [36.7033 3.2923 46.0706]
				   [36.4713 5.9811 48.5428]
				   [34.2986 7.0426 49.0839]])])
	 #fn(#9# #10# [17 18 ([[-0.0043 -0.8175 0.5759 0.2617 -0.5567 -0.7884
				0.9651 0.1473 0.2164 0.0359 8.392899999999999
				0.5532] [-0.8143 -0.5091 -0.2788 -0.0433 -0.4257
					 0.9038 -0.5788 0.748 0.3246 1.5227 6.9114
					 -7.0765]
			       [0.3822 -0.7477 0.543 0.4552 0.6637 0.5935 -0.8042
				0.0203 0.5941 -6.9472 -4.1186 -5.9108]
			       [0.5639999999999999 0.8007 -0.2022 -0.8247 0.5587
				-0.0878 0.0426 0.2162 0.9754 6.2694 -7.054 3.3316]
			       [2.893 8.538 -3.328]
			       [1.698 7.696 -3.557]
			       [3.226 9.500999999999999 -4.402]
			       [4.159 7.604 -3.034]
			       [5.4352 8.218299999999999 -2.7757]
			       [5.383 8.7883 -1.8481]
			       [5.7729 8.743600000000001 -3.6691]
			       [6.483 7.1518 -2.5252]
			       [7.4749 7.5972 -2.4482]
			       [6.1626 6.462 -1.2827]
			       [6.5431 5.0992 -1.3905]
			       [7.2871 4.9328 -0.6114000000000001]
			       [7.1852 4.8935 -2.7592]
			       [6.8573 3.9363 -3.1645]
			       [8.577999999999999 5.1025 -2.6046]
			       [8.951599999999999 4.7577 -1.7902]
			       [6.5522 6.03 -3.5612]
			       [5.542 5.7356 -3.8459]
			       [7.3487 6.4089 -4.6867]
			       [4.7442 0.4514 -0.139]
			       [6.3687 2.1459 -0.5926]
			       [5.9795 0.9335 -0.2657]
			       [5.3052 2.9471 -0.8125]
			       [3.9891 2.5987 -0.723]
			       [3.7016 1.2717 -0.3647] rA [2.4553 0.7925 -0.239]
			       [3.177 3.6859 -1.0198]
			       [5.3247 4.2695 -1.171]
			       [4.0156 4.6415 -1.2759]
			       [6.7198 0.1618 -0.0547]
			       [1.6709 1.39 -0.4039]
			       [2.3107 -0.1627 -0.0373]
			       [3.4426 5.5361 -1.5199]]
			      [[0.5566 0.0449 0.8296 0.5125 0.7673 -0.3854 -0.6538
				0.6397 0.4041 -9.116099999999999 -3.7679 -2.9968]
			       [-0.8143 -0.5091 -0.2788 -0.0433 -0.4257 0.9038
				-0.5788 0.748 0.3246 1.5227 6.9114 -7.0765]
			       [0.3822 -0.7477 0.543 0.4552 0.6637 0.5935 -0.8042
				0.0203 0.5941 -6.9472 -4.1186 -5.9108]
			       [0.5639999999999999 0.8007 -0.2022 -0.8247 0.5587
				-0.0878 0.0426 0.2162 0.9754 6.2694 -7.054 3.3316]
			       [2.893 8.538 -3.328]
			       [1.698 7.696 -3.557]
			       [3.226 9.500999999999999 -4.402]
			       [4.159 7.604 -3.034]
			       [4.5778 6.6594 -4.0364]
			       [4.922 7.1963 -4.9204]
			       [3.7996 5.9091 -4.1764]
			       [5.7873 5.8869 -3.5482]
			       [6.0405 5.0875 -4.2446]
			       [6.9135 6.8036 -3.431]
			       [7.7293 6.4084 -2.3392]
			       [8.707800000000001 6.1815 -2.7624]
			       [7.1305 5.1418 -1.7347]
			       [7.204 5.1982 -0.6486]
			       [7.7417 4.0392 -2.3813]
			       [8.6785 4.1443 -2.563]
			       [5.6666 5.2728 -2.1536]
			       [5.1747 5.9805 -1.4863]
			       [4.9997 4.0086 -2.1973]
			       [10.3245 8.5459 1.5467]
			       [9.805099999999999 6.9432 -0.1497]
			       [10.5175 7.4328 0.8408]
			       [8.7523 7.7422 -0.4228]
			       [8.425700000000001 8.906000000000001 0.2099]
			       [9.266500000000001 9.324199999999999 1.254] rA
			       [9.0664 10.4462 1.961]
			       [7.275 9.4537 -0.3428]
			       [7.7962 7.5519 -1.3859]
			       [6.9479 8.6157 -1.2771]
			       [11.4063 6.9047 1.1859]
			       [8.2845 11.0341 1.7552]
			       [9.6584 10.6647 2.7198]
			       [6.043 8.985300000000001 -1.7594]]
			      [[-0.5021 0.0731 0.8617 -0.8112 0.3054 -0.4986 -0.2996
				-0.9494 -0.094 6.4273 -5.1944 -3.7807]
			       [-0.8143 -0.5091 -0.2788 -0.0433 -0.4257 0.9038
				-0.5788 0.748 0.3246 1.5227 6.9114 -7.0765]
			       [0.3822 -0.7477 0.543 0.4552 0.6637 0.5935 -0.8042
				0.0203 0.5941 -6.9472 -4.1186 -5.9108]
			       [0.5639999999999999 0.8007 -0.2022 -0.8247 0.5587
				-0.0878 0.0426 0.2162 0.9754 6.2694 -7.054 3.3316]
			       [2.893 8.538 -3.328]
			       [1.698 7.696 -3.557]
			       [3.226 9.500999999999999 -4.402]
			       [4.159 7.604 -3.034]
			       [4.1214 6.7116 -1.9049]
			       [3.3465 5.961 -2.0607]
			       [4.0789 7.2928 -0.9837]
			       [5.417 5.9293 -1.8186]
			       [5.4506 5.34 -0.9023]
			       [5.5067 5.0417 -2.9703]
			       [6.865 4.9152 -3.3612]
			       [7.109 3.8577 -3.2603]
			       [7.7152 5.7282 -2.3894]
			       [8.5029 6.2356 -2.9463]
			       [8.1036 4.8568 -1.3419]
			       [8.327 3.9651 -1.6184]
			       [6.7003 6.7565 -1.8911]
			       [6.5898 7.5329 -2.6482]
			       [7.0505 7.2878 -0.6105]
			       [9.673999999999999 4.7656 -7.6614]
			       [9.0739 4.3013 -5.3941]
			       [9.8416 4.2192 -6.4581]
			       [7.9885 5.0632 -5.6446]
			       [7.6822 5.6856 -6.8194]
			       [8.5831 5.5215 -7.884] rA [8.4084 6.0747 -9.093299999999999]
			       [6.4857 6.3816 -6.7035]
			       [6.974 5.3703 -4.776]
			       [6.1133 6.1613 -5.4808]
			       [10.7627 3.6375 -6.422]
			       [7.6031 6.639 -9.273300000000001]
			       [9.1004 5.9708 -9.789300000000001]
			       [5.1705 6.683 -5.3167]]
			      [[-0.5426 -0.8175 0.1929 0.8304 -0.5567 -0.0237
				0.1267 0.1473 0.9809 -0.5075 8.392899999999999
				0.2229] [-0.8143 -0.5091 -0.2788 -0.0433 -0.4257
					 0.9038 -0.5788 0.748 0.3246 1.5227 6.9114
					 -7.0765]
			       [0.3822 -0.7477 0.543 0.4552 0.6637 0.5935 -0.8042
				0.0203 0.5941 -6.9472 -4.1186 -5.9108]
			       [0.5639999999999999 0.8007 -0.2022 -0.8247 0.5587
				-0.0878 0.0426 0.2162 0.9754 6.2694 -7.054 3.3316]
			       [2.893 8.538 -3.328]
			       [1.698 7.696 -3.557]
			       [3.226 9.500999999999999 -4.402]
			       [4.159 7.604 -3.034]
			       [5.4352 8.218299999999999 -2.7757]
			       [5.383 8.7883 -1.8481]
			       [5.7729 8.743600000000001 -3.6691]
			       [6.483 7.1518 -2.5252]
			       [7.4749 7.5972 -2.4482]
			       [6.1626 6.462 -1.2827]
			       [6.5431 5.0992 -1.3905]
			       [7.2871 4.9328 -0.6114000000000001]
			       [7.1852 4.8935 -2.7592]
			       [6.8573 3.9363 -3.1645]
			       [8.577999999999999 5.1025 -2.6046]
			       [8.951599999999999 4.7577 -1.7902]
			       [6.5522 6.03 -3.5612]
			       [5.542 5.7356 -3.8459]
			       [7.3487 6.4089 -4.6867]
			       [3.6343 2.668 2.0783]
			       [5.4505 3.9805 1.2446]
			       [4.754 3.3816 2.1851]
			       [4.8805 3.7951 0.0354]
			       [3.7416 3.0925 -0.2305]
			       [3.0873 2.498 0.8606] rA [1.96 1.7805 0.7462]
			       [3.4605 3.1184 -1.5906]
			       [5.3247 4.2695 -1.171]
			       [4.4244 3.8244 -2.0953]
			       [5.0814 3.4352 3.2234]
			       [1.5423 1.6454 -0.152]
			       [1.5716 1.3398 1.5392]
			       [4.2675 3.8876 -3.1721]]
			      [[-0.5891 0.0449 0.8068 0.5375 0.7673 0.3498 -0.6034
				0.6397 -0.4762 -0.3019 -3.7679 -9.5913]
			       [-0.8143 -0.5091 -0.2788 -0.0433 -0.4257 0.9038
				-0.5788 0.748 0.3246 1.5227 6.9114 -7.0765]
			       [0.3822 -0.7477 0.543 0.4552 0.6637 0.5935 -0.8042
				0.0203 0.5941 -6.9472 -4.1186 -5.9108]
			       [0.5639999999999999 0.8007 -0.2022 -0.8247 0.5587
				-0.0878 0.0426 0.2162 0.9754 6.2694 -7.054 3.3316]
			       [2.893 8.538 -3.328]
			       [1.698 7.696 -3.557]
			       [3.226 9.500999999999999 -4.402]
			       [4.159 7.604 -3.034]
			       [4.5778 6.6594 -4.0364]
			       [4.922 7.1963 -4.9204]
			       [3.7996 5.9091 -4.1764]
			       [5.7873 5.8869 -3.5482]
			       [6.0405 5.0875 -4.2446]
			       [6.9135 6.8036 -3.431]
			       [7.7293 6.4084 -2.3392]
			       [8.707800000000001 6.1815 -2.7624]
			       [7.1305 5.1418 -1.7347]
			       [7.204 5.1982 -0.6486]
			       [7.7417 4.0392 -2.3813]
			       [8.6785 4.1443 -2.563]
			       [5.6666 5.2728 -2.1536]
			       [5.1747 5.9805 -1.4863]
			       [4.9997 4.0086 -2.1973]
			       [10.2594 10.6774 -1.0056]
			       [9.752800000000001 8.708 -2.2631]
			       [10.4471 9.787599999999999 -1.9791]
			       [8.7271 8.557499999999999 -1.3991]
			       [8.41 9.3803 -0.358]
			       [9.2294 10.503 -0.1574] rA [9.0349 11.3951 0.825]
			       [7.2891 8.9068 0.3121]
			       [7.7962 7.5519 -1.3859]
			       [6.9702 7.8292 -0.3353]
			       [11.3132 10.0537 -2.5851]
			       [8.274100000000001 11.2784 1.4629]
			       [9.673299999999999 12.1368 0.9529]
			       [6.0888 7.399 0.1403]]
			      [[-0.9815 0.0731 -0.1772 0.1912 0.3054 -0.9328 -0.0141
				-0.9494 -0.3137 5.7506 -5.1944 4.747]
			       [-0.8143 -0.5091 -0.2788 -0.0433 -0.4257 0.9038
				-0.5788 0.748 0.3246 1.5227 6.9114 -7.0765]
			       [0.3822 -0.7477 0.543 0.4552 0.6637 0.5935 -0.8042
				0.0203 0.5941 -6.9472 -4.1186 -5.9108]
			       [0.5639999999999999 0.8007 -0.2022 -0.8247 0.5587
				-0.0878 0.0426 0.2162 0.9754 6.2694 -7.054 3.3316]
			       [2.893 8.538 -3.328]
			       [1.698 7.696 -3.557]
			       [3.226 9.500999999999999 -4.402]
			       [4.159 7.604 -3.034]
			       [4.1214 6.7116 -1.9049]
			       [3.3465 5.961 -2.0607]
			       [4.0789 7.2928 -0.9837]
			       [5.417 5.9293 -1.8186]
			       [5.4506 5.34 -0.9023]
			       [5.5067 5.0417 -2.9703]
			       [6.865 4.9152 -3.3612]
			       [7.109 3.8577 -3.2603]
			       [7.7152 5.7282 -2.3894]
			       [8.5029 6.2356 -2.9463]
			       [8.1036 4.8568 -1.3419]
			       [8.327 3.9651 -1.6184]
			       [6.7003 6.7565 -1.8911]
			       [6.5898 7.5329 -2.6482]
			       [7.0505 7.2878 -0.6105]
			       [6.6624 3.5061 -8.2986]
			       [6.581 3.257 -5.9221]
			       [6.5151 2.8263 -7.1625]
			       [6.8364 4.5817 -5.8882]
			       [7.0116 5.4064 -6.9609]
			       [6.9173 4.826 -8.2361] rA [7.0668 5.5163 -9.376300000000001]
			       [7.2573 6.707 -6.5394]
			       [6.974 5.3703 -4.776]
			       [7.2238 6.6275 -5.2453]
			       [6.3146 1.7741 -7.3641]
			       [7.2568 6.4972 -9.345599999999999]
			       [7.0437 5.0478 -10.2446]
			       [7.4108 7.6227 -4.8418]]
			      [[0.2379 0.131 -0.9624 -0.5876 -0.7696 -0.2499 -0.7734
				0.6249 -0.1061 30.987 -26.9344 42.6416]
			       [0.7529 0.1548 0.6397 0.2952 -0.9481000000000001
				-0.118 0.5881999999999999 0.2777 -0.7595 -58.8919
				-11.3095 6.0866]
			       [-0.0239 0.9667 -0.2546 0.9731 -0.0359 -0.2275
				-0.229 -0.2532 -0.9399 3.5401 -29.7913 52.2796]
			       [-0.8912 -0.4531 0.0242 -0.1183 0.1805 -0.9764
				0.438 -0.873 -0.2145 19.9023 54.8054 15.2799]
			       [41.821 8.388 43.589]
			       [42.54 8.045 44.833]
			       [42.247 9.692 42.991]
			       [40.255 8.202999999999999 43.734]
			       [39.3505 8.4697 42.6565]
			       [39.1377 7.5433 42.123]
			       [39.7203 9.3119 42.0717]
			       [38.0405 8.919499999999999 43.2869]
			       [37.3687 9.303599999999999 42.5193]
			       [37.4319 7.8146 43.9387]
			       [37.1959 8.135400000000001 45.3237]
			       [36.1788 8.520200000000001 45.397]
			       [38.1721 9.232799999999999 45.6504]
			       [39.1555 8.793900000000001 45.8188]
			       [37.7862 10.0617 46.7013]
			       [37.3087 9.6229 47.4092]
			       [38.1844 10.0268 44.3367]
			       [39.1578 10.5054 44.2289]
			       [37.0547 10.9127 44.3441]
			       [34.8811 4.2072 47.5784]
			       [35.1084 6.1336 46.1818]
			       [34.4108 5.136 46.7207]
			       [36.3908 6.1224 46.6053]
			       [36.9819 5.2334 47.4697]
			       [36.1786 4.1985 48.0035] rA [36.6103 3.2749 48.8452]
			       [38.3236 5.5522 47.6595]
			       [37.3887 7.0024 46.2437]
			       [38.5055 6.6096 46.9057]
			       [33.3553 5.0152 46.4771]
			       [37.573 3.2804 49.1507]
			       [35.9775 2.5638 49.1828]
			       [39.5461 6.9184 47.0041]]
			      [[0.1084 -0.0895 -0.9901 0.9789 -0.1638 0.122 -0.1731
				-0.9824000000000001 0.0698 -2.9039 47.2655 33.0094]
			       [0.7529 0.1548 0.6397 0.2952 -0.9481000000000001
				-0.118 0.5881999999999999 0.2777 -0.7595 -58.8919
				-11.3095 6.0866]
			       [-0.0239 0.9667 -0.2546 0.9731 -0.0359 -0.2275
				-0.229 -0.2532 -0.9399 3.5401 -29.7913 52.2796]
			       [-0.8912 -0.4531 0.0242 -0.1183 0.1805 -0.9764
				0.438 -0.873 -0.2145 19.9023 54.8054 15.2799]
			       [41.821 8.388 43.589]
			       [42.54 8.045 44.833]
			       [42.247 9.692 42.991]
			       [40.255 8.202999999999999 43.734]
			       [39.485 8.930099999999999 44.6977]
			       [39.0638 9.819900000000001 44.2296]
			       [40.0757 9.071300000000001 45.6029]
			       [38.3102 8.041399999999999 45.0789]
			       [37.7842 8.463699999999999 45.9351]
			       [37.42 7.9453 43.9769]
			       [37.2249 6.5609 43.6273]
			       [36.336 6.2168 44.1561]
			       [38.4347 5.8414 44.159]
			       [39.2688 5.9974 43.4749]
			       [38.2344 4.4907 44.4348]
			       [37.6374 4.0386 43.8341]
			       [38.6926 6.6079 45.4637]
			       [39.7585 6.564 45.6877]
			       [37.8238 6.0705 46.4723]
			       [33.9162 6.2598 39.7758]
			       [34.6709 6.5759 42.0215]
			       [33.7257 6.5186 41.0858]
			       [35.8935 6.3324 41.5018]
			       [36.2105 6.0601 40.1932]
			       [35.1538 6.0151 39.2537] rA [35.3088 5.7642 37.9649]
			       [37.5818 5.8677 40.0507]
			       [37.0932 6.3197 42.181]
			       [38.0509 6.0354 41.2635]
			       [32.683 6.6898 41.3532]
			       [36.2305 5.5855 37.5925]
			       [34.5056 5.7512 37.3528]
			       [39.1318 5.8993 41.2285]]
			      [[0.8467 0.4166 -0.3311 -0.3962 0.9089 0.1303 0.3552
				0.0209 0.9346 -42.7319 -26.6223 -29.8163]
			       [0.7529 0.1548 0.6397 0.2952 -0.9481000000000001
				-0.118 0.5881999999999999 0.2777 -0.7595 -58.8919
				-11.3095 6.0866]
			       [-0.0239 0.9667 -0.2546 0.9731 -0.0359 -0.2275
				-0.229 -0.2532 -0.9399 3.5401 -29.7913 52.2796]
			       [-0.8912 -0.4531 0.0242 -0.1183 0.1805 -0.9764
				0.438 -0.873 -0.2145 19.9023 54.8054 15.2799]
			       [41.821 8.388 43.589]
			       [42.54 8.045 44.833]
			       [42.247 9.692 42.991]
			       [40.255 8.202999999999999 43.734]
			       [39.3505 8.4697 42.6565]
			       [39.1377 7.5433 42.123]
			       [39.7203 9.3119 42.0717]
			       [38.0405 8.919499999999999 43.2869]
			       [37.6479 8.1347 43.9335]
			       [38.2691 10.0933 44.0524]
			       [37.3999 11.1488 43.5973]
			       [36.5061 11.1221 44.2206]
			       [37.0364 10.7838 42.1836]
			       [37.8636 11.0489 41.5252]
			       [35.8275 11.3133 41.7379]
			       [35.6214 12.1896 42.0714]
			       [36.9316 9.255599999999999 42.2837]
			       [37.1778 8.826000000000001 41.3127]
			       [35.6285 8.933400000000001 42.7926]
			       [38.1482 15.2833 46.4641]
			       [37.3641 13.0968 45.9007]
			       [37.5032 14.1288 46.73]
			       [37.957 13.3377 44.7113]
			       [38.6397 14.466 44.3267]
			       [38.7473 15.5229 45.2609] rA [39.372 16.6649 45.0297]
			       [39.1079 14.3351 43.0223]
			       [38.0132 12.4868 43.628]
			       [38.7058 13.1402 42.662]
			       [37.0731 14.0857 47.7306]
			       [39.8113 16.8281 44.135]
			       [39.41 17.3741 45.7478]
			       [39.0412 12.966 41.6397]]
			      [[0.7063 0.6317 -0.3196 -0.0403 -0.4149 -0.909 -0.7068
				0.6549 -0.2676 6.4402 -52.1496 30.8246]
			       [0.7529 0.1548 0.6397 0.2952 -0.9481000000000001
				-0.118 0.5881999999999999 0.2777 -0.7595 -58.8919
				-11.3095 6.0866]
			       [-0.0239 0.9667 -0.2546 0.9731 -0.0359 -0.2275
				-0.229 -0.2532 -0.9399 3.5401 -29.7913 52.2796]
			       [-0.8912 -0.4531 0.0242 -0.1183 0.1805 -0.9764
				0.438 -0.873 -0.2145 19.9023 54.8054 15.2799]
			       [41.821 8.388 43.589]
			       [42.54 8.045 44.833]
			       [42.247 9.692 42.991]
			       [40.255 8.202999999999999 43.734]
			       [39.485 8.930099999999999 44.6977]
			       [39.0638 9.819900000000001 44.2296]
			       [40.0757 9.071300000000001 45.6029]
			       [38.3102 8.041399999999999 45.0789]
			       [37.7099 7.8166 44.1973]
			       [38.8012 6.8321 45.638]
			       [38.2431 6.6413 46.9529]
			       [37.3505 6.0262 46.8385]
			       [37.8484 8.015599999999999 47.4214]
			       [38.7381 8.5406 47.769]
			       [36.8286 8.036799999999999 48.3701]
			       [36.8392 7.3063 48.9929]
			       [37.3576 8.651199999999999 46.1132]
			       [37.5207 9.727499999999999 46.1671]
			       [35.9985 8.2392 45.9032]
			       [39.9117 2.2278 48.8527]
			       [38.6207 3.6941 47.4757]
			       [38.9872 2.4888 47.9057]
			       [39.2961 4.672 48.1174]
			       [40.2546 4.5307 49.0912]
			       [40.5932 3.2189 49.4985] rA [41.4938 2.9317 50.4229]
			       [40.7195 5.7755 49.506]
			       [39.173 6.0305 47.917]
			       [40.0413 6.625 48.7728]
			       [38.5257 1.596 47.4838]
			       [41.9907 3.6753 50.8921]
			       [41.6848 1.9687 50.6599]
			       [40.3571 7.6321 49.0452]])])
	 #fn(#4# #5# [8 #11# 7]) #fn(#9# #10# [3 4 #12#])
	 #fn(#13="9000r1e0~\x7fi233|31e1~\x7fi233|31K;" #14=[G37-A38 helix5*] [#11#
  5 4])
	 #fn(#13# #14# [#7# 6 5]))
	#fn("=000r2e0|31g6bB=6U0e1e2e3bC}3232e1e4|32e5e6g7g832c742;g6b6=6U0e1e2e3b7}3232e1e4|32e5e6g7g832c842;];" [var-id
  atom-pos nuc-P get-var nuc-O3* <= pt-dist 4.0 4.5] pseudoknot-constraint?))
#6 (search/try-assignments
 ([23 [#1=1.0 #0=0.0 #0# #0# #1# #0# #0# #0# #1# #0# #0# #0#]
   [[-0.0018 -0.8207 0.5714 0.2679 -0.5508999999999999 -0.7904 0.9634 0.1517 0.2209
     0.0073 8.403 0.6232] [-0.8143 -0.5091 -0.2788 -0.0433 -0.4257 0.9038 -0.5788
			   0.748 0.3246 1.5227 6.9114 -7.0765]
    [0.3822 -0.7477 0.543 0.4552 0.6637 0.5935 -0.8042 0.0203 0.5941 -6.9472 -4.1186
     -5.9108] [0.5639999999999999 0.8007 -0.2022 -0.8247 0.5587 -0.0878 0.0426
	       0.2162 0.9754 6.2694 -7.054 3.3316]
    [2.893 8.538 -3.328] [1.698 7.696 -3.557]
    [3.226 9.500999999999999 -4.402] [4.159 7.604 -3.034]
    [5.455 8.212 -2.881] [5.4546 8.8508 -1.9978]
    [5.7588 8.6625 -3.8259] [6.497 7.148 -2.598]
    [7.4896 7.5919 -2.5214] [6.163 6.486 -1.344]
    [6.54 5.12 -1.419] [7.2763 4.9681 -0.6297]
    [7.194 4.883 -2.777] [6.8667 3.9183 -3.1647]
    [8.586 5.091 -2.614] [8.951000000000001 4.7626 -1.789]
    [6.572 6.004 -3.609] [5.5636 5.7066 -3.8966]
    [7.3801 6.3562 -4.735] [4.715 0.491 -0.136]
    [6.349 2.173 -0.602] [5.953 0.965 -0.267]
    [5.29 2.979 -0.826] [3.972 2.639 -0.733]
    [3.677 1.316 -0.366] rA [2.428 0.845 -0.236]
    [3.166 3.729 -1.036] [5.317 4.299 -1.193]
    [4.01 4.678 -1.299] [6.689 0.1903 -0.0518]
    [1.647 1.446 -0.404] [2.278 -0.108 -0.028]
    [3.4421 5.5744 -1.5482]]]))
#7 (run ())

real	0m0.061s
user	0m0.040s
sys	0m0.017s
+!CSVLINE!+eflisp,nucleic,CRASHED

Testing pi under eflisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/eflisp-prelude.scm
Compiling...
eflisp_comp /tmp/larcenous/eflisp/pi.scm /tmp/larcenous/eflisp/pi.scm
Running...
parse-error: read: overflow in numeric constant 314159265358979323846264338327950288419716939937507
in file /tmp/larcenous/eflisp/pi.scm

real	0m0.016s
user	0m0.012s
sys	0m0.001s
+!CSVLINE!+eflisp,pi,CRASHED

Testing pnpoly under eflisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/eflisp-prelude.scm
Compiling...
eflisp_comp /tmp/larcenous/eflisp/pnpoly.scm /tmp/larcenous/eflisp/pnpoly.scm
Running...
Running pnpoly:1000000
Elapsed time: 85.54445600509644 seconds (85.544) for pnpoly:1000000
+!CSVLINE!+eflisp-unknown,pnpoly:1000000,85.54445600509644

real	1m25.560s
user	1m25.385s
sys	0m0.113s

Testing ray under eflisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/eflisp-prelude.scm
Compiling...
eflisp_comp /tmp/larcenous/eflisp/ray.scm /tmp/larcenous/eflisp/ray.scm
Running...
Running ray:50
Elapsed time: 24.43340802192688 seconds (24.433) for ray:50
+!CSVLINE!+eflisp-unknown,ray:50,24.43340802192688

real	0m24.451s
user	0m24.364s
sys	0m0.055s

Testing simplex under eflisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/eflisp-prelude.scm
Compiling...
eflisp_comp /tmp/larcenous/eflisp/simplex.scm /tmp/larcenous/eflisp/simplex.scm
Running...
Running simplex:1000000
Elapsed time: 48.68701195716858 seconds (48.687) for simplex:1000000
+!CSVLINE!+eflisp-unknown,simplex:1000000,48.68701195716858

real	0m48.710s
user	0m48.512s
sys	0m0.113s

Testing ack under eflisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/eflisp-prelude.scm
Compiling...
eflisp_comp /tmp/larcenous/eflisp/ack.scm /tmp/larcenous/eflisp/ack.scm
Running...
Running ack:3:12:2
Elapsed time: 49.82701802253723 seconds (49.827) for ack:3:12:2
+!CSVLINE!+eflisp-unknown,ack:3:12:2,49.82701802253723

real	0m49.843s
user	0m49.402s
sys	0m0.246s

Testing array1 under eflisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/eflisp-prelude.scm
Compiling...
eflisp_comp /tmp/larcenous/eflisp/array1.scm /tmp/larcenous/eflisp/array1.scm
Running...
Running array1:1000000:500
Elapsed time: 61.73925399780273 seconds (61.739) for array1:1000000:500
+!CSVLINE!+eflisp-unknown,array1:1000000:500,61.73925399780273

real	1m1.760s
user	1m1.059s
sys	0m0.416s

Testing string under eflisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/eflisp-prelude.scm
Compiling...
eflisp_comp /tmp/larcenous/eflisp/string.scm /tmp/larcenous/eflisp/string.scm
Running...
Running string:500000:25
Elapsed time: 1.629751920700073 seconds (1.63) for string:500000:25
+!CSVLINE!+eflisp-unknown,string:500000:25,1.629751920700073

real	0m1.652s
user	0m1.287s
sys	0m0.344s

Testing sum1 under eflisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/eflisp-prelude.scm
Compiling...
eflisp_comp /tmp/larcenous/eflisp/sum1.scm /tmp/larcenous/eflisp/sum1.scm
Running...
Running sum1:25
Elapsed time: 0.7166979312896729 seconds (0.717) for sum1:25
+!CSVLINE!+eflisp-unknown,sum1:25,0.7166979312896729

real	0m0.730s
user	0m0.709s
sys	0m0.014s

Testing cat under eflisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/eflisp-prelude.scm
Compiling...
eflisp_comp /tmp/larcenous/eflisp/cat.scm /tmp/larcenous/eflisp/cat.scm
Running...
Running cat:50
Elapsed time: 24.44550490379333 seconds (24.446) for cat:50
+!CSVLINE!+eflisp-unknown,cat:50,24.44550490379333

real	0m24.461s
user	0m23.856s
sys	0m0.327s

Testing tail under eflisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/eflisp-prelude.scm
Compiling...
eflisp_comp /tmp/larcenous/eflisp/tail.scm /tmp/larcenous/eflisp/tail.scm
Running...
Running tail:25
Elapsed time: 0.5441169738769531 seconds (0.544) for tail:25
+!CSVLINE!+eflisp-unknown,tail:25,0.5441169738769531

real	0m0.564s
user	0m0.393s
sys	0m0.093s

Testing wc under eflisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/eflisp-prelude.scm
Compiling...
eflisp_comp /tmp/larcenous/eflisp/wc.scm /tmp/larcenous/eflisp/wc.scm
Running...
Running wc:inputs/bib:50
Elapsed time: 31.69426298141479 seconds (31.694) for wc:inputs/bib:50
+!CSVLINE!+eflisp-unknown,wc:inputs/bib:50,31.69426298141479

real	0m31.709s
user	0m31.238s
sys	0m0.296s

Testing read1 under eflisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/eflisp-prelude.scm
Compiling...
eflisp_comp /tmp/larcenous/eflisp/read1.scm /tmp/larcenous/eflisp/read1.scm
Running...
Running read1:2500
Elapsed time: 1.377700090408325 seconds (1.378) for read1:2500
+!CSVLINE!+eflisp-unknown,read1:2500,1.377700090408325

real	0m1.394s
user	0m1.353s
sys	0m0.033s

Testing compiler under eflisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/eflisp-prelude.scm
Compiling...
eflisp_comp /tmp/larcenous/eflisp/compiler.scm /tmp/larcenous/eflisp/compiler.scm
Running...
eval: variable string.rep has no value
in file /tmp/larcenous/eflisp/compiler.scm
#0 (make-string 5 #\space)
#1 (string->canonical-symbol
 "QUOTE")
#2 (lambda)

real	0m0.023s
user	0m0.019s
sys	0m0.002s
+!CSVLINE!+eflisp,compiler,CRASHED

Testing conform under eflisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/eflisp-prelude.scm
Compiling...
eflisp_comp /tmp/larcenous/eflisp/conform.scm /tmp/larcenous/eflisp/conform.scm
Running...
Running conform:500
Elapsed time: 41.56868600845337 seconds (41.569) for conform:500
+!CSVLINE!+eflisp-unknown,conform:500,41.56868600845337

real	0m41.590s
user	0m41.196s
sys	0m0.242s

Testing dynamic under eflisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/eflisp-prelude.scm
Compiling...
eflisp_comp /tmp/larcenous/eflisp/dynamic.scm /tmp/larcenous/eflisp/dynamic.scm
Running...
type error: set!: expected non-const, got symbol
in file /tmp/larcenous/eflisp/dynamic.scm
#0 (lambda)

real	0m0.023s
user	0m0.020s
sys	0m0.002s
+!CSVLINE!+eflisp,dynamic,CRASHED

Testing earley under eflisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/eflisp-prelude.scm
Compiling...
eflisp_comp /tmp/larcenous/eflisp/earley.scm /tmp/larcenous/eflisp/earley.scm
Running...
Running earley:1
Elapsed time: 25.46366214752197 seconds (25.464) for earley:1
+!CSVLINE!+eflisp-unknown,earley:1,25.46366214752197

real	0m25.679s
user	0m23.845s
sys	0m1.673s

Testing graphs under eflisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/eflisp-prelude.scm
Compiling...
eflisp_comp /tmp/larcenous/eflisp/graphs.scm /tmp/larcenous/eflisp/graphs.scm
Running...
Running graphs:7:3
Elapsed time: 59.40776395797729 seconds (59.408) for graphs:7:3
+!CSVLINE!+eflisp-unknown,graphs:7:3,59.40776395797729

real	0m59.438s
user	0m58.623s
sys	0m0.491s

Testing lattice under eflisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/eflisp-prelude.scm
Compiling...
eflisp_comp /tmp/larcenous/eflisp/lattice.scm /tmp/larcenous/eflisp/lattice.scm
Running...
Running lattice:44:10
Elapsed time: 72.14160394668579 seconds (72.142) for lattice:44:10
+!CSVLINE!+eflisp-unknown,lattice:44:10,72.14160394668579

real	1m12.159s
user	1m11.342s
sys	0m0.490s

Testing matrix under eflisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/eflisp-prelude.scm
Compiling...
eflisp_comp /tmp/larcenous/eflisp/matrix.scm /tmp/larcenous/eflisp/matrix.scm
Running...
Running matrix:5:5:2500
Elapsed time: 26.4947190284729 seconds (26.495) for matrix:5:5:2500
+!CSVLINE!+eflisp-unknown,matrix:5:5:2500,26.4947190284729

real	0m26.515s
user	0m26.159s
sys	0m0.208s

Testing maze under eflisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/eflisp-prelude.scm
Compiling...
eflisp_comp /tmp/larcenous/eflisp/maze.scm /tmp/larcenous/eflisp/maze.scm
Running...
Running maze:20:7:10000
Elapsed time: 24.93624806404114 seconds (24.936) for maze:20:7:10000
+!CSVLINE!+eflisp-unknown,maze:20:7:10000,24.93624806404114

real	0m24.961s
user	0m24.620s
sys	0m0.202s

Testing mazefun under eflisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/eflisp-prelude.scm
Compiling...
eflisp_comp /tmp/larcenous/eflisp/mazefun.scm /tmp/larcenous/eflisp/mazefun.scm
Running...
Running mazefun:11:11:10000
Elapsed time: 28.20501780509949 seconds (28.205) for mazefun:11:11:10000
+!CSVLINE!+eflisp-unknown,mazefun:11:11:10000,28.20501780509949

real	0m28.221s
user	0m27.869s
sys	0m0.204s

Testing nqueens under eflisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/eflisp-prelude.scm
Compiling...
eflisp_comp /tmp/larcenous/eflisp/nqueens.scm /tmp/larcenous/eflisp/nqueens.scm
Running...
Running nqueens:13:10
Elapsed time: 66.76906490325928 seconds (66.76900000000001) for nqueens:13:10
+!CSVLINE!+eflisp-unknown,nqueens:13:10,66.76906490325928

real	1m6.783s
user	1m5.919s
sys	0m0.507s

Testing paraffins under eflisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/eflisp-prelude.scm
Compiling...
eflisp_comp /tmp/larcenous/eflisp/paraffins.scm /tmp/larcenous/eflisp/paraffins.scm
Running...
Running paraffins:23:10
Elapsed time: 5.44037914276123 seconds (5.44) for paraffins:23:10
+!CSVLINE!+eflisp-unknown,paraffins:23:10,5.44037914276123

real	0m5.556s
user	0m4.711s
sys	0m0.816s

Testing parsing under eflisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/eflisp-prelude.scm
Compiling...
eflisp_comp /tmp/larcenous/eflisp/parsing.scm /tmp/larcenous/eflisp/parsing.scm
Running...
Running parsing:2500
eval: variable string.rep has no value
in file /tmp/larcenous/eflisp/parsing.scm
#0 (make-string 1024 #\space)
#1 (parse-string ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n; File:         nboyer.sch\n; Description:  The Boyer benchmark\n; Author:       Bob Boyer\n; Created:      5-Apr-85\n; Modified:     10-Apr-85 14:52:20 (Bob Shaw)\n;               22-Jul-87 (Will Clinger)\n;               2-Jul-88 (Will Clinger -- distinguished #f and the empty list)\n;               13-Feb-97 (Will Clinger -- fixed bugs in unifier and rules,\n;                          rewrote to eliminate property lists, and added\n;                          a scaling parameter suggested by Bob Boyer)\n;               19-Mar-99 (Will Clinger -- cleaned up comments)\n;               4-Apr-01 (Will Clinger -- changed four 1- symbols to sub1)\n; Language:     Scheme\n; Status:       Public Domain\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n;;; NBOYER -- Logic programming benchmark, originally written by Bob Boyer.\n;;; Fairly CONS intensive.\n\n; Note:  The version of this benchmark that appears in Dick Gabriel's book\n; contained several bugs that are corrected here.  These bugs are discussed\n; by Henry Baker, \"The Boyer Benchmark Meets Linear Logic\", ACM SIGPLAN Lisp\n; Pointers 6(4), October-December 1993, pages 3-10.  The fixed bugs are:\n;\n;    The benchmark now returns a boolean result.\n;    FALSEP and TRUEP use TERM-MEMBER? rather than MEMV (which is called MEMBER\n;         in Common Lisp)\n;    ONE-WAY-UNIFY1 now treats numbers correctly\n;    ONE-WAY-UNIFY1-LST now treats empty lists correctly\n;    Rule 19 has been corrected (this rule was not touched by the original\n;         benchmark, but is used by this version)\n;    Rules 84 and 101 have been corrected (but these rules are never touched\n;         by the benchmark)\n;\n; According to Baker, these bug fixes make the benchmark 10-25% slower.\n; Please do not compare the timings from this benchmark against those of\n; the original benchmark.\n;\n; This version of the benchmark also prints the number of rewrites as a sanity\n; check, because it is too easy for a buggy version to return the correct\n; boolean result.  The correct number of rewrites is\n;\n;     n      rewrites       peak live storage (approximate, in bytes)\n;     0         95024           520,000\n;     1        591777         2,085,000\n;     2       1813975         5,175,000\n;     3       5375678\n;     4      16445406\n;     5      51507739\n\n; Nboyer is a 2-phase benchmark.\n; The first phase attaches lemmas to symbols.  This phase is not timed,\n; but it accounts for very little of the runtime anyway.\n; The second phase creates the test problem, and tests to see\n; whether it is implied by the lemmas.\n\n(define (nboyer-benchmark . args)\n  (let ((n (if (null? args) 0 (car args))))\n    (setup-boyer)\n    (run-benchmark (string-append \"nboyer\"\n                                  (number->string n))\n                   1\n                   (lambda () (test-boyer n))\n                   (lambda (rewrites)\n                     (and (number? rewrites)\n                          (case n\n                           ((0)  (= rewrites 95024))\n                           ((1)  (= rewrites 591777))\n                           ((2)  (= rewrites 1813975))\n                           ((3)  (= rewrites 5375678))\n                           ((4)  (= rewrites 16445406))\n                           ((5)  (= rewrites 51507739))\n                           ; If it works for n <= 5, assume it works.\n                           (else #t)))))))\n\n(define (setup-boyer) #t) ; assigned below\n(define (test-boyer) #t)  ; assigned below\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;\n; The first phase.\n;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n; In the original benchmark, it stored a list of lemmas on the\n; property lists of symbols.\n; In the new benchmark, it maintains an association list of\n; symbols and symbol-records, and stores the list of lemmas\n; within the symbol-records.\n\n(let ()\n  \n  (define (setup)\n    (add-lemma-lst\n     (quote ((equal (compile form)\n                    (reverse (codegen (optimize form)\n                                      (nil))))\n             (equal (eqp x y)\n                    (equal (fix x)\n                           (fix y)))\n             (equal (greaterp x y)\n                    (lessp y x))\n             (equal (lesseqp x y)\n                    (not (lessp y x)))\n             (equal (greatereqp x y)\n                    (not (lessp x y)))\n             (equal (boolean x)\n                    (or (equal x (t))\n                        (equal x (f))))\n             (equal (iff x y)\n                    (and (implies x y)\n                         (implies y x)))\n             (equal (even1 x)\n                    (if (zerop x)\n                        (t)\n                        (odd (sub1 x))))\n             (equal (countps- l pred)\n                    (countps-loop l pred (zero)))\n             (equal (fact- i)\n                    (fact-loop i 1))\n             (equal (reverse- x)\n                    (reverse-loop x (nil)))\n             (equal (divides x y)\n                    (zerop (remainder y x)))\n             (equal (assume-true var alist)\n                    (cons (cons var (t))\n                          alist))\n             (equal (assume-false var alist)\n                    (cons (cons var (f))\n                          alist))\n             (equal (tautology-checker x)\n                    (tautologyp (normalize x)\n                                (nil)))\n             (equal (falsify x)\n                    (falsify1 (normalize x)\n                              (nil)))\n             (equal (prime x)\n                    (and (not (zerop x))\n                         (not (equal x (add1 (zero))))\n                         (prime1 x (sub1 x))))\n             (equal (and p q)\n                    (if p (if q (t)\n                                (f))\n                          (f)))\n             (equal (or p q)\n                    (if p (t)\n                          (if q (t)\n                                (f))))\n             (equal (not p)\n                    (if p (f)\n                          (t)))\n             (equal (implies p q)\n                    (if p (if q (t)\n                                (f))\n                          (t)))\n             (equal (fix x)\n                    (if (numberp x)\n                        x\n                        (zero)))\n             (equal (if (if a b c)\n                        d e)\n                    (if a (if b d e)\n                          (if c d e)))\n             (equal (zerop x)\n                    (or (equal x (zero))\n                        (not (numberp x))))\n             (equal (plus (plus x y)\n                          z)\n                    (plus x (plus y z)))\n             (equal (equal (plus a b)\n                           (zero))\n                    (and (zerop a)\n                         (zerop b)))\n             (equal (difference x x)\n                    (zero))\n             (equal (equal (plus a b)\n                           (plus a c))\n                    (equal (fix b)\n                           (fix c)))\n             (equal (equal (zero)\n                           (difference x y))\n                    (not (lessp y x)))\n             (equal (equal x (difference x y))\n                    (and (numberp x)\n                         (or (equal x (zero))\n                             (zerop y))))\n             (equal (meaning (plus-tree (append x y))\n                             a)\n                    (plus (meaning (plus-tree x)\n                                   a)\n                          (meaning (plus-tree y)\n                                   a)))\n             (equal (meaning (plus-tree (plus-fringe x))\n                             a)\n                    (fix (meaning x a)))\n             (equal (append (append x y)\n                            z)\n                    (append x (append y z)))\n             (equal (reverse (append a b))\n                    (append (reverse b)\n                            (reverse a)))\n             (equal (times x (plus y z))\n                    (plus (times x y)\n                          (times x z)))\n             (equal (times (times x y)\n                           z)\n                    (times x (times y z)))\n             (equal (equal (times x y)\n                           (zero))\n                    (or (zerop x)\n                        (zerop y)))\n             (equal (exec (append x y)\n                          pds envrn)\n                    (exec y (exec x pds envrn)\n                            envrn))\n             (equal (mc-flatten x y)\n                    (append (flatten x)\n                            y))\n             (equal (member x (append a b))\n                    (or (member x a)\n                        (member x b)))\n             (equal (member x (reverse y))\n                    (member x y))\n             (equal (length (reverse x))\n                    (length x))\n             (equal (member a (intersect b c))\n                    (and (member a b)\n                         (member a c)))\n             (equal (nth (zero)\n                         i)\n                    (zero))\n             (equal (exp i (plus j k))\n                    (times (exp i j)\n                           (exp i k)))\n             (equal (exp i (times j k))\n                    (exp (exp i j)\n                         k))\n             (equal (reverse-loop x y)\n                    (append (reverse x)\n                            y))\n             (equal (reverse-loop x (nil))\n                    (reverse x))\n             (equal (count-list z (sort-lp x y))\n                    (plus (count-list z x)\n                          (count-list z y)))\n             (equal (equal (append a b)\n                           (append a c))\n                    (equal b c))\n             (equal (plus (remainder x y)\n                          (times y (quotient x y)))\n                    (fix x))\n             (equal (power-eval (big-plus1 l i base)\n                                base)\n                    (plus (power-eval l base)\n                          i))\n             (equal (power-eval (big-plus x y i base)\n                                base)\n                    (plus i (plus (power-eval x base)\n                                  (power-eval y base))))\n             (equal (remainder y 1)\n                    (zero))\n             (equal (lessp (remainder x y)\n                           y)\n                    (not (zerop y)))\n             (equal (remainder x x)\n                    (zero))\n             (equal (lessp (quotient i j)\n                           i)\n                    (and (not (zerop i))\n                         (or (zerop j)\n                             (not (equal j 1)))))\n             (equal (lessp (remainder x y)\n                           x)\n                    (and (not (zerop y))\n                         (not (zerop x))\n                         (not (lessp x y))))\n             (equal (power-eval (power-rep i base)\n                                base)\n                    (fix i))\n             (equal (power-eval (big-plus (power-rep i base)\n                                          (power-rep j base)\n                                          (zero)\n                                          base)\n                                base)\n                    (plus i j))\n             (equal (gcd x y)\n                    (gcd y x))\n             (equal (nth (append a b)\n                         i)\n                    (append (nth a i)\n                            (nth b (difference i (length a)))))\n             (equal (difference (plus x y)\n                                x)\n                    (fix y))\n             (equal (difference (plus y x)\n                                x)\n                    (fix y))\n             (equal (difference (plus x y)\n                                (plus x z))\n                    (difference y z))\n             (equal (times x (difference c w))\n                    (difference (times c x)\n                                (times w x)))\n             (equal (remainder (times x z)\n                               z)\n                    (zero))\n             (equal (difference (plus b (plus a c))\n                                a)\n                    (plus b c))\n             (equal (difference (add1 (plus y z))\n                                z)\n                    (add1 y))\n             (equal (lessp (plus x y)\n                           (plus x z))\n                    (lessp y z))\n             (equal (lessp (times x z)\n                           (times y z))\n                    (and (not (zerop z))\n                         (lessp x y)))\n             (equal (lessp y (plus x y))\n                    (not (zerop x)))\n             (equal (gcd (times x z)\n                         (times y z))\n                    (times z (gcd x y)))\n             (equal (value (normalize x)\n                           a)\n                    (value x a))\n             (equal (equal (flatten x)\n                           (cons y (nil)))\n                    (and (nlistp x)\n                         (equal x y)))\n             (equal (listp (gopher x))\n                    (listp x))\n             (equal (samefringe x y)\n                    (equal (flatten x)\n                           (flatten y)))\n             (equal (equal (greatest-factor x y)\n                           (zero))\n                    (and (or (zerop y)\n                             (equal y 1))\n                         (equal x (zero))))\n             (equal (equal (greatest-factor x y)\n                           1)\n                    (equal x 1))\n             (equal (numberp (greatest-factor x y))\n                    (not (and (or (zerop y)\n                                  (equal y 1))\n                              (not (numberp x)))))\n             (equal (times-list (append x y))\n                    (times (times-list x)\n                           (times-list y)))\n             (equal (prime-list (append x y))\n                    (and (prime-list x)\n                         (prime-list y)))\n             (equal (equal z (times w z))\n                    (and (numberp z)\n                         (or (equal z (zero))\n                             (equal w 1))))\n             (equal (greatereqp x y)\n                    (not (lessp x y)))\n             (equal (equal x (times x y))\n                    (or (equal x (zero))\n                        (and (numberp x)\n                             (equal y 1))))\n             (equal (remainder (times y x)\n                               y)\n                    (zero))\n             (equal (equal (times a b)\n                           1)\n                    (and (not (equal a (zero)))\n                         (not (equal b (zero)))\n                         (numberp a)\n                         (numberp b)\n                         (equal (sub1 a)\n                                (zero))\n                         (equal (sub1 b)\n                                (zero))))\n             (equal (lessp (length (delete x l))\n                           (length l))\n                    (member x l))\n             (equal (sort2 (delete x l))\n                    (delete x (sort2 l)))\n             (equal (dsort x)\n                    (sort2 x))\n             (equal (length (cons x1\n                                  (cons x2\n                                        (cons x3 (cons x4\n                                                       (cons x5\n                                                             (cons x6 x7)))))))\n                    (plus 6 (length x7)))\n             (equal (difference (add1 (add1 x))\n                                2)\n                    (fix x))\n             (equal (quotient (plus x (plus x y))\n                              2)\n                    (plus x (quotient y 2)))\n             (equal (sigma (zero)\n                           i)\n                    (quotient (times i (add1 i))\n                              2))\n             (equal (plus x (add1 y))\n                    (if (numberp y)\n                        (add1 (plus x y))\n                        (add1 x)))\n             (equal (equal (difference x y)\n                           (difference z y))\n                    (if (lessp x y)\n                        (not (lessp y z))\n                        (if (lessp z y)\n                            (not (lessp y x))\n                            (equal (fix x)\n                                   (fix z)))))\n             (equal (meaning (plus-tree (delete x y))\n                             a)\n                    (if (member x y)\n                        (difference (meaning (plus-tree y)\n                                             a)\n                                    (meaning x a))\n                        (meaning (plus-tree y)\n                                 a)))\n             (equal (times x (add1 y))\n                    (if (numberp y)\n                        (plus x (times x y))\n                        (fix x)))\n             (equal (nth (nil)\n                         i)\n                    (if (zerop i)\n                        (nil)\n                        (zero)))\n             (equal (last (append a b))\n                    (if (listp b)\n                        (last b)\n                        (if (listp a)\n                            (cons (car (last a))\n                                  b)\n                            b)))\n             (equal (equal (lessp x y)\n                           z)\n                    (if (lessp x y)\n                        (equal (t) z)\n                        (equal (f) z)))\n             (equal (assignment x (append a b))\n                    (if (assignedp x a)\n                        (assignment x a)\n                        (assignment x b)))\n             (equal (car (gopher x))\n                    (if (listp x)\n                        (car (flatten x))\n                        (zero)))\n             (equal (flatten (cdr (gopher x)))\n                    (if (listp x)\n                        (cdr (flatten x))\n                        (cons (zero)\n                              (nil))))\n             (equal (quotient (times y x)\n                              y)\n                    (if (zerop y)\n                        (zero)\n                        (fix x)))\n             (equal (get j (set i val mem))\n                    (if (eqp j i)\n                        val\n                        (get j mem)))))))\n  \n  (define (add-lemma-lst lst)\n    (cond ((null? lst)\n           #t)\n          (else (add-lemma (car lst))\n                (add-lemma-lst (cdr lst)))))\n  \n  (define (add-lemma term)\n    (cond ((and (pair? term)\n                (eq? (car term)\n                     (quote equal))\n                (pair? (cadr term)))\n           (put (car (cadr term))\n                (quote lemmas)\n                (cons\n                 (translate-term term)\n                 (get (car (cadr term)) (quote lemmas)))))\n          (else (error \"ADD-LEMMA did not like term:  \" term))))\n  \n  ; Translates a term by replacing its constructor symbols by symbol-records.\n  \n  (define (translate-term term)\n    (cond ((not (pair? term))\n           term)\n          (else (cons (symbol->symbol-record (car term))\n                      (translate-args (cdr term))))))\n  \n  (define (translate-args lst)\n    (cond ((null? lst)\n           '())\n          (else (cons (translate-term (car lst))\n                      (translate-args (cdr lst))))))\n  \n  ; For debugging only, so the use of MAP does not change\n  ; the first-order character of the benchmark.\n  \n  (define (untranslate-term term)\n    (cond ((not (pair? term))\n           term)\n          (else (cons (get-name (car term))\n                      (map untranslate-term (cdr term))))))\n  \n  ; A symbol-record is represented as a vector with two fields:\n  ; the symbol (for debugging) and\n  ; the list of lemmas associated with the symbol.\n  \n  (define (put sym property value)\n    (put-lemmas! (symbol->symbol-record sym) value))\n  \n  (define (get sym property)\n    (get-lemmas (symbol->symbol-record sym)))\n  \n  (define (symbol->symbol-record sym)\n    (let ((x (assq sym *symbol-records-alist*)))\n      (if x\n          (cdr x)\n          (let ((r (make-symbol-record sym)))\n            (set! *symbol-records-alist*\n                  (cons (cons sym r)\n                        *symbol-records-alist*))\n            r))))\n  \n  ; Association list of symbols and symbol-records.\n  \n  (define *symbol-records-alist* '())\n  \n  ; A symbol-record is represented as a vector with two fields:\n  ; the symbol (for debugging) and\n  ; the list of lemmas associated with the symbol.\n  \n  (define (make-symbol-record sym)\n    (vector sym '()))\n  \n  (define (put-lemmas! symbol-record lemmas)\n    (vector-set! symbol-record 1 lemmas))\n  \n  (define (get-lemmas symbol-record)\n    (vector-ref symbol-record 1))\n  \n  (define (get-name symbol-record)\n    (vector-ref symbol-record 0))\n  \n  (define (symbol-record-equal? r1 r2)\n    (eq? r1 r2))\n  \n  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n  ;\n  ; The second phase.\n  ;\n  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n  \n  (define (test n)\n    (let ((term\n           (apply-subst\n            (translate-alist\n             (quote ((x f (plus (plus a b)\n                                (plus c (zero))))\n                     (y f (times (times a b)\n                                 (plus c d)))\n                     (z f (reverse (append (append a b)\n                                           (nil))))\n                     (u equal (plus a b)\n                              (difference x y))\n                     (w lessp (remainder a b)\n                              (member a (length b))))))\n            (translate-term\n             (do ((term\n                   (quote (implies (and (implies x y)\n                                        (and (implies y z)\n                                             (and (implies z u)\n                                                  (implies u w))))\n                                   (implies x w)))\n                   (list 'or term '(f)))\n                  (n n (- n 1)))\n                 ((zero? n) term))))))\n    (tautp term)))\n  \n  (define (translate-alist alist)\n    (cond ((null? alist)\n           '())\n          (else (cons (cons (caar alist)\n                            (translate-term (cdar alist)))\n                      (translate-alist (cdr alist))))))\n  \n  (define (apply-subst alist term)\n    (cond ((not (pair? term))\n           (let ((temp-temp (assq term alist)))\n             (if temp-temp\n                 (cdr temp-temp)\n                 term)))\n          (else (cons (car term)\n                      (apply-subst-lst alist (cdr term))))))\n  \n  (define (apply-subst-lst alist lst)\n    (cond ((null? lst)\n           '())\n          (else (cons (apply-subst alist (car lst))\n                      (apply-subst-lst alist (cdr lst))))))\n  \n  (define (tautp x)\n    (tautologyp (rewrite x)\n                '() '()))\n  \n  (define (tautologyp x true-lst false-lst)\n    (cond ((truep x true-lst)\n           #t)\n          ((falsep x false-lst)\n           #f)\n          ((not (pair? x))\n           #f)\n          ((eq? (car x) if-constructor)\n           (cond ((truep (cadr x)\n                         true-lst)\n                  (tautologyp (caddr x)\n                              true-lst false-lst))\n                 ((falsep (cadr x)\n                          false-lst)\n                  (tautologyp (cadddr x)\n                              true-lst false-lst))\n                 (else (and (tautologyp (caddr x)\n                                        (cons (cadr x)\n                                              true-lst)\n                                        false-lst)\n                            (tautologyp (cadddr x)\n                                        true-lst\n                                        (cons (cadr x)\n                                              false-lst))))))\n          (else #f)))\n  \n  (define if-constructor '*) ; becomes (symbol->symbol-record 'if)\n  \n  (define rewrite-count 0) ; sanity check\n  \n  (define (rewrite term)\n    (set! rewrite-count (+ rewrite-count 1))\n    (cond ((not (pair? term))\n           term)\n          (else (rewrite-with-lemmas (cons (car term)\n                                           (rewrite-args (cdr term)))\n                                     (get-lemmas (car term))))))\n  \n  (define (rewrite-args lst)\n    (cond ((null? lst)\n           '())\n          (else (cons (rewrite (car lst))\n                      (rewrite-args (cdr lst))))))\n  \n  (define (rewrite-with-lemmas term lst)\n    (cond ((null? lst)\n           term)\n          ((one-way-unify term (cadr (car lst)))\n           (rewrite (apply-subst unify-subst (caddr (car lst)))))\n          (else (rewrite-with-lemmas term (cdr lst)))))\n  \n  (define unify-subst '*)\n  \n  (define (one-way-unify term1 term2)\n    (begin (set! unify-subst '())\n           (one-way-unify1 term1 term2)))\n  \n  (define (one-way-unify1 term1 term2)\n    (cond ((not (pair? term2))\n           (let ((temp-temp (assq term2 unify-subst)))\n             (cond (temp-temp\n                    (term-equal? term1 (cdr temp-temp)))\n                   ((number? term2)          ; This bug fix makes\n                    (equal? term1 term2))    ; nboyer 10-25% slower!\n                   (else\n                    (set! unify-subst (cons (cons term2 term1)\n                                            unify-subst))\n                    #t))))\n          ((not (pair? term1))\n           #f)\n          ((eq? (car term1)\n                (car term2))\n           (one-way-unify1-lst (cdr term1)\n                               (cdr term2)))\n          (else #f)))\n  \n  (define (one-way-unify1-lst lst1 lst2)\n    (cond ((null? lst1)\n           (null? lst2))\n          ((null? lst2)\n           #f)\n          ((one-way-unify1 (car lst1)\n                           (car lst2))\n           (one-way-unify1-lst (cdr lst1)\n                               (cdr lst2)))\n          (else #f)))\n  \n  (define (falsep x lst)\n    (or (term-equal? x false-term)\n        (term-member? x lst)))\n  \n  (define (truep x lst)\n    (or (term-equal? x true-term)\n        (term-member? x lst)))\n  \n  (define false-term '*)  ; becomes (translate-term '(f))\n  (define true-term '*)   ; becomes (translate-term '(t))\n  \n  ; The next two procedures were in the original benchmark\n  ; but were never used.\n  \n  (define (trans-of-implies n)\n    (translate-term\n     (list (quote implies)\n           (trans-of-implies1 n)\n           (list (quote implies)\n                 0 n))))\n  \n  (define (trans-of-implies1 n)\n    (cond ((equal? n 1)\n           (list (quote implies)\n                 0 1))\n          (else (list (quote and)\n                      (list (quote implies)\n                            (- n 1)\n                            n)\n                      (trans-of-implies1 (- n 1))))))\n  \n  ; Translated terms can be circular structures, which can't be\n  ; compared using Scheme's equal? and member procedures, so we\n  ; use these instead.\n  \n  (define (term-equal? x y)\n    (cond ((pair? x)\n           (and (pair? y)\n                (symbol-record-equal? (car x) (car y))\n                (term-args-equal? (cdr x) (cdr y))))\n          (else (equal? x y))))\n  \n  (define (term-args-equal? lst1 lst2)\n    (cond ((null? lst1)\n           (null? lst2))\n          ((null? lst2)\n           #f)\n          ((term-equal? (car lst1) (car lst2))\n           (term-args-equal? (cdr lst1) (cdr lst2)))\n          (else #f)))\n  \n  (define (term-member? x lst)\n    (cond ((null? lst)\n           #f)\n          ((term-equal? x (car lst))\n           #t)\n          (else (term-member? x (cdr lst)))))\n  \n  (set! setup-boyer\n        (lambda ()\n          (set! *symbol-records-alist* '())\n          (set! if-constructor (symbol->symbol-record 'if))\n          (set! false-term (translate-term '(f)))\n          (set! true-term  (translate-term '(t)))\n          (setup)))\n  \n  (set! test-boyer\n        (lambda (n)\n          (set! rewrite-count 0)\n          (let ((answer (test n)))\n            (write rewrite-count)\n            (display \" rewrites\")\n            (newline)\n            (if answer\n                rewrite-count\n                #f)))))\n\n(should return this list)\n")
#2 (parsing-benchmark/lambda
 0 #f)

real	0m0.044s
user	0m0.037s
sys	0m0.004s
+!CSVLINE!+eflisp,parsing,CRASHED

Testing peval under eflisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/eflisp-prelude.scm
Compiling...
eflisp_comp /tmp/larcenous/eflisp/peval.scm /tmp/larcenous/eflisp/peval.scm
Running...
Running peval:2000
Elapsed time: 28.6810998916626 seconds (28.681) for peval:2000
+!CSVLINE!+eflisp-unknown,peval:2000,28.6810998916626

real	0m28.703s
user	0m28.203s
sys	0m0.237s

Testing primes under eflisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/eflisp-prelude.scm
Compiling...
eflisp_comp /tmp/larcenous/eflisp/primes.scm /tmp/larcenous/eflisp/primes.scm
Running...
Running primes:1000:10000
Elapsed time: 13.56025695800781 seconds (13.56) for primes:1000:10000
+!CSVLINE!+eflisp-unknown,primes:1000:10000,13.56025695800781

real	0m13.575s
user	0m13.452s
sys	0m0.073s

Testing quicksort under eflisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/eflisp-prelude.scm
Compiling...
eflisp_comp /tmp/larcenous/eflisp/quicksort.scm /tmp/larcenous/eflisp/quicksort.scm
Running...
Running quicksort:10000:2500
Elapsed time: 48.93251991271973 seconds (48.933) for quicksort:10000:2500
+!CSVLINE!+eflisp-unknown,quicksort:10000:2500,48.93251991271973

real	0m48.959s
user	0m48.560s
sys	0m0.249s

Testing scheme under eflisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/eflisp-prelude.scm
Compiling...
eflisp_comp /tmp/larcenous/eflisp/scheme.scm /tmp/larcenous/eflisp/scheme.scm
Running...
eval: variable exp has no value
in file /tmp/larcenous/eflisp/scheme.scm
#0 (lambda)

real	0m0.027s
user	0m0.024s
sys	0m0.002s
+!CSVLINE!+eflisp,scheme,CRASHED

Testing slatex under eflisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/eflisp-prelude.scm
Compiling...
eflisp_comp /tmp/larcenous/eflisp/slatex.scm /tmp/larcenous/eflisp/slatex.scm
Running...
eval: variable string.rep has no value
in file /tmp/larcenous/eflisp/slatex.scm
#0 (make-string 200 #\space)
#1 (lambda)
#2 (lambda)

real	0m0.020s
user	0m0.016s
sys	0m0.002s
+!CSVLINE!+eflisp,slatex,CRASHED

Testing chudnovsky under eflisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/eflisp-prelude.scm
Compiling...
eflisp_comp /tmp/larcenous/eflisp/chudnovsky.scm /tmp/larcenous/eflisp/chudnovsky.scm
Running...
parse-error: read: overflow in numeric constant 314159265358979323846264338327950288419716939937510
in file /tmp/larcenous/eflisp/chudnovsky.scm

real	0m0.016s
user	0m0.012s
sys	0m0.002s
+!CSVLINE!+eflisp,chudnovsky,CRASHED

Testing nboyer under eflisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/eflisp-prelude.scm
Compiling...
eflisp_comp /tmp/larcenous/eflisp/nboyer.scm /tmp/larcenous/eflisp/nboyer.scm
Running...
Running nboyer:5:1
Elapsed time: 13.53421401977539 seconds (13.534) for nboyer:5:1
+!CSVLINE!+eflisp-unknown,nboyer:5:1,13.53421401977539

real	0m13.616s
user	0m13.062s
sys	0m0.514s

Testing sboyer under eflisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/eflisp-prelude.scm
Compiling...
eflisp_comp /tmp/larcenous/eflisp/sboyer.scm /tmp/larcenous/eflisp/sboyer.scm
Running...
Running sboyer:5:1
Elapsed time: 15.73388600349426 seconds (15.734) for sboyer:5:1
+!CSVLINE!+eflisp-unknown,sboyer:5:1,15.73388600349426

real	0m15.779s
user	0m15.445s
sys	0m0.271s

Testing gcbench under eflisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/eflisp-prelude.scm
Compiling...
eflisp_comp /tmp/larcenous/eflisp/gcbench.scm /tmp/larcenous/eflisp/gcbench.scm
Running...
The garbage collector should touch about 128 megabytes of heap storage.
The use of more or less memory will skew the results.
Running gcbench:20:1
Garbage Collector Test
 Stretching memory with a binary tree of depth 20
 Total memory available= ???????? bytes  Free memory= ???????? bytes
GCBench: Main
 Creating a long-lived binary tree of depth 18
 Creating a long-lived array of 2097148 inexact reals
 Total memory available= ???????? bytes  Free memory= ???????? bytes
Creating 135300 trees of depth 4
GCBench: Top down construction
GCBench: Bottom up construction
Creating 33026 trees of depth 6
GCBench: Top down construction
GCBench: Bottom up construction
Creating 8208 trees of depth 8
GCBench: Top down construction
GCBench: Bottom up construction
Creating 2048 trees of depth 10
GCBench: Top down construction
GCBench: Bottom up construction
Creating 512 trees of depth 12
GCBench: Top down construction
GCBench: Bottom up construction
Creating 128 trees of depth 14
GCBench: Top down construction
GCBench: Bottom up construction
Creating 32 trees of depth 16
GCBench: Top down construction
GCBench: Bottom up construction
Creating 8 trees of depth 18
GCBench: Top down construction
GCBench: Bottom up construction
 Total memory available= ???????? bytes  Free memory= ???????? bytes
Elapsed time: 21.96671795845032 seconds (21.967) for gcbench:20:1
+!CSVLINE!+eflisp-unknown,gcbench:20:1,21.96671795845032

real	0m22.047s
user	0m21.373s
sys	0m0.577s

Testing mperm under eflisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/eflisp-prelude.scm
Compiling...
eflisp_comp /tmp/larcenous/eflisp/mperm.scm /tmp/larcenous/eflisp/mperm.scm
Running...
arg-error: apply: too many arguments
in file /tmp/larcenous/eflisp/mperm.scm
#0 (<= 0 1 2)

real	0m0.017s
user	0m0.014s
sys	0m0.002s
+!CSVLINE!+eflisp,mperm,CRASHED

Testing equal under eflisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/eflisp-prelude.scm
Compiling...
eflisp_comp /tmp/larcenous/eflisp/equal.scm /tmp/larcenous/eflisp/equal.scm
Running...
Running equal:100:100:8:1000:2000:5000
./bench: line 675: 15837 Cputime limit exceeded: 24  "${EFLISP}" "$1" < "$2"

real	5m1.019s
user	4m58.835s
sys	0m1.340s
+!CSVLINE!+eflisp,equal,CRASHED

Testing bv2string under eflisp
Including prelude /Users/e/Dev/scheme/r7rs-benchmarks_dcurrie/src/eflisp-prelude.scm
Compiling...
eflisp_comp /tmp/larcenous/eflisp/bv2string.scm /tmp/larcenous/eflisp/bv2string.scm
Running...
Running bv2string:1000:1000:100
eval: variable make-bytevector has no value
in file /tmp/larcenous/eflisp/bv2string.scm
#0 (string-bytevector-tests/random-bytevector
 10)
#1 (string-bytevector-tests
 1000 1000)
#2 (main/lambda)

real	0m0.016s
user	0m0.013s
sys	0m0.002s
+!CSVLINE!+eflisp,bv2string,CRASHED
